
SELF_BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080059d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000007c  08005a50  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005a50  000072f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faf3  00000000  00000000  000070a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255a  00000000  00000000  00016b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000190f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c36  00000000  00000000  0001a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f3a  00000000  00000000  0001aca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141d4  00000000  00000000  00033be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d00d  00000000  00000000  00047db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4dc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004734  00000000  00000000  000d4e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d9538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080058f0 	.word	0x080058f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080058f0 	.word	0x080058f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	0000      	movs	r0, r0
	...

08000950 <filterGetPitchAngle>:
#include "filter.h"

static Filter_Handler hfilter;

int32_t filterGetPitchAngle()
{
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
	Acc_Handler acc_raw, acc_filtered;
	Gyro_Handler gyro_raw, gyro_filtered;

	int32_t pitch_angle = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t dt = HAL_GetTick() - hfilter.timestamp;
 800095a:	f000 ffdd 	bl	8001918 <HAL_GetTick>
 800095e:	4603      	mov	r3, r0
 8000960:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <filterGetPitchAngle+0xd0>)
 8000962:	8892      	ldrh	r2, [r2, #4]
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	623b      	str	r3, [r7, #32]
	hfilter.timestamp = HAL_GetTick();
 8000968:	f000 ffd6 	bl	8001918 <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <filterGetPitchAngle+0xd0>)
 8000972:	809a      	strh	r2, [r3, #4]

	mpu6050GetGyro(&gyro_raw);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fcfb 	bl	8001374 <mpu6050GetGyro>
	mpu6050GetAcc(&acc_raw);
 800097e:	f107 0318 	add.w	r3, r7, #24
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fcb4 	bl	80012f0 <mpu6050GetAcc>

	//Apply Low-Pass filter for the Accelerometer
	filterLpAcc(&acc_raw, &acc_filtered);
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	4611      	mov	r1, r2
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f848 	bl	8000a28 <filterLpAcc>

	//Apply High-Pass filter for the Gyroscope
	filterHpGyro(&gyro_raw, &gyro_filtered);
 8000998:	463a      	mov	r2, r7
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f88d 	bl	8000ac0 <filterHpGyro>

	//Combine both inputs giving 98% weight to gyro according to literature
	pitch_angle = 0.98 * (hfilter.last_pitch_angle + gyro_filtered.x*dt) + 0.02*acc_filtered.x;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <filterGetPitchAngle+0xd0>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009ae:	4619      	mov	r1, r3
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	fb01 f303 	mul.w	r3, r1, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fd13 	bl	80003e4 <__aeabi_ui2d>
 80009be:	a314      	add	r3, pc, #80	@ (adr r3, 8000a10 <filterGetPitchAngle+0xc0>)
 80009c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c4:	f7ff fd88 	bl	80004d8 <__aeabi_dmul>
 80009c8:	4602      	mov	r2, r0
 80009ca:	460b      	mov	r3, r1
 80009cc:	4614      	mov	r4, r2
 80009ce:	461d      	mov	r5, r3
 80009d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fd15 	bl	8000404 <__aeabi_i2d>
 80009da:	a30f      	add	r3, pc, #60	@ (adr r3, 8000a18 <filterGetPitchAngle+0xc8>)
 80009dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e0:	f7ff fd7a 	bl	80004d8 <__aeabi_dmul>
 80009e4:	4602      	mov	r2, r0
 80009e6:	460b      	mov	r3, r1
 80009e8:	4620      	mov	r0, r4
 80009ea:	4629      	mov	r1, r5
 80009ec:	f7ff fbbe 	bl	800016c <__adddf3>
 80009f0:	4602      	mov	r2, r0
 80009f2:	460b      	mov	r3, r1
 80009f4:	4610      	mov	r0, r2
 80009f6:	4619      	mov	r1, r3
 80009f8:	f7ff ff80 	bl	80008fc <__aeabi_d2iz>
 80009fc:	4603      	mov	r3, r0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24

	return pitch_angle;
 8000a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3728      	adds	r7, #40	@ 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	f3af 8000 	nop.w
 8000a10:	f5c28f5c 	.word	0xf5c28f5c
 8000a14:	3fef5c28 	.word	0x3fef5c28
 8000a18:	47ae147b 	.word	0x47ae147b
 8000a1c:	3f947ae1 	.word	0x3f947ae1
 8000a20:	20000098 	.word	0x20000098
 8000a24:	00000000 	.word	0x00000000

08000a28 <filterLpAcc>:

void filterLpAcc(Acc_Handler* acc_raw, Acc_Handler* acc_filtered)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	acc_filtered->x = acc_raw->x / 32.8;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fce3 	bl	8000404 <__aeabi_i2d>
 8000a3e:	a31e      	add	r3, pc, #120	@ (adr r3, 8000ab8 <filterLpAcc+0x90>)
 8000a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a44:	f7ff fe72 	bl	800072c <__aeabi_ddiv>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f7ff ff54 	bl	80008fc <__aeabi_d2iz>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	801a      	strh	r2, [r3, #0]
	acc_filtered->y = acc_raw->y / 32.8;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fcce 	bl	8000404 <__aeabi_i2d>
 8000a68:	a313      	add	r3, pc, #76	@ (adr r3, 8000ab8 <filterLpAcc+0x90>)
 8000a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a6e:	f7ff fe5d 	bl	800072c <__aeabi_ddiv>
 8000a72:	4602      	mov	r2, r0
 8000a74:	460b      	mov	r3, r1
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f7ff ff3f 	bl	80008fc <__aeabi_d2iz>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	805a      	strh	r2, [r3, #2]
	acc_filtered->z = acc_raw->z / 32.8;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fcb9 	bl	8000404 <__aeabi_i2d>
 8000a92:	a309      	add	r3, pc, #36	@ (adr r3, 8000ab8 <filterLpAcc+0x90>)
 8000a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a98:	f7ff fe48 	bl	800072c <__aeabi_ddiv>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f7ff ff2a 	bl	80008fc <__aeabi_d2iz>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	809a      	strh	r2, [r3, #4]
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	66666666 	.word	0x66666666
 8000abc:	40406666 	.word	0x40406666

08000ac0 <filterHpGyro>:

void filterHpGyro(Gyro_Handler* gyro_raw, Gyro_Handler* gyro_filtered)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	gyro_filtered->x = gyro_raw->x * G / 16384;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fc97 	bl	8000404 <__aeabi_i2d>
 8000ad6:	a32c      	add	r3, pc, #176	@ (adr r3, 8000b88 <filterHpGyro+0xc8>)
 8000ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000adc:	f7ff fcfc 	bl	80004d8 <__aeabi_dmul>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 0200 	mov.w	r2, #0
 8000aec:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <filterHpGyro+0xd0>)
 8000aee:	f7ff fe1d 	bl	800072c <__aeabi_ddiv>
 8000af2:	4602      	mov	r2, r0
 8000af4:	460b      	mov	r3, r1
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	f7ff feff 	bl	80008fc <__aeabi_d2iz>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	801a      	strh	r2, [r3, #0]
	gyro_filtered->y = gyro_raw->y * G / 16384;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fc79 	bl	8000404 <__aeabi_i2d>
 8000b12:	a31d      	add	r3, pc, #116	@ (adr r3, 8000b88 <filterHpGyro+0xc8>)
 8000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b18:	f7ff fcde 	bl	80004d8 <__aeabi_dmul>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	460b      	mov	r3, r1
 8000b20:	4610      	mov	r0, r2
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <filterHpGyro+0xd0>)
 8000b2a:	f7ff fdff 	bl	800072c <__aeabi_ddiv>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	460b      	mov	r3, r1
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	f7ff fee1 	bl	80008fc <__aeabi_d2iz>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	805a      	strh	r2, [r3, #2]
	gyro_filtered->z = gyro_raw->z * G / 16384;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fc5b 	bl	8000404 <__aeabi_i2d>
 8000b4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8000b88 <filterHpGyro+0xc8>)
 8000b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b54:	f7ff fcc0 	bl	80004d8 <__aeabi_dmul>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <filterHpGyro+0xd0>)
 8000b66:	f7ff fde1 	bl	800072c <__aeabi_ddiv>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	f7ff fec3 	bl	80008fc <__aeabi_d2iz>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	809a      	strh	r2, [r3, #4]
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	51eb851f 	.word	0x51eb851f
 8000b8c:	40239eb8 	.word	0x40239eb8
 8000b90:	40d00000 	.word	0x40d00000

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b98:	f000 fe66 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9c:	f000 f834 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba0:	f000 f92a 	bl	8000df8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ba4:	f000 f86c 	bl	8000c80 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ba8:	f000 f8fc 	bl	8000da4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000bac:	f000 f896 	bl	8000cdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Send Hello message to UART to test transmission
  if(HAL_UART_Transmit(&huart1, (uint8_t*)hello_msg, strlen(hello_msg), HAL_MAX_DELAY) != HAL_OK)
 8000bb0:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <main+0x6c>)
 8000bb2:	f7ff facd 	bl	8000150 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	4910      	ldr	r1, [pc, #64]	@ (8000c00 <main+0x6c>)
 8000bc0:	4810      	ldr	r0, [pc, #64]	@ (8000c04 <main+0x70>)
 8000bc2:	f003 fc11 	bl	80043e8 <HAL_UART_Transmit>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <main+0x3c>
  {
	  Error_Handler();
 8000bcc:	f000 f954 	bl	8000e78 <Error_Handler>
  }

  //Init IMU
  if(!mpu6050Init()) Error_Handler();
 8000bd0:	f000 fa84 	bl	80010dc <mpu6050Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f083 0301 	eor.w	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <main+0x50>
 8000be0:	f000 f94a 	bl	8000e78 <Error_Handler>

  //Init both motors
  if(!motorInit()) Error_Handler();
 8000be4:	f000 f94e 	bl	8000e84 <motorInit>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f083 0301 	eor.w	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <main+0x64>
 8000bf4:	f000 f940 	bl	8000e78 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	motorProcess();
 8000bf8:	f000 fa46 	bl	8001088 <motorProcess>
 8000bfc:	e7fc      	b.n	8000bf8 <main+0x64>
 8000bfe:	bf00      	nop
 8000c00:	20000000 	.word	0x20000000
 8000c04:	2000013c 	.word	0x2000013c

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b090      	sub	sp, #64	@ 0x40
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	2228      	movs	r2, #40	@ 0x28
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 f9da 	bl	8004fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c32:	2310      	movs	r3, #16
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fb52 	bl	80032e8 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c4a:	f000 f915 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 fdc0 	bl	80037ec <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f901 	bl	8000e78 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3740      	adds	r7, #64	@ 0x40
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <MX_I2C1_Init+0x54>)
 8000c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c8c:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <MX_I2C1_Init+0x58>)
 8000c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000c9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_I2C1_Init+0x50>)
 8000cbe:	f001 f98b 	bl	8001fd8 <HAL_I2C_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc8:	f000 f8d6 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000a0 	.word	0x200000a0
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	000186a0 	.word	0x000186a0

08000cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d26:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d28:	f002 feee 	bl	8003b08 <HAL_TIM_PWM_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d32:	f000 f8a1 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	4619      	mov	r1, r3
 8000d44:	4816      	ldr	r0, [pc, #88]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d46:	f003 faa1 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d50:	f000 f892 	bl	8000e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2360      	movs	r3, #96	@ 0x60
 8000d56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d6c:	f002 ffbe 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d76:	f000 f87f 	bl	8000e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4807      	ldr	r0, [pc, #28]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d82:	f002 ffb3 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d8c:	f000 f874 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <MX_TIM2_Init+0xc4>)
 8000d92:	f000 fc47 	bl	8001624 <HAL_TIM_MspPostInit>

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000f4 	.word	0x200000f4

08000da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <MX_USART1_UART_Init+0x50>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	f003 fab4 	bl	8004348 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000de6:	f000 f847 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000013c 	.word	0x2000013c
 8000df4:	40013800 	.word	0x40013800

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <MX_GPIO_Init+0x78>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <MX_GPIO_Init+0x78>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <MX_GPIO_Init+0x78>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <MX_GPIO_Init+0x78>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a11      	ldr	r2, [pc, #68]	@ (8000e70 <MX_GPIO_Init+0x78>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_GPIO_Init+0x78>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000e42:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <MX_GPIO_Init+0x7c>)
 8000e44:	f001 f8b0 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000e48:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e52:	2302      	movs	r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2302      	movs	r3, #2
 8000e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_GPIO_Init+0x7c>)
 8000e62:	f000 ff1d 	bl	8001ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010800 	.word	0x40010800

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <Error_Handler+0x8>

08000e84 <motorInit>:

extern TIM_HandleTypeDef htim2;
extern Pid_Handler hpid;

bool motorInit()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	return HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	480a      	ldr	r0, [pc, #40]	@ (8000eb4 <motorInit+0x30>)
 8000e8c:	f002 fe8c 	bl	8003ba8 <HAL_TIM_PWM_Start>
 8000e90:	4603      	mov	r3, r0
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d108      	bne.n	8000ea8 <motorInit+0x24>
 8000e96:	2104      	movs	r1, #4
 8000e98:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <motorInit+0x30>)
 8000e9a:	f002 fe85 	bl	8003ba8 <HAL_TIM_PWM_Start>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <motorInit+0x24>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <motorInit+0x26>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000f4 	.word	0x200000f4

08000eb8 <motorRequestMovement>:
	}
	HAL_Delay(2000);
}

void motorRequestMovement(int8_t speed, uint8_t motor)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
	uint8_t abs_speed = abs(speed);
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bfb8      	it	lt
 8000ed0:	425b      	neglt	r3, r3
 8000ed2:	73fb      	strb	r3, [r7, #15]
	uint32_t ccr_value = (abs_speed * htim2.Init.Period)/100;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4a69      	ldr	r2, [pc, #420]	@ (800107c <motorRequestMovement+0x1c4>)
 8000ed8:	68d2      	ldr	r2, [r2, #12]
 8000eda:	fb02 f303 	mul.w	r3, r2, r3
 8000ede:	4a68      	ldr	r2, [pc, #416]	@ (8001080 <motorRequestMovement+0x1c8>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	095b      	lsrs	r3, r3, #5
 8000ee6:	60bb      	str	r3, [r7, #8]
	switch(motor)
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	f000 8084 	beq.w	8000ff8 <motorRequestMovement+0x140>
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	f300 80bf 	bgt.w	8001074 <motorRequestMovement+0x1bc>
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <motorRequestMovement+0x48>
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d03e      	beq.n	8000f7c <motorRequestMovement+0xc4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
			}
	}
}
 8000efe:	e0b9      	b.n	8001074 <motorRequestMovement+0x1bc>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8000f00:	4b5e      	ldr	r3, [pc, #376]	@ (800107c <motorRequestMovement+0x1c4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8000f08:	4b5c      	ldr	r3, [pc, #368]	@ (800107c <motorRequestMovement+0x1c4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db18      	blt.n	8000f4a <motorRequestMovement+0x92>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f1e:	4859      	ldr	r0, [pc, #356]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f20:	f001 f842 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2a:	4856      	ldr	r0, [pc, #344]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f2c:	f001 f83c 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f36:	4853      	ldr	r0, [pc, #332]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f38:	f001 f836 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f42:	4850      	ldr	r0, [pc, #320]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f44:	f001 f830 	bl	8001fa8 <HAL_GPIO_WritePin>
			break;
 8000f48:	e094      	b.n	8001074 <motorRequestMovement+0x1bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f50:	484c      	ldr	r0, [pc, #304]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f52:	f001 f829 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f5c:	4849      	ldr	r0, [pc, #292]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f5e:	f001 f823 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f68:	4846      	ldr	r0, [pc, #280]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f6a:	f001 f81d 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f74:	4843      	ldr	r0, [pc, #268]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f76:	f001 f817 	bl	8001fa8 <HAL_GPIO_WritePin>
			break;
 8000f7a:	e07b      	b.n	8001074 <motorRequestMovement+0x1bc>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800107c <motorRequestMovement+0x1c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8000f84:	4b3d      	ldr	r3, [pc, #244]	@ (800107c <motorRequestMovement+0x1c4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db18      	blt.n	8000fc6 <motorRequestMovement+0x10e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f9a:	483a      	ldr	r0, [pc, #232]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000f9c:	f001 f804 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa6:	4837      	ldr	r0, [pc, #220]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000fa8:	f000 fffe 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb2:	4834      	ldr	r0, [pc, #208]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000fb4:	f000 fff8 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fbe:	4831      	ldr	r0, [pc, #196]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000fc0:	f000 fff2 	bl	8001fa8 <HAL_GPIO_WritePin>
			break;
 8000fc4:	e056      	b.n	8001074 <motorRequestMovement+0x1bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fcc:	482d      	ldr	r0, [pc, #180]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000fce:	f000 ffeb 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd8:	482a      	ldr	r0, [pc, #168]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000fda:	f000 ffe5 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe4:	4827      	ldr	r0, [pc, #156]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000fe6:	f000 ffdf 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ff0:	4824      	ldr	r0, [pc, #144]	@ (8001084 <motorRequestMovement+0x1cc>)
 8000ff2:	f000 ffd9 	bl	8001fa8 <HAL_GPIO_WritePin>
			break;
 8000ff6:	e03d      	b.n	8001074 <motorRequestMovement+0x1bc>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <motorRequestMovement+0x1c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <motorRequestMovement+0x1c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db18      	blt.n	8001042 <motorRequestMovement+0x18a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001016:	481b      	ldr	r0, [pc, #108]	@ (8001084 <motorRequestMovement+0x1cc>)
 8001018:	f000 ffc6 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001022:	4818      	ldr	r0, [pc, #96]	@ (8001084 <motorRequestMovement+0x1cc>)
 8001024:	f000 ffc0 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102e:	4815      	ldr	r0, [pc, #84]	@ (8001084 <motorRequestMovement+0x1cc>)
 8001030:	f000 ffba 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <motorRequestMovement+0x1cc>)
 800103c:	f000 ffb4 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8001040:	e018      	b.n	8001074 <motorRequestMovement+0x1bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001048:	480e      	ldr	r0, [pc, #56]	@ (8001084 <motorRequestMovement+0x1cc>)
 800104a:	f000 ffad 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001054:	480b      	ldr	r0, [pc, #44]	@ (8001084 <motorRequestMovement+0x1cc>)
 8001056:	f000 ffa7 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001060:	4808      	ldr	r0, [pc, #32]	@ (8001084 <motorRequestMovement+0x1cc>)
 8001062:	f000 ffa1 	bl	8001fa8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800106c:	4805      	ldr	r0, [pc, #20]	@ (8001084 <motorRequestMovement+0x1cc>)
 800106e:	f000 ff9b 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8001072:	e7ff      	b.n	8001074 <motorRequestMovement+0x1bc>
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000f4 	.word	0x200000f4
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	40010800 	.word	0x40010800

08001088 <motorProcess>:

void motorProcess()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
	pidApply();
 800108e:	f000 f9b3 	bl	80013f8 <pidApply>
	int8_t speed_pid_output = hpid.output / PID_MAX * 100;
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <motorProcess+0x4c>)
 8001094:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001098:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <motorProcess+0x50>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	1192      	asrs	r2, r2, #6
 80010a0:	17db      	asrs	r3, r3, #31
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	0091      	lsls	r1, r2, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	460b      	mov	r3, r1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	71fb      	strb	r3, [r7, #7]
	motorRequestMovement(speed_pid_output, BOTH);
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fef7 	bl	8000eb8 <motorRequestMovement>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000184 	.word	0x20000184
 80010d8:	10624dd3 	.word	0x10624dd3

080010dc <mpu6050Init>:
 */

#include "mpu6050.h"

bool mpu6050Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0b8      	sub	sp, #224	@ 0xe0
 80010e0:	af04      	add	r7, sp, #16
	//Check if device is ready
	char msg[200];
	uint8_t reg_buff = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, HAL_MAX_DELAY) != HAL_OK)
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	2201      	movs	r2, #1
 80010ec:	21d0      	movs	r1, #208	@ 0xd0
 80010ee:	487c      	ldr	r0, [pc, #496]	@ (80012e0 <mpu6050Init+0x204>)
 80010f0:	f001 fc18 	bl	8002924 <HAL_I2C_IsDeviceReady>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <mpu6050Init+0x22>
	{
		return false;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e0eb      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	//RESET MODULE
	reg_buff = 0x1<<7;
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	226b      	movs	r2, #107	@ 0x6b
 8001114:	21d0      	movs	r1, #208	@ 0xd0
 8001116:	4872      	ldr	r0, [pc, #456]	@ (80012e0 <mpu6050Init+0x204>)
 8001118:	f001 f8a2 	bl	8002260 <HAL_I2C_Mem_Write>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <mpu6050Init+0x4a>
	{
		return false;
 8001122:	2300      	movs	r3, #0
 8001124:	e0d7      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8001126:	2032      	movs	r0, #50	@ 0x32
 8001128:	f000 fc00 	bl	800192c <HAL_Delay>

	//Remove from SLEEP MODE
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, 0, 1, HAL_MAX_DELAY) != HAL_OK)
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	226b      	movs	r2, #107	@ 0x6b
 800113e:	21d0      	movs	r1, #208	@ 0xd0
 8001140:	4867      	ldr	r0, [pc, #412]	@ (80012e0 <mpu6050Init+0x204>)
 8001142:	f001 f88d 	bl	8002260 <HAL_I2C_Mem_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <mpu6050Init+0x74>
	{
		return false;
 800114c:	2300      	movs	r3, #0
 800114e:	e0c2      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8001150:	2032      	movs	r0, #50	@ 0x32
 8001152:	f000 fbeb 	bl	800192c <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	226b      	movs	r2, #107	@ 0x6b
 8001168:	21d0      	movs	r1, #208	@ 0xd0
 800116a:	485d      	ldr	r0, [pc, #372]	@ (80012e0 <mpu6050Init+0x204>)
 800116c:	f001 f972 	bl	8002454 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <mpu6050Init+0x9e>
	{
		return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e0ad      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 800117a:	2032      	movs	r0, #50	@ 0x32
 800117c:	f000 fbd6 	bl	800192c <HAL_Delay>

	//Accelerometer configuration
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	221c      	movs	r2, #28
 8001192:	21d0      	movs	r1, #208	@ 0xd0
 8001194:	4852      	ldr	r0, [pc, #328]	@ (80012e0 <mpu6050Init+0x204>)
 8001196:	f001 f95d 	bl	8002454 <HAL_I2C_Mem_Read>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <mpu6050Init+0xc8>
	{
		return false;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e098      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 80011a4:	2032      	movs	r0, #50	@ 0x32
 80011a6:	f000 fbc1 	bl	800192c <HAL_Delay>
	reg_buff |= (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2301      	movs	r3, #1
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	221c      	movs	r2, #28
 80011c6:	21d0      	movs	r1, #208	@ 0xd0
 80011c8:	4845      	ldr	r0, [pc, #276]	@ (80012e0 <mpu6050Init+0x204>)
 80011ca:	f001 f849 	bl	8002260 <HAL_I2C_Mem_Write>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <mpu6050Init+0xfc>
	{
		return false;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e07e      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	@ 0x32
 80011da:	f000 fba7 	bl	800192c <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2301      	movs	r3, #1
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	221c      	movs	r2, #28
 80011f0:	21d0      	movs	r1, #208	@ 0xd0
 80011f2:	483b      	ldr	r0, [pc, #236]	@ (80012e0 <mpu6050Init+0x204>)
 80011f4:	f001 f92e 	bl	8002454 <HAL_I2C_Mem_Read>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <mpu6050Init+0x126>
	{
		return false;
 80011fe:	2300      	movs	r3, #0
 8001200:	e069      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8001202:	2032      	movs	r0, #50	@ 0x32
 8001204:	f000 fb92 	bl	800192c <HAL_Delay>
	if(reg_buff != (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL))
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b08      	cmp	r3, #8
 800120c:	d015      	beq.n	800123a <mpu6050Init+0x15e>
	{
		sprintf(msg,"MPU6050_ACCEL_CONFIG NOT SET CORRECTLY\n\r");
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4934      	ldr	r1, [pc, #208]	@ (80012e4 <mpu6050Init+0x208>)
 8001214:	4618      	mov	r0, r3
 8001216:	f003 febb 	bl	8004f90 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f7fe ff96 	bl	8000150 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	b29a      	uxth	r2, r3
 8001228:	f107 0108 	add.w	r1, r7, #8
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	482d      	ldr	r0, [pc, #180]	@ (80012e8 <mpu6050Init+0x20c>)
 8001232:	f003 f8d9 	bl	80043e8 <HAL_UART_Transmit>
		return false;
 8001236:	2300      	movs	r3, #0
 8001238:	e04d      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 800123a:	2032      	movs	r0, #50	@ 0x32
 800123c:	f000 fb76 	bl	800192c <HAL_Delay>

	//Gyroscope configuration

	reg_buff = 8;
 8001240:	2308      	movs	r3, #8
 8001242:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	221b      	movs	r2, #27
 8001256:	21d0      	movs	r1, #208	@ 0xd0
 8001258:	4821      	ldr	r0, [pc, #132]	@ (80012e0 <mpu6050Init+0x204>)
 800125a:	f001 f801 	bl	8002260 <HAL_I2C_Mem_Write>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <mpu6050Init+0x18c>
	{
		return false;
 8001264:	2300      	movs	r3, #0
 8001266:	e036      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8001268:	2032      	movs	r0, #50	@ 0x32
 800126a:	f000 fb5f 	bl	800192c <HAL_Delay>
	reg_buff = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	221b      	movs	r2, #27
 8001284:	21d0      	movs	r1, #208	@ 0xd0
 8001286:	4816      	ldr	r0, [pc, #88]	@ (80012e0 <mpu6050Init+0x204>)
 8001288:	f001 f8e4 	bl	8002454 <HAL_I2C_Mem_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <mpu6050Init+0x1ba>
	{
		return false;
 8001292:	2300      	movs	r3, #0
 8001294:	e01f      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8001296:	2032      	movs	r0, #50	@ 0x32
 8001298:	f000 fb48 	bl	800192c <HAL_Delay>
	if(reg_buff != 8)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d015      	beq.n	80012ce <mpu6050Init+0x1f2>
	{
		sprintf(msg,"MPU6050_GYRO_CONFIG NOT SET CORRECTLY\n\r");
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4911      	ldr	r1, [pc, #68]	@ (80012ec <mpu6050Init+0x210>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fe71 	bl	8004f90 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff4c 	bl	8000150 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <mpu6050Init+0x20c>)
 80012c6:	f003 f88f 	bl	80043e8 <HAL_UART_Transmit>
		return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e003      	b.n	80012d6 <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 80012ce:	2032      	movs	r0, #50	@ 0x32
 80012d0:	f000 fb2c 	bl	800192c <HAL_Delay>
	return true;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	37d0      	adds	r7, #208	@ 0xd0
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000a0 	.word	0x200000a0
 80012e4:	08005908 	.word	0x08005908
 80012e8:	2000013c 	.word	0x2000013c
 80012ec:	08005934 	.word	0x08005934

080012f0 <mpu6050GetAcc>:

void mpu6050GetAcc(Acc_Handler* acc_buff)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af04      	add	r7, sp, #16
 80012f6:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 80012f8:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <mpu6050GetAcc+0x7c>)
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001302:	6018      	str	r0, [r3, #0]
 8001304:	3304      	adds	r3, #4
 8001306:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2306      	movs	r3, #6
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	223b      	movs	r2, #59	@ 0x3b
 800131c:	21d0      	movs	r1, #208	@ 0xd0
 800131e:	4814      	ldr	r0, [pc, #80]	@ (8001370 <mpu6050GetAcc+0x80>)
 8001320:	f001 f898 	bl	8002454 <HAL_I2C_Mem_Read>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <mpu6050GetAcc+0x3e>
	{
		Error_Handler();
 800132a:	f7ff fda5 	bl	8000e78 <Error_Handler>
	}

	acc_buff->x = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 800132e:	7a3b      	ldrb	r3, [r7, #8]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	7a7b      	ldrb	r3, [r7, #9]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21a      	sxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	801a      	strh	r2, [r3, #0]
	acc_buff->y = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	805a      	strh	r2, [r3, #2]
	acc_buff->z = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21a      	sxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	809a      	strh	r2, [r3, #4]
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800595c 	.word	0x0800595c
 8001370:	200000a0 	.word	0x200000a0

08001374 <mpu6050GetGyro>:

void mpu6050GetGyro(Gyro_Handler* gyro_buff)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af04      	add	r7, sp, #16
 800137a:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 800137c:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <mpu6050GetGyro+0x7c>)
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001386:	6018      	str	r0, [r3, #0]
 8001388:	3304      	adds	r3, #4
 800138a:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2306      	movs	r3, #6
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	2243      	movs	r2, #67	@ 0x43
 80013a0:	21d0      	movs	r1, #208	@ 0xd0
 80013a2:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <mpu6050GetGyro+0x80>)
 80013a4:	f001 f856 	bl	8002454 <HAL_I2C_Mem_Read>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <mpu6050GetGyro+0x3e>
	{
		Error_Handler();
 80013ae:	f7ff fd63 	bl	8000e78 <Error_Handler>
	}

	gyro_buff->x = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21a      	sxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	801a      	strh	r2, [r3, #0]
	gyro_buff->y = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 80013c4:	7abb      	ldrb	r3, [r7, #10]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	805a      	strh	r2, [r3, #2]
	gyro_buff->z = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	809a      	strh	r2, [r3, #4]
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	0800595c 	.word	0x0800595c
 80013f4:	200000a0 	.word	0x200000a0

080013f8 <pidApply>:

	return true;
}

void pidApply()
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint32_t error = (uint32_t)ANGLE_REFERENCE_VALUE - filterGetPitchAngle();
 80013fe:	f7ff faa7 	bl	8000950 <filterGetPitchAngle>
 8001402:	4603      	mov	r3, r0
 8001404:	425b      	negs	r3, r3
 8001406:	607b      	str	r3, [r7, #4]
	uint32_t dt = HAL_GetTick() - hpid.timestamp;
 8001408:	f000 fa86 	bl	8001918 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	4b34      	ldr	r3, [pc, #208]	@ (80014e0 <pidApply+0xe8>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	603b      	str	r3, [r7, #0]

	hpid.timestamp = HAL_GetTick();
 8001416:	f000 fa7f 	bl	8001918 <HAL_GetTick>
 800141a:	4603      	mov	r3, r0
 800141c:	4a30      	ldr	r2, [pc, #192]	@ (80014e0 <pidApply+0xe8>)
 800141e:	6153      	str	r3, [r2, #20]
	hpid.error_sum += error;
 8001420:	4b2f      	ldr	r3, [pc, #188]	@ (80014e0 <pidApply+0xe8>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	461a      	mov	r2, r3
 800142c:	4b2c      	ldr	r3, [pc, #176]	@ (80014e0 <pidApply+0xe8>)
 800142e:	611a      	str	r2, [r3, #16]

	if(hpid.error_sum >= INTEGRAL_GAIN_MAX)
 8001430:	4b2b      	ldr	r3, [pc, #172]	@ (80014e0 <pidApply+0xe8>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001438:	db03      	blt.n	8001442 <pidApply+0x4a>
	{
		hpid.error_sum = INTEGRAL_GAIN_MAX;
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <pidApply+0xe8>)
 800143c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001440:	611a      	str	r2, [r3, #16]
	}
	if(hpid.error_sum <= -INTEGRAL_GAIN_MAX)
 8001442:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <pidApply+0xe8>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800144a:	dc02      	bgt.n	8001452 <pidApply+0x5a>
	{
		hpid.error_sum = -INTEGRAL_GAIN_MAX;
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <pidApply+0xe8>)
 800144e:	4a25      	ldr	r2, [pc, #148]	@ (80014e4 <pidApply+0xec>)
 8001450:	611a      	str	r2, [r3, #16]
	}

	hpid.output = hpid.p_gain * error
 8001452:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <pidApply+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
			+ hpid.i_gain * hpid.error_sum * dt
 8001456:	b29b      	uxth	r3, r3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	b292      	uxth	r2, r2
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <pidApply+0xe8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	b29b      	uxth	r3, r3
 8001468:	491d      	ldr	r1, [pc, #116]	@ (80014e0 <pidApply+0xe8>)
 800146a:	6909      	ldr	r1, [r1, #16]
 800146c:	b289      	uxth	r1, r1
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	b289      	uxth	r1, r1
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	4413      	add	r3, r2
 8001480:	b29a      	uxth	r2, r3
			+ hpid.d_gain * (error - hpid.last_error) /dt;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <pidApply+0xe8>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	4916      	ldr	r1, [pc, #88]	@ (80014e0 <pidApply+0xe8>)
 8001488:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800148c:	4608      	mov	r0, r1
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	1a09      	subs	r1, r1, r0
 8001492:	fb03 f101 	mul.w	r1, r3, r1
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	fbb1 f3f3 	udiv	r3, r1, r3
 800149c:	b29b      	uxth	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b21a      	sxth	r2, r3
	hpid.output = hpid.p_gain * error
 80014a4:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <pidApply+0xe8>)
 80014a6:	831a      	strh	r2, [r3, #24]

	if(hpid.output >= PID_MAX)
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <pidApply+0xe8>)
 80014aa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80014ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014b2:	db03      	blt.n	80014bc <pidApply+0xc4>
	{
		hpid.output = PID_MAX;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <pidApply+0xe8>)
 80014b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014ba:	831a      	strh	r2, [r3, #24]
	}
	if(hpid.output <= -PID_MAX)
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <pidApply+0xe8>)
 80014be:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80014c2:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80014c6:	dc03      	bgt.n	80014d0 <pidApply+0xd8>
	{
		hpid.output = -PID_MAX;
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <pidApply+0xe8>)
 80014ca:	f64f 4218 	movw	r2, #64536	@ 0xfc18
 80014ce:	831a      	strh	r2, [r3, #24]
	}
	hpid.last_error = error;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <pidApply+0xe8>)
 80014d6:	819a      	strh	r2, [r3, #12]
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000184 	.word	0x20000184
 80014e4:	fffffc18 	.word	0xfffffc18

080014e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <HAL_MspInit+0x5c>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_MspInit+0x5c>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a0e      	ldr	r2, [pc, #56]	@ (8001544 <HAL_MspInit+0x5c>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_MspInit+0x5c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_MspInit+0x60>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_MspInit+0x60>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000

0800154c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <HAL_I2C_MspInit+0x90>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d132      	bne.n	80015d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_I2C_MspInit+0x94>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a1b      	ldr	r2, [pc, #108]	@ (80015e0 <HAL_I2C_MspInit+0x94>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_I2C_MspInit+0x94>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001584:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	2312      	movs	r3, #18
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4812      	ldr	r0, [pc, #72]	@ (80015e4 <HAL_I2C_MspInit+0x98>)
 800159a:	f000 fb81 	bl	8001ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_I2C_MspInit+0x9c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b4:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <HAL_I2C_MspInit+0x9c>)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_I2C_MspInit+0x94>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_I2C_MspInit+0x94>)
 80015c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_I2C_MspInit+0x94>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40005400 	.word	0x40005400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40010000 	.word	0x40010000

080015ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fc:	d10b      	bne.n	8001616 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_TIM_PWM_MspInit+0x34>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_TIM_PWM_MspInit+0x34>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_TIM_PWM_MspInit+0x34>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001642:	d117      	bne.n	8001674 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_TIM_MspPostInit+0x58>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <HAL_TIM_MspPostInit+0x58>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_TIM_MspPostInit+0x58>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800165c:	2303      	movs	r3, #3
 800165e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4619      	mov	r1, r3
 800166e:	4804      	ldr	r0, [pc, #16]	@ (8001680 <HAL_TIM_MspPostInit+0x5c>)
 8001670:	f000 fb16 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <HAL_UART_MspInit+0xa4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d13d      	bne.n	8001720 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <HAL_UART_MspInit+0xa8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a20      	ldr	r2, [pc, #128]	@ (800172c <HAL_UART_MspInit+0xa8>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <HAL_UART_MspInit+0xa8>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_UART_MspInit+0xa8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a1a      	ldr	r2, [pc, #104]	@ (800172c <HAL_UART_MspInit+0xa8>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <HAL_UART_MspInit+0xa8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016d4:	2340      	movs	r3, #64	@ 0x40
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4812      	ldr	r0, [pc, #72]	@ (8001730 <HAL_UART_MspInit+0xac>)
 80016e8:	f000 fada 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	@ (8001730 <HAL_UART_MspInit+0xac>)
 8001700:	f000 face 	bl	8001ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_UART_MspInit+0xb0>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
 800171a:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <HAL_UART_MspInit+0xb0>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	@ 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40013800 	.word	0x40013800
 800172c:	40021000 	.word	0x40021000
 8001730:	40010c00 	.word	0x40010c00
 8001734:	40010000 	.word	0x40010000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f8b4 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <USART1_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <USART1_IRQHandler+0x10>)
 8001796:	f002 feab 	bl	80044f0 <HAL_UART_IRQHandler>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000013c 	.word	0x2000013c

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f003 fc04 	bl	8004fe0 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20005000 	.word	0x20005000
 8001804:	00000400 	.word	0x00000400
 8001808:	200001a0 	.word	0x200001a0
 800180c:	200002f0 	.word	0x200002f0

08001810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800181c:	f7ff fff8 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480b      	ldr	r0, [pc, #44]	@ (8001850 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001822:	490c      	ldr	r1, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001824:	4a0c      	ldr	r2, [pc, #48]	@ (8001858 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001838:	4c09      	ldr	r4, [pc, #36]	@ (8001860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f003 fbd1 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184a:	f7ff f9a3 	bl	8000b94 <main>
  bx lr
 800184e:	4770      	bx	lr
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001858:	080059d4 	.word	0x080059d4
  ldr r2, =_sbss
 800185c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001860:	200002f0 	.word	0x200002f0

08001864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_2_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_Init+0x28>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_Init+0x28>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f92b 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	200f      	movs	r0, #15
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fe30 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f935 	bl	8001b22 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 f90b 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000020 	.word	0x20000020
 80018ec:	20000028 	.word	0x20000028
 80018f0:	20000024 	.word	0x20000024

080018f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_IncTick+0x1c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_IncTick+0x20>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a03      	ldr	r2, [pc, #12]	@ (8001914 <HAL_IncTick+0x20>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000028 	.word	0x20000028
 8001914:	200001a4 	.word	0x200001a4

08001918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b02      	ldr	r3, [pc, #8]	@ (8001928 <HAL_GetTick+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	200001a4 	.word	0x200001a4

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fff0 	bl	8001918 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffe0 	bl	8001918 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000028 	.word	0x20000028

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	@ (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	@ 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff90 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff49 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff5e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff90 	bl	8001a2c <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5f 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffb0 	bl	8001a90 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d008      	beq.n	8001b64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e020      	b.n	8001ba6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d005      	beq.n	8001bd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e051      	b.n	8001c78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 020e 	bic.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <HAL_DMA_Abort_IT+0xd4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d029      	beq.n	8001c52 <HAL_DMA_Abort_IT+0xa2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a21      	ldr	r2, [pc, #132]	@ (8001c88 <HAL_DMA_Abort_IT+0xd8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x9e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_DMA_Abort_IT+0xdc>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x98>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1e      	ldr	r2, [pc, #120]	@ (8001c90 <HAL_DMA_Abort_IT+0xe0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d012      	beq.n	8001c42 <HAL_DMA_Abort_IT+0x92>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <HAL_DMA_Abort_IT+0xe4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00a      	beq.n	8001c3c <HAL_DMA_Abort_IT+0x8c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c98 <HAL_DMA_Abort_IT+0xe8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d102      	bne.n	8001c36 <HAL_DMA_Abort_IT+0x86>
 8001c30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c34:	e00e      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c3a:	e00b      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c40:	e008      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c46:	e005      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4c:	e002      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c4e:	2310      	movs	r3, #16
 8001c50:	e000      	b.n	8001c54 <HAL_DMA_Abort_IT+0xa4>
 8001c52:	2301      	movs	r3, #1
 8001c54:	4a11      	ldr	r2, [pc, #68]	@ (8001c9c <HAL_DMA_Abort_IT+0xec>)
 8001c56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4798      	blx	r3
    } 
  }
  return status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020008 	.word	0x40020008
 8001c88:	4002001c 	.word	0x4002001c
 8001c8c:	40020030 	.word	0x40020030
 8001c90:	40020044 	.word	0x40020044
 8001c94:	40020058 	.word	0x40020058
 8001c98:	4002006c 	.word	0x4002006c
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b08b      	sub	sp, #44	@ 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e169      	b.n	8001f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8158 	bne.w	8001f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f40 <HAL_GPIO_Init+0x2a0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d05e      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a98      	ldr	r2, [pc, #608]	@ (8001f40 <HAL_GPIO_Init+0x2a0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d875      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001ce2:	4a98      	ldr	r2, [pc, #608]	@ (8001f44 <HAL_GPIO_Init+0x2a4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d058      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001ce8:	4a96      	ldr	r2, [pc, #600]	@ (8001f44 <HAL_GPIO_Init+0x2a4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d86f      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001cee:	4a96      	ldr	r2, [pc, #600]	@ (8001f48 <HAL_GPIO_Init+0x2a8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d052      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001cf4:	4a94      	ldr	r2, [pc, #592]	@ (8001f48 <HAL_GPIO_Init+0x2a8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d869      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001cfa:	4a94      	ldr	r2, [pc, #592]	@ (8001f4c <HAL_GPIO_Init+0x2ac>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d04c      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001d00:	4a92      	ldr	r2, [pc, #584]	@ (8001f4c <HAL_GPIO_Init+0x2ac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d863      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d06:	4a92      	ldr	r2, [pc, #584]	@ (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d046      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001d0c:	4a90      	ldr	r2, [pc, #576]	@ (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d85d      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d82a      	bhi.n	8001d6c <HAL_GPIO_Init+0xcc>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d859      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d20 <HAL_GPIO_Init+0x80>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d9b 	.word	0x08001d9b
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d87 	.word	0x08001d87
 8001d2c:	08001dc9 	.word	0x08001dc9
 8001d30:	08001dcf 	.word	0x08001dcf
 8001d34:	08001dcf 	.word	0x08001dcf
 8001d38:	08001dcf 	.word	0x08001dcf
 8001d3c:	08001dcf 	.word	0x08001dcf
 8001d40:	08001dcf 	.word	0x08001dcf
 8001d44:	08001dcf 	.word	0x08001dcf
 8001d48:	08001dcf 	.word	0x08001dcf
 8001d4c:	08001dcf 	.word	0x08001dcf
 8001d50:	08001dcf 	.word	0x08001dcf
 8001d54:	08001dcf 	.word	0x08001dcf
 8001d58:	08001dcf 	.word	0x08001dcf
 8001d5c:	08001dcf 	.word	0x08001dcf
 8001d60:	08001dcf 	.word	0x08001dcf
 8001d64:	08001d7d 	.word	0x08001d7d
 8001d68:	08001d91 	.word	0x08001d91
 8001d6c:	4a79      	ldr	r2, [pc, #484]	@ (8001f54 <HAL_GPIO_Init+0x2b4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d72:	e02c      	b.n	8001dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	623b      	str	r3, [r7, #32]
          break;
 8001d7a:	e029      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	3304      	adds	r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e024      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e01f      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	330c      	adds	r3, #12
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e01a      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da2:	2304      	movs	r3, #4
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e013      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	611a      	str	r2, [r3, #16]
          break;
 8001dba:	e009      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	615a      	str	r2, [r3, #20]
          break;
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          break;
 8001dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2bff      	cmp	r3, #255	@ 0xff
 8001dd4:	d801      	bhi.n	8001dda <HAL_GPIO_Init+0x13a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	e001      	b.n	8001dde <HAL_GPIO_Init+0x13e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	@ 0xff
 8001de4:	d802      	bhi.n	8001dec <HAL_GPIO_Init+0x14c>
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x152>
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	3b08      	subs	r3, #8
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	210f      	movs	r1, #15
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80b1 	beq.w	8001f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e20:	4b4d      	ldr	r3, [pc, #308]	@ (8001f58 <HAL_GPIO_Init+0x2b8>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a4c      	ldr	r2, [pc, #304]	@ (8001f58 <HAL_GPIO_Init+0x2b8>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e38:	4a48      	ldr	r2, [pc, #288]	@ (8001f5c <HAL_GPIO_Init+0x2bc>)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a40      	ldr	r2, [pc, #256]	@ (8001f60 <HAL_GPIO_Init+0x2c0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_GPIO_Init+0x1ec>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3f      	ldr	r2, [pc, #252]	@ (8001f64 <HAL_GPIO_Init+0x2c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00d      	beq.n	8001e88 <HAL_GPIO_Init+0x1e8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f68 <HAL_GPIO_Init+0x2c8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d007      	beq.n	8001e84 <HAL_GPIO_Init+0x1e4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3d      	ldr	r2, [pc, #244]	@ (8001f6c <HAL_GPIO_Init+0x2cc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_GPIO_Init+0x1e0>
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e006      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e004      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e9e:	492f      	ldr	r1, [pc, #188]	@ (8001f5c <HAL_GPIO_Init+0x2bc>)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	492c      	ldr	r1, [pc, #176]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4928      	ldr	r1, [pc, #160]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee0:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4922      	ldr	r1, [pc, #136]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eee:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	491e      	ldr	r1, [pc, #120]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4918      	ldr	r1, [pc, #96]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4914      	ldr	r1, [pc, #80]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d021      	beq.n	8001f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	490e      	ldr	r1, [pc, #56]	@ (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e021      	b.n	8001f82 <HAL_GPIO_Init+0x2e2>
 8001f3e:	bf00      	nop
 8001f40:	10320000 	.word	0x10320000
 8001f44:	10310000 	.word	0x10310000
 8001f48:	10220000 	.word	0x10220000
 8001f4c:	10210000 	.word	0x10210000
 8001f50:	10120000 	.word	0x10120000
 8001f54:	10110000 	.word	0x10110000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40010800 	.word	0x40010800
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40011400 	.word	0x40011400
 8001f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	4909      	ldr	r1, [pc, #36]	@ (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	3301      	adds	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f47f ae8e 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	372c      	adds	r7, #44	@ 0x2c
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e12b      	b.n	8002242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff faa4 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	@ 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800202a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800203a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800203c:	f001 fd1e 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a81      	ldr	r2, [pc, #516]	@ (800224c <HAL_I2C_Init+0x274>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d807      	bhi.n	800205c <HAL_I2C_Init+0x84>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a80      	ldr	r2, [pc, #512]	@ (8002250 <HAL_I2C_Init+0x278>)
 8002050:	4293      	cmp	r3, r2
 8002052:	bf94      	ite	ls
 8002054:	2301      	movls	r3, #1
 8002056:	2300      	movhi	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e006      	b.n	800206a <HAL_I2C_Init+0x92>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a7d      	ldr	r2, [pc, #500]	@ (8002254 <HAL_I2C_Init+0x27c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0e7      	b.n	8002242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a78      	ldr	r2, [pc, #480]	@ (8002258 <HAL_I2C_Init+0x280>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	@ (800224c <HAL_I2C_Init+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d802      	bhi.n	80020ac <HAL_I2C_Init+0xd4>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	e009      	b.n	80020c0 <HAL_I2C_Init+0xe8>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4a69      	ldr	r2, [pc, #420]	@ (800225c <HAL_I2C_Init+0x284>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	3301      	adds	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	495c      	ldr	r1, [pc, #368]	@ (800224c <HAL_I2C_Init+0x274>)
 80020dc:	428b      	cmp	r3, r1
 80020de:	d819      	bhi.n	8002114 <HAL_I2C_Init+0x13c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e59      	subs	r1, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ee:	1c59      	adds	r1, r3, #1
 80020f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_I2C_Init+0x138>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e59      	subs	r1, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fbb1 f3f3 	udiv	r3, r1, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	e051      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002110:	2304      	movs	r3, #4
 8002112:	e04f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_I2C_Init+0x168>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e012      	b.n	8002166 <HAL_I2C_Init+0x18e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	0099      	lsls	r1, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x196>
 800216a:	2301      	movs	r3, #1
 800216c:	e022      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10e      	bne.n	8002194 <HAL_I2C_Init+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e58      	subs	r0, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	fbb0 f3f3 	udiv	r3, r0, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	0099      	lsls	r1, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	6809      	ldr	r1, [r1, #0]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6911      	ldr	r1, [r2, #16]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	000186a0 	.word	0x000186a0
 8002250:	001e847f 	.word	0x001e847f
 8002254:	003d08ff 	.word	0x003d08ff
 8002258:	431bde83 	.word	0x431bde83
 800225c:	10624dd3 	.word	0x10624dd3

08002260 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4603      	mov	r3, r0
 8002270:	817b      	strh	r3, [r7, #10]
 8002272:	460b      	mov	r3, r1
 8002274:	813b      	strh	r3, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227a:	f7ff fb4d 	bl	8001918 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b20      	cmp	r3, #32
 800228a:	f040 80d9 	bne.w	8002440 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2319      	movs	r3, #25
 8002294:	2201      	movs	r2, #1
 8002296:	496d      	ldr	r1, [pc, #436]	@ (800244c <HAL_I2C_Mem_Write+0x1ec>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fdef 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0cc      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Mem_Write+0x56>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0c5      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d007      	beq.n	80022dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	@ 0x21
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	@ 0x40
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800230c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a4d      	ldr	r2, [pc, #308]	@ (8002450 <HAL_I2C_Mem_Write+0x1f0>)
 800231c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800231e:	88f8      	ldrh	r0, [r7, #6]
 8002320:	893a      	ldrh	r2, [r7, #8]
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fc26 	bl	8002b80 <I2C_RequestMemoryWrite>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d052      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e081      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 feb4 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	2b04      	cmp	r3, #4
 8002354:	d107      	bne.n	8002366 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11b      	bne.n	80023e0 <HAL_I2C_Mem_Write+0x180>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1aa      	bne.n	800233e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fea7 	bl	8003140 <I2C_WaitOnBTFFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e016      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000

08002454 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	@ 0x30
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	4608      	mov	r0, r1
 800245e:	4611      	mov	r1, r2
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	817b      	strh	r3, [r7, #10]
 8002466:	460b      	mov	r3, r1
 8002468:	813b      	strh	r3, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002472:	f7ff fa51 	bl	8001918 <HAL_GetTick>
 8002476:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	f040 8244 	bne.w	800290e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2319      	movs	r3, #25
 800248c:	2201      	movs	r2, #1
 800248e:	4982      	ldr	r1, [pc, #520]	@ (8002698 <HAL_I2C_Mem_Read+0x244>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fcf3 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
 800249e:	e237      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_I2C_Mem_Read+0x5a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e230      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d007      	beq.n	80024d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2222      	movs	r2, #34	@ 0x22
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a62      	ldr	r2, [pc, #392]	@ (800269c <HAL_I2C_Mem_Read+0x248>)
 8002514:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002516:	88f8      	ldrh	r0, [r7, #6]
 8002518:	893a      	ldrh	r2, [r7, #8]
 800251a:	8979      	ldrh	r1, [r7, #10]
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4603      	mov	r3, r0
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fbc0 	bl	8002cac <I2C_RequestMemoryRead>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1ec      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d113      	bne.n	8002566 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e1c0      	b.n	80028e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256a:	2b01      	cmp	r3, #1
 800256c:	d11e      	bne.n	80025ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800257e:	b672      	cpsid	i
}
 8002580:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025a8:	b662      	cpsie	i
}
 80025aa:	e035      	b.n	8002618 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d11e      	bne.n	80025f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025c4:	b672      	cpsid	i
}
 80025c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ee:	b662      	cpsie	i
}
 80025f0:	e012      	b.n	8002618 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002600:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002618:	e166      	b.n	80028e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	2b03      	cmp	r3, #3
 8002620:	f200 811f 	bhi.w	8002862 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	2b01      	cmp	r3, #1
 800262a:	d123      	bne.n	8002674 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fdcd 	bl	80031d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e167      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002672:	e139      	b.n	80028e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b02      	cmp	r3, #2
 800267a:	d152      	bne.n	8002722 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002682:	2200      	movs	r2, #0
 8002684:	4906      	ldr	r1, [pc, #24]	@ (80026a0 <HAL_I2C_Mem_Read+0x24c>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fbf8 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e13c      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
 8002696:	bf00      	nop
 8002698:	00100002 	.word	0x00100002
 800269c:	ffff0000 	.word	0xffff0000
 80026a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026ea:	b662      	cpsie	i
}
 80026ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002720:	e0e2      	b.n	80028e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002728:	2200      	movs	r2, #0
 800272a:	497b      	ldr	r1, [pc, #492]	@ (8002918 <HAL_I2C_Mem_Read+0x4c4>)
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fba5 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0e9      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800274c:	b672      	cpsid	i
}
 800274e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002782:	4b66      	ldr	r3, [pc, #408]	@ (800291c <HAL_I2C_Mem_Read+0x4c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	08db      	lsrs	r3, r3, #3
 8002788:	4a65      	ldr	r2, [pc, #404]	@ (8002920 <HAL_I2C_Mem_Read+0x4cc>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a1a      	lsrs	r2, r3, #8
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00da      	lsls	r2, r3, #3
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	3b01      	subs	r3, #1
 80027a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d118      	bne.n	80027da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027ca:	b662      	cpsie	i
}
 80027cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e09a      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d1d9      	bne.n	800279c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800282a:	b662      	cpsie	i
}
 800282c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002860:	e042      	b.n	80028e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fcb2 	bl	80031d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e04c      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d118      	bne.n	80028e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f ae94 	bne.w	800261a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3728      	adds	r7, #40	@ 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	00010004 	.word	0x00010004
 800291c:	20000020 	.word	0x20000020
 8002920:	14f8b589 	.word	0x14f8b589

08002924 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	@ 0x28
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	460b      	mov	r3, r1
 8002932:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7fe fff0 	bl	8001918 <HAL_GetTick>
 8002938:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	f040 8111 	bne.w	8002b6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2319      	movs	r3, #25
 8002952:	2201      	movs	r2, #1
 8002954:	4988      	ldr	r1, [pc, #544]	@ (8002b78 <HAL_I2C_IsDeviceReady+0x254>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fa90 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002962:	2302      	movs	r3, #2
 8002964:	e104      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2C_IsDeviceReady+0x50>
 8002970:	2302      	movs	r3, #2
 8002972:	e0fd      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d007      	beq.n	800299a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0201 	orr.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2224      	movs	r2, #36	@ 0x24
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a70      	ldr	r2, [pc, #448]	@ (8002b7c <HAL_I2C_IsDeviceReady+0x258>)
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa4e 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f4:	d103      	bne.n	80029fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0b6      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a02:	897b      	ldrh	r3, [r7, #10]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe ff81 	bl	8001918 <HAL_GetTick>
 8002a16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a46:	e025      	b.n	8002a94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7fe ff66 	bl	8001918 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <HAL_I2C_IsDeviceReady+0x13a>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	22a0      	movs	r2, #160	@ 0xa0
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a9e:	d005      	beq.n	8002aac <HAL_I2C_IsDeviceReady+0x188>
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_I2C_IsDeviceReady+0x188>
 8002aa6:	7dbb      	ldrb	r3, [r7, #22]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0cd      	beq.n	8002a48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d129      	bne.n	8002b16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2319      	movs	r3, #25
 8002aee:	2201      	movs	r2, #1
 8002af0:	4921      	ldr	r1, [pc, #132]	@ (8002b78 <HAL_I2C_IsDeviceReady+0x254>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f9c2 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e036      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e02c      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2319      	movs	r3, #25
 8002b36:	2201      	movs	r2, #1
 8002b38:	490f      	ldr	r1, [pc, #60]	@ (8002b78 <HAL_I2C_IsDeviceReady+0x254>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f99e 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e012      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f4ff af32 	bcc.w	80029be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	00100002 	.word	0x00100002
 8002b7c:	ffff0000 	.word	0xffff0000

08002b80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	817b      	strh	r3, [r7, #10]
 8002b92:	460b      	mov	r3, r1
 8002b94:	813b      	strh	r3, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f960 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd0:	d103      	bne.n	8002bda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e05f      	b.n	8002c9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	492d      	ldr	r1, [pc, #180]	@ (8002ca8 <I2C_RequestMemoryWrite+0x128>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f9bb 	bl	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e04c      	b.n	8002c9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	6a39      	ldr	r1, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fa46 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d107      	bne.n	8002c42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e02b      	b.n	8002c9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4c:	893b      	ldrh	r3, [r7, #8]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]
 8002c56:	e021      	b.n	8002c9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c58:	893b      	ldrh	r3, [r7, #8]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c68:	6a39      	ldr	r1, [r7, #32]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fa20 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d107      	bne.n	8002c8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e005      	b.n	8002c9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c92:	893b      	ldrh	r3, [r7, #8]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	00010002 	.word	0x00010002

08002cac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	817b      	strh	r3, [r7, #10]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	813b      	strh	r3, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f8c2 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d0c:	d103      	bne.n	8002d16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0aa      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	4952      	ldr	r1, [pc, #328]	@ (8002e78 <I2C_RequestMemoryRead+0x1cc>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f91d 	bl	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e097      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f9a8 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e076      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d88:	893b      	ldrh	r3, [r7, #8]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	e021      	b.n	8002dd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f982 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e050      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dce:	893b      	ldrh	r3, [r7, #8]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	6a39      	ldr	r1, [r7, #32]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f967 	bl	80030b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d107      	bne.n	8002e00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e035      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f82b 	bl	8002e7c <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3a:	d103      	bne.n	8002e44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e013      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e48:	897b      	ldrh	r3, [r7, #10]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	4906      	ldr	r1, [pc, #24]	@ (8002e78 <I2C_RequestMemoryRead+0x1cc>)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f886 	bl	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	00010002 	.word	0x00010002

08002e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	e048      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d044      	beq.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fd3f 	bl	8001918 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d139      	bne.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d10d      	bne.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	e00c      	b.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d116      	bne.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e023      	b.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10d      	bne.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	e00c      	b.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4013      	ands	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d093      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7e:	e071      	b.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8e:	d123      	bne.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f043 0204 	orr.w	r2, r3, #4
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e067      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d041      	beq.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe0:	f7fe fc9a 	bl	8001918 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d302      	bcc.n	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d136      	bne.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10c      	bne.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e00b      	b.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	43da      	mvns	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e021      	b.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	0c1b      	lsrs	r3, r3, #16
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d10c      	bne.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e00b      	b.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4013      	ands	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f47f af6d 	bne.w	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030bc:	e034      	b.n	8003128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8e3 	bl	800328a <I2C_IsAcknowledgeFailed>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e034      	b.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d028      	beq.n	8003128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe fc1f 	bl	8001918 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d11d      	bne.n	8003128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	2b80      	cmp	r3, #128	@ 0x80
 80030f8:	d016      	beq.n	8003128 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e007      	b.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	2b80      	cmp	r3, #128	@ 0x80
 8003134:	d1c3      	bne.n	80030be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800314c:	e034      	b.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f89b 	bl	800328a <I2C_IsAcknowledgeFailed>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e034      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d028      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe fbd7 	bl	8001918 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11d      	bne.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d016      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d1c3      	bne.n	800314e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031dc:	e049      	b.n	8003272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d119      	bne.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0210 	mvn.w	r2, #16
 80031f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e030      	b.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fe fb7a 	bl	8001918 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11d      	bne.n	8003272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003240:	2b40      	cmp	r3, #64	@ 0x40
 8003242:	d016      	beq.n	8003272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	d1ae      	bne.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a0:	d11b      	bne.n	80032da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f043 0204 	orr.w	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e272      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8087 	beq.w	8003416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003308:	4b92      	ldr	r3, [pc, #584]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b04      	cmp	r3, #4
 8003312:	d00c      	beq.n	800332e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003314:	4b8f      	ldr	r3, [pc, #572]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d112      	bne.n	8003346 <HAL_RCC_OscConfig+0x5e>
 8003320:	4b8c      	ldr	r3, [pc, #560]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332c:	d10b      	bne.n	8003346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332e:	4b89      	ldr	r3, [pc, #548]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d06c      	beq.n	8003414 <HAL_RCC_OscConfig+0x12c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d168      	bne.n	8003414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e24c      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x76>
 8003350:	4b80      	ldr	r3, [pc, #512]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a7f      	ldr	r2, [pc, #508]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e02e      	b.n	80033bc <HAL_RCC_OscConfig+0xd4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x98>
 8003366:	4b7b      	ldr	r3, [pc, #492]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7a      	ldr	r2, [pc, #488]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b78      	ldr	r3, [pc, #480]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a77      	ldr	r2, [pc, #476]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003378:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xd4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0xbc>
 800338a:	4b72      	ldr	r3, [pc, #456]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a71      	ldr	r2, [pc, #452]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6e      	ldr	r2, [pc, #440]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xd4>
 80033a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b68      	ldr	r3, [pc, #416]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a67      	ldr	r2, [pc, #412]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe faa8 	bl	8001918 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe faa4 	bl	8001918 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	@ 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e200      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b5d      	ldr	r3, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xe4>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fe fa94 	bl	8001918 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe fa90 	bl	8001918 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	@ 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1ec      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	4b53      	ldr	r3, [pc, #332]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x10c>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003422:	4b4c      	ldr	r3, [pc, #304]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800342e:	4b49      	ldr	r3, [pc, #292]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b08      	cmp	r3, #8
 8003438:	d11c      	bne.n	8003474 <HAL_RCC_OscConfig+0x18c>
 800343a:	4b46      	ldr	r3, [pc, #280]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	4b43      	ldr	r3, [pc, #268]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x176>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1c0      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4939      	ldr	r1, [pc, #228]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	e03a      	b.n	80034ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347c:	4b36      	ldr	r3, [pc, #216]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe fa49 	bl	8001918 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7fe fa45 	bl	8001918 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1a1      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	4b2d      	ldr	r3, [pc, #180]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4927      	ldr	r1, [pc, #156]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <HAL_RCC_OscConfig+0x270>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fa28 	bl	8001918 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fe fa24 	bl	8001918 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e180      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d03a      	beq.n	800356c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b17      	ldr	r3, [pc, #92]	@ (800355c <HAL_RCC_OscConfig+0x274>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fe fa08 	bl	8001918 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350c:	f7fe fa04 	bl	8001918 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e160      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <HAL_RCC_OscConfig+0x26c>)
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800352a:	2001      	movs	r0, #1
 800352c:	f000 face 	bl	8003acc <RCC_Delay>
 8003530:	e01c      	b.n	800356c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_RCC_OscConfig+0x274>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fe f9ee 	bl	8001918 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353e:	e00f      	b.n	8003560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003540:	f7fe f9ea 	bl	8001918 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d908      	bls.n	8003560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e146      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	42420000 	.word	0x42420000
 800355c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003560:	4b92      	ldr	r3, [pc, #584]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e9      	bne.n	8003540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a6 	beq.w	80036c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	4b8b      	ldr	r3, [pc, #556]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10d      	bne.n	80035a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	4b88      	ldr	r3, [pc, #544]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4a87      	ldr	r2, [pc, #540]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003594:	61d3      	str	r3, [r2, #28]
 8003596:	4b85      	ldr	r3, [pc, #532]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a6:	4b82      	ldr	r3, [pc, #520]	@ (80037b0 <HAL_RCC_OscConfig+0x4c8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d118      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b2:	4b7f      	ldr	r3, [pc, #508]	@ (80037b0 <HAL_RCC_OscConfig+0x4c8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7e      	ldr	r2, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x4c8>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035be:	f7fe f9ab 	bl	8001918 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fe f9a7 	bl	8001918 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b64      	cmp	r3, #100	@ 0x64
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e103      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	4b75      	ldr	r3, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0x4c8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x312>
 80035ec:	4b6f      	ldr	r3, [pc, #444]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6213      	str	r3, [r2, #32]
 80035f8:	e02d      	b.n	8003656 <HAL_RCC_OscConfig+0x36e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x334>
 8003602:	4b6a      	ldr	r3, [pc, #424]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a69      	ldr	r2, [pc, #420]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	4b67      	ldr	r3, [pc, #412]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a66      	ldr	r2, [pc, #408]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6213      	str	r3, [r2, #32]
 800361a:	e01c      	b.n	8003656 <HAL_RCC_OscConfig+0x36e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b05      	cmp	r3, #5
 8003622:	d10c      	bne.n	800363e <HAL_RCC_OscConfig+0x356>
 8003624:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4a60      	ldr	r2, [pc, #384]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	6213      	str	r3, [r2, #32]
 8003630:	4b5e      	ldr	r3, [pc, #376]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4a5d      	ldr	r2, [pc, #372]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6213      	str	r3, [r2, #32]
 800363c:	e00b      	b.n	8003656 <HAL_RCC_OscConfig+0x36e>
 800363e:	4b5b      	ldr	r3, [pc, #364]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a5a      	ldr	r2, [pc, #360]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	6213      	str	r3, [r2, #32]
 800364a:	4b58      	ldr	r3, [pc, #352]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4a57      	ldr	r2, [pc, #348]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365e:	f7fe f95b 	bl	8001918 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fe f957 	bl	8001918 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0b1      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ee      	beq.n	8003666 <HAL_RCC_OscConfig+0x37e>
 8003688:	e014      	b.n	80036b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368a:	f7fe f945 	bl	8001918 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fe f941 	bl	8001918 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e09b      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	4b40      	ldr	r3, [pc, #256]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ee      	bne.n	8003692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4b3c      	ldr	r3, [pc, #240]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8087 	beq.w	80037de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d0:	4b36      	ldr	r3, [pc, #216]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d061      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d146      	bne.n	8003772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b33      	ldr	r3, [pc, #204]	@ (80037b4 <HAL_RCC_OscConfig+0x4cc>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f915 	bl	8001918 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe f911 	bl	8001918 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e06d      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003704:	4b29      	ldr	r3, [pc, #164]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d108      	bne.n	800372c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800371a:	4b24      	ldr	r3, [pc, #144]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4921      	ldr	r1, [pc, #132]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800372c:	4b1f      	ldr	r3, [pc, #124]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a19      	ldr	r1, [r3, #32]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	430b      	orrs	r3, r1
 800373e:	491b      	ldr	r1, [pc, #108]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003744:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <HAL_RCC_OscConfig+0x4cc>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe f8e5 	bl	8001918 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe f8e1 	bl	8001918 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e03d      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003764:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x46a>
 8003770:	e035      	b.n	80037de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	4b10      	ldr	r3, [pc, #64]	@ (80037b4 <HAL_RCC_OscConfig+0x4cc>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe f8ce 	bl	8001918 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fe f8ca 	bl	8001918 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e026      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_RCC_OscConfig+0x4c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x498>
 800379e:	e01e      	b.n	80037de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e019      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40007000 	.word	0x40007000
 80037b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_OscConfig+0x500>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0d0      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b6a      	ldr	r3, [pc, #424]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d910      	bls.n	8003830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b67      	ldr	r3, [pc, #412]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0207 	bic.w	r2, r3, #7
 8003816:	4965      	ldr	r1, [pc, #404]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b63      	ldr	r3, [pc, #396]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b8      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003848:	4b59      	ldr	r3, [pc, #356]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a58      	ldr	r2, [pc, #352]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003852:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003860:	4b53      	ldr	r3, [pc, #332]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a52      	ldr	r2, [pc, #328]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800386a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b50      	ldr	r3, [pc, #320]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	494d      	ldr	r1, [pc, #308]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d040      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b47      	ldr	r3, [pc, #284]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d115      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e073      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3d      	ldr	r3, [pc, #244]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e06b      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b39      	ldr	r3, [pc, #228]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4936      	ldr	r1, [pc, #216]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe f81c 	bl	8001918 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fe f818 	bl	8001918 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e053      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b27      	ldr	r3, [pc, #156]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d210      	bcs.n	800393c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 0207 	bic.w	r2, r3, #7
 8003922:	4922      	ldr	r1, [pc, #136]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e032      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4916      	ldr	r1, [pc, #88]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	490e      	ldr	r1, [pc, #56]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800397a:	f000 f821 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800397e:	4602      	mov	r2, r0
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	490a      	ldr	r1, [pc, #40]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	5ccb      	ldrb	r3, [r1, r3]
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	4a09      	ldr	r2, [pc, #36]	@ (80039b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003996:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <HAL_RCC_ClockConfig+0x1d0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd ff7a 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40022000 	.word	0x40022000
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08005964 	.word	0x08005964
 80039b8:	20000020 	.word	0x20000020
 80039bc:	20000024 	.word	0x20000024

080039c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039da:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x94>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d002      	beq.n	80039f0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ee:	e027      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f0:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x98>)
 80039f2:	613b      	str	r3, [r7, #16]
      break;
 80039f4:	e027      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	0c9b      	lsrs	r3, r3, #18
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a17      	ldr	r2, [pc, #92]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d010      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a0e:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0c5b      	lsrs	r3, r3, #17
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	4a11      	ldr	r2, [pc, #68]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	fb03 f202 	mul.w	r2, r3, r2
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e004      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	613b      	str	r3, [r7, #16]
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a42:	613b      	str	r3, [r7, #16]
      break;
 8003a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a46:	693b      	ldr	r3, [r7, #16]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	007a1200 	.word	0x007a1200
 8003a5c:	0800597c 	.word	0x0800597c
 8003a60:	0800598c 	.word	0x0800598c
 8003a64:	003d0900 	.word	0x003d0900

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b02      	ldr	r3, [pc, #8]	@ (8003a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	20000020 	.word	0x20000020

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a80:	f7ff fff2 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08005974 	.word	0x08005974

08003aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa8:	f7ff ffde 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	0adb      	lsrs	r3, r3, #11
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	@ (8003ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	08005974 	.word	0x08005974

08003acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <RCC_Delay+0x34>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <RCC_Delay+0x38>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a5b      	lsrs	r3, r3, #9
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ae8:	bf00      	nop
  }
  while (Delay --);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	60fa      	str	r2, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f9      	bne.n	8003ae8 <RCC_Delay+0x1c>
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	20000020 	.word	0x20000020
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e041      	b.n	8003b9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fd5c 	bl	80015ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 f992 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_TIM_PWM_Start+0x24>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e022      	b.n	8003c12 <HAL_TIM_PWM_Start+0x6a>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d109      	bne.n	8003be6 <HAL_TIM_PWM_Start+0x3e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e015      	b.n	8003c12 <HAL_TIM_PWM_Start+0x6a>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start+0x58>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf14      	ite	ne
 8003bf8:	2301      	movne	r3, #1
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e008      	b.n	8003c12 <HAL_TIM_PWM_Start+0x6a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e05e      	b.n	8003cd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x82>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c28:	e013      	b.n	8003c52 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0x92>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	e00b      	b.n	8003c52 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c48:	e003      	b.n	8003c52 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 faf2 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <HAL_TIM_PWM_Start+0x138>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d107      	bne.n	8003c7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ce0 <HAL_TIM_PWM_Start+0x138>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_TIM_PWM_Start+0xfa>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d009      	beq.n	8003ca2 <HAL_TIM_PWM_Start+0xfa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a14      	ldr	r2, [pc, #80]	@ (8003ce4 <HAL_TIM_PWM_Start+0x13c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_TIM_PWM_Start+0xfa>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a12      	ldr	r2, [pc, #72]	@ (8003ce8 <HAL_TIM_PWM_Start+0x140>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d111      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d010      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	e007      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800

08003cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0ae      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	f200 809f 	bhi.w	8003e58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08003e59 	.word	0x08003e59
 8003d28:	08003e59 	.word	0x08003e59
 8003d2c:	08003e59 	.word	0x08003e59
 8003d30:	08003d95 	.word	0x08003d95
 8003d34:	08003e59 	.word	0x08003e59
 8003d38:	08003e59 	.word	0x08003e59
 8003d3c:	08003e59 	.word	0x08003e59
 8003d40:	08003dd7 	.word	0x08003dd7
 8003d44:	08003e59 	.word	0x08003e59
 8003d48:	08003e59 	.word	0x08003e59
 8003d4c:	08003e59 	.word	0x08003e59
 8003d50:	08003e17 	.word	0x08003e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f8ea 	bl	8003f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0208 	orr.w	r2, r2, #8
 8003d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0204 	bic.w	r2, r2, #4
 8003d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6999      	ldr	r1, [r3, #24]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	619a      	str	r2, [r3, #24]
      break;
 8003d92:	e064      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f930 	bl	8004000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	619a      	str	r2, [r3, #24]
      break;
 8003dd4:	e043      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 f979 	bl	80040d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0208 	orr.w	r2, r2, #8
 8003df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0204 	bic.w	r2, r2, #4
 8003e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69d9      	ldr	r1, [r3, #28]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
      break;
 8003e14:	e023      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f9c3 	bl	80041a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69d9      	ldr	r1, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	021a      	lsls	r2, r3, #8
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	61da      	str	r2, [r3, #28]
      break;
 8003e56:	e002      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a29      	ldr	r2, [pc, #164]	@ (8003f28 <TIM_Base_SetConfig+0xb8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_Base_SetConfig+0x30>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8e:	d007      	beq.n	8003ea0 <TIM_Base_SetConfig+0x30>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <TIM_Base_SetConfig+0xbc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_Base_SetConfig+0x30>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a25      	ldr	r2, [pc, #148]	@ (8003f30 <TIM_Base_SetConfig+0xc0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <TIM_Base_SetConfig+0xb8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <TIM_Base_SetConfig+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec0:	d007      	beq.n	8003ed2 <TIM_Base_SetConfig+0x62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <TIM_Base_SetConfig+0xbc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_Base_SetConfig+0x62>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <TIM_Base_SetConfig+0xc0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a07      	ldr	r2, [pc, #28]	@ (8003f28 <TIM_Base_SetConfig+0xb8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 0201 	bic.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0302 	bic.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ffc <TIM_OC1_SetConfig+0xc8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10c      	bne.n	8003faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0308 	bic.w	r3, r3, #8
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a13      	ldr	r2, [pc, #76]	@ (8003ffc <TIM_OC1_SetConfig+0xc8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d111      	bne.n	8003fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40012c00 	.word	0x40012c00

08004000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f023 0210 	bic.w	r2, r3, #16
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0320 	bic.w	r3, r3, #32
 800404a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <TIM_OC2_SetConfig+0xd0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10d      	bne.n	800407c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a14      	ldr	r2, [pc, #80]	@ (80040d0 <TIM_OC2_SetConfig+0xd0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00

080040d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800411c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <TIM_OC3_SetConfig+0xd0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10d      	bne.n	800414e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800414c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <TIM_OC3_SetConfig+0xd0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d113      	bne.n	800417e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800415c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40012c00 	.word	0x40012c00

080041a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	031b      	lsls	r3, r3, #12
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0f      	ldr	r2, [pc, #60]	@ (8004240 <TIM_OC4_SetConfig+0x98>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d109      	bne.n	800421c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800420e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	019b      	lsls	r3, r3, #6
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e046      	b.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a16      	ldr	r2, [pc, #88]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a12      	ldr	r2, [pc, #72]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a10      	ldr	r2, [pc, #64]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800430c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4313      	orrs	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800

08004348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e042      	b.n	80043e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd f988 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	@ 0x24
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800438a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd71 	bl	8004e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	@ 0x28
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	d16d      	bne.n	80044e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_UART_Transmit+0x2c>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e066      	b.n	80044e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	@ 0x21
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004426:	f7fd fa77 	bl	8001918 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800445c:	e02a      	b.n	80044b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	@ 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 faf9 	bl	8004a60 <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e036      	b.n	80044e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	3302      	adds	r3, #2
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e007      	b.n	80044a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1cf      	bne.n	800445e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2140      	movs	r1, #64	@ 0x40
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fac9 	bl	8004a60 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e006      	b.n	80044e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b0ba      	sub	sp, #232	@ 0xe8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800452e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_UART_IRQHandler+0x66>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fbd1 	bl	8004cf6 <UART_Receive_IT>
      return;
 8004554:	e25b      	b.n	8004a0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80de 	beq.w	800471c <HAL_UART_IRQHandler+0x22c>
 8004560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004570:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80d1 	beq.w	800471c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_UART_IRQHandler+0xae>
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f043 0201 	orr.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_UART_IRQHandler+0xd2>
 80045aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	f043 0202 	orr.w	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00b      	beq.n	80045e6 <HAL_UART_IRQHandler+0xf6>
 80045ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_UART_IRQHandler+0x126>
 80045f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	f043 0208 	orr.w	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 81f2 	beq.w	8004a04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_UART_IRQHandler+0x14e>
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fb5c 	bl	8004cf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <HAL_UART_IRQHandler+0x17a>
 8004662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d04f      	beq.n	800470a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa66 	bl	8004b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d041      	beq.n	8004702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004694:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800469c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1d9      	bne.n	800467e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d013      	beq.n	80046fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	4a7e      	ldr	r2, [pc, #504]	@ (80048d0 <HAL_UART_IRQHandler+0x3e0>)
 80046d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fa66 	bl	8001bb0 <HAL_DMA_Abort_IT>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046f4:	4610      	mov	r0, r2
 80046f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e00e      	b.n	8004718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f99c 	bl	8004a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e00a      	b.n	8004718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f998 	bl	8004a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e006      	b.n	8004718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f994 	bl	8004a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004716:	e175      	b.n	8004a04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	bf00      	nop
    return;
 800471a:	e173      	b.n	8004a04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	2b01      	cmp	r3, #1
 8004722:	f040 814f 	bne.w	80049c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8148 	beq.w	80049c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8141 	beq.w	80049c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 80b6 	beq.w	80048d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8145 	beq.w	8004a08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004786:	429a      	cmp	r2, r3
 8004788:	f080 813e 	bcs.w	8004a08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004792:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b20      	cmp	r3, #32
 800479c:	f000 8088 	beq.w	80048b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1d9      	bne.n	80047a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004810:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004814:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004818:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004822:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e1      	bne.n	80047ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800483a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800483e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800484c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800484e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004852:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800485a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e3      	bne.n	8004828 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800487e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004880:	f023 0310 	bic.w	r3, r3, #16
 8004884:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004892:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004894:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004898:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e3      	bne.n	800486e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd f945 	bl	8001b3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8bf 	bl	8004a4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048cc:	e09c      	b.n	8004a08 <HAL_UART_IRQHandler+0x518>
 80048ce:	bf00      	nop
 80048d0:	08004c01 	.word	0x08004c01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 808e 	beq.w	8004a0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8089 	beq.w	8004a0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800490a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800491e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004920:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800492c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e3      	bne.n	80048fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	623b      	str	r3, [r7, #32]
   return(result);
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004956:	633a      	str	r2, [r7, #48]	@ 0x30
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800495c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e3      	bne.n	8004932 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	60fb      	str	r3, [r7, #12]
   return(result);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0310 	bic.w	r3, r3, #16
 800498e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800499c:	61fa      	str	r2, [r7, #28]
 800499e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69b9      	ldr	r1, [r7, #24]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	617b      	str	r3, [r7, #20]
   return(result);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e3      	bne.n	8004978 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f844 	bl	8004a4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049c2:	e023      	b.n	8004a0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_UART_IRQHandler+0x4f4>
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f923 	bl	8004c28 <UART_Transmit_IT>
    return;
 80049e2:	e014      	b.n	8004a0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00e      	beq.n	8004a0e <HAL_UART_IRQHandler+0x51e>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f962 	bl	8004cc6 <UART_EndTransmit_IT>
    return;
 8004a02:	e004      	b.n	8004a0e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a04:	bf00      	nop
 8004a06:	e002      	b.n	8004a0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a08:	bf00      	nop
 8004a0a:	e000      	b.n	8004a0e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a0c:	bf00      	nop
  }
}
 8004a0e:	37e8      	adds	r7, #232	@ 0xe8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b090      	sub	sp, #64	@ 0x40
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a70:	e050      	b.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d04c      	beq.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a80:	f7fc ff4a 	bl	8001918 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d241      	bcs.n	8004b14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ab0:	637a      	str	r2, [r7, #52]	@ 0x34
 8004ab2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 0301 	bic.w	r3, r3, #1
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ae4:	623a      	str	r2, [r7, #32]
 8004ae6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	69f9      	ldr	r1, [r7, #28]
 8004aea:	6a3a      	ldr	r2, [r7, #32]
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e00f      	b.n	8004b34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d09f      	beq.n	8004a72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3740      	adds	r7, #64	@ 0x40
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b095      	sub	sp, #84	@ 0x54
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b64:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d119      	bne.n	8004be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd4:	61ba      	str	r2, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	613b      	str	r3, [r7, #16]
   return(result);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bf6:	bf00      	nop
 8004bf8:	3754      	adds	r7, #84	@ 0x54
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff ff0c 	bl	8004a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b21      	cmp	r3, #33	@ 0x21
 8004c3a:	d13e      	bne.n	8004cba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c44:	d114      	bne.n	8004c70 <UART_Transmit_IT+0x48>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d110      	bne.n	8004c70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	1c9a      	adds	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	621a      	str	r2, [r3, #32]
 8004c6e:	e008      	b.n	8004c82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	1c59      	adds	r1, r3, #1
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6211      	str	r1, [r2, #32]
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fe94 	bl	8004a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b08c      	sub	sp, #48	@ 0x30
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b22      	cmp	r3, #34	@ 0x22
 8004d08:	f040 80ae 	bne.w	8004e68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d14:	d117      	bne.n	8004d46 <UART_Receive_IT+0x50>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d113      	bne.n	8004d46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d44:	e026      	b.n	8004d94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d58:	d007      	beq.n	8004d6a <UART_Receive_IT+0x74>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <UART_Receive_IT+0x82>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e008      	b.n	8004d8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	4619      	mov	r1, r3
 8004da2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d15d      	bne.n	8004e64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0220 	bic.w	r2, r2, #32
 8004db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d135      	bne.n	8004e5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	613b      	str	r3, [r7, #16]
   return(result);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f023 0310 	bic.w	r3, r3, #16
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e14:	623a      	str	r2, [r7, #32]
 8004e16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	6a3a      	ldr	r2, [r7, #32]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d10a      	bne.n	8004e4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fdf9 	bl	8004a4a <HAL_UARTEx_RxEventCallback>
 8004e58:	e002      	b.n	8004e60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fde3 	bl	8004a26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e002      	b.n	8004e6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3730      	adds	r7, #48	@ 0x30
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004eae:	f023 030c 	bic.w	r3, r3, #12
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f88 <UART_SetConfig+0x114>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d103      	bne.n	8004ee4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fde2 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	e002      	b.n	8004eea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7fe fdca 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8004ee8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009a      	lsls	r2, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	4a22      	ldr	r2, [pc, #136]	@ (8004f8c <UART_SetConfig+0x118>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	0119      	lsls	r1, r3, #4
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009a      	lsls	r2, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f20:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <UART_SetConfig+0x118>)
 8004f22:	fba3 0302 	umull	r0, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2064      	movs	r0, #100	@ 0x64
 8004f2a:	fb00 f303 	mul.w	r3, r0, r3
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	3332      	adds	r3, #50	@ 0x32
 8004f34:	4a15      	ldr	r2, [pc, #84]	@ (8004f8c <UART_SetConfig+0x118>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f40:	4419      	add	r1, r3
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009a      	lsls	r2, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f58:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <UART_SetConfig+0x118>)
 8004f5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2064      	movs	r0, #100	@ 0x64
 8004f62:	fb00 f303 	mul.w	r3, r0, r3
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	@ 0x32
 8004f6c:	4a07      	ldr	r2, [pc, #28]	@ (8004f8c <UART_SetConfig+0x118>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40013800 	.word	0x40013800
 8004f8c:	51eb851f 	.word	0x51eb851f

08004f90 <siprintf>:
 8004f90:	b40e      	push	{r1, r2, r3}
 8004f92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f96:	b500      	push	{lr}
 8004f98:	b09c      	sub	sp, #112	@ 0x70
 8004f9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f9c:	9002      	str	r0, [sp, #8]
 8004f9e:	9006      	str	r0, [sp, #24]
 8004fa0:	9107      	str	r1, [sp, #28]
 8004fa2:	9104      	str	r1, [sp, #16]
 8004fa4:	4808      	ldr	r0, [pc, #32]	@ (8004fc8 <siprintf+0x38>)
 8004fa6:	4909      	ldr	r1, [pc, #36]	@ (8004fcc <siprintf+0x3c>)
 8004fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fac:	9105      	str	r1, [sp, #20]
 8004fae:	6800      	ldr	r0, [r0, #0]
 8004fb0:	a902      	add	r1, sp, #8
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	f000 f992 	bl	80052dc <_svfiprintf_r>
 8004fb8:	2200      	movs	r2, #0
 8004fba:	9b02      	ldr	r3, [sp, #8]
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	b01c      	add	sp, #112	@ 0x70
 8004fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fc4:	b003      	add	sp, #12
 8004fc6:	4770      	bx	lr
 8004fc8:	2000002c 	.word	0x2000002c
 8004fcc:	ffff0208 	.word	0xffff0208

08004fd0 <memset>:
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4402      	add	r2, r0
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d100      	bne.n	8004fda <memset+0xa>
 8004fd8:	4770      	bx	lr
 8004fda:	f803 1b01 	strb.w	r1, [r3], #1
 8004fde:	e7f9      	b.n	8004fd4 <memset+0x4>

08004fe0 <__errno>:
 8004fe0:	4b01      	ldr	r3, [pc, #4]	@ (8004fe8 <__errno+0x8>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000002c 	.word	0x2000002c

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	2600      	movs	r6, #0
 8004ff0:	4d0c      	ldr	r5, [pc, #48]	@ (8005024 <__libc_init_array+0x38>)
 8004ff2:	4c0d      	ldr	r4, [pc, #52]	@ (8005028 <__libc_init_array+0x3c>)
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	42a6      	cmp	r6, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	f000 fc78 	bl	80058f0 <_init>
 8005000:	2600      	movs	r6, #0
 8005002:	4d0a      	ldr	r5, [pc, #40]	@ (800502c <__libc_init_array+0x40>)
 8005004:	4c0a      	ldr	r4, [pc, #40]	@ (8005030 <__libc_init_array+0x44>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	42a6      	cmp	r6, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f855 3b04 	ldr.w	r3, [r5], #4
 8005014:	4798      	blx	r3
 8005016:	3601      	adds	r6, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f855 3b04 	ldr.w	r3, [r5], #4
 800501e:	4798      	blx	r3
 8005020:	3601      	adds	r6, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	080059cc 	.word	0x080059cc
 8005028:	080059cc 	.word	0x080059cc
 800502c:	080059cc 	.word	0x080059cc
 8005030:	080059d0 	.word	0x080059d0

08005034 <__retarget_lock_acquire_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_release_recursive>:
 8005036:	4770      	bx	lr

08005038 <_free_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4605      	mov	r5, r0
 800503c:	2900      	cmp	r1, #0
 800503e:	d040      	beq.n	80050c2 <_free_r+0x8a>
 8005040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005044:	1f0c      	subs	r4, r1, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	bfb8      	it	lt
 800504a:	18e4      	addlt	r4, r4, r3
 800504c:	f000 f8de 	bl	800520c <__malloc_lock>
 8005050:	4a1c      	ldr	r2, [pc, #112]	@ (80050c4 <_free_r+0x8c>)
 8005052:	6813      	ldr	r3, [r2, #0]
 8005054:	b933      	cbnz	r3, 8005064 <_free_r+0x2c>
 8005056:	6063      	str	r3, [r4, #4]
 8005058:	6014      	str	r4, [r2, #0]
 800505a:	4628      	mov	r0, r5
 800505c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005060:	f000 b8da 	b.w	8005218 <__malloc_unlock>
 8005064:	42a3      	cmp	r3, r4
 8005066:	d908      	bls.n	800507a <_free_r+0x42>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	1821      	adds	r1, r4, r0
 800506c:	428b      	cmp	r3, r1
 800506e:	bf01      	itttt	eq
 8005070:	6819      	ldreq	r1, [r3, #0]
 8005072:	685b      	ldreq	r3, [r3, #4]
 8005074:	1809      	addeq	r1, r1, r0
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	e7ed      	b.n	8005056 <_free_r+0x1e>
 800507a:	461a      	mov	r2, r3
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b10b      	cbz	r3, 8005084 <_free_r+0x4c>
 8005080:	42a3      	cmp	r3, r4
 8005082:	d9fa      	bls.n	800507a <_free_r+0x42>
 8005084:	6811      	ldr	r1, [r2, #0]
 8005086:	1850      	adds	r0, r2, r1
 8005088:	42a0      	cmp	r0, r4
 800508a:	d10b      	bne.n	80050a4 <_free_r+0x6c>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	4401      	add	r1, r0
 8005090:	1850      	adds	r0, r2, r1
 8005092:	4283      	cmp	r3, r0
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	d1e0      	bne.n	800505a <_free_r+0x22>
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4408      	add	r0, r1
 800509e:	6010      	str	r0, [r2, #0]
 80050a0:	6053      	str	r3, [r2, #4]
 80050a2:	e7da      	b.n	800505a <_free_r+0x22>
 80050a4:	d902      	bls.n	80050ac <_free_r+0x74>
 80050a6:	230c      	movs	r3, #12
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	e7d6      	b.n	800505a <_free_r+0x22>
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	1821      	adds	r1, r4, r0
 80050b0:	428b      	cmp	r3, r1
 80050b2:	bf01      	itttt	eq
 80050b4:	6819      	ldreq	r1, [r3, #0]
 80050b6:	685b      	ldreq	r3, [r3, #4]
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	6054      	str	r4, [r2, #4]
 80050c0:	e7cb      	b.n	800505a <_free_r+0x22>
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	200002ec 	.word	0x200002ec

080050c8 <sbrk_aligned>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005108 <sbrk_aligned+0x40>)
 80050cc:	460c      	mov	r4, r1
 80050ce:	6831      	ldr	r1, [r6, #0]
 80050d0:	4605      	mov	r5, r0
 80050d2:	b911      	cbnz	r1, 80050da <sbrk_aligned+0x12>
 80050d4:	f000 fbaa 	bl	800582c <_sbrk_r>
 80050d8:	6030      	str	r0, [r6, #0]
 80050da:	4621      	mov	r1, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 fba5 	bl	800582c <_sbrk_r>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d103      	bne.n	80050ee <sbrk_aligned+0x26>
 80050e6:	f04f 34ff 	mov.w	r4, #4294967295
 80050ea:	4620      	mov	r0, r4
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	1cc4      	adds	r4, r0, #3
 80050f0:	f024 0403 	bic.w	r4, r4, #3
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d0f8      	beq.n	80050ea <sbrk_aligned+0x22>
 80050f8:	1a21      	subs	r1, r4, r0
 80050fa:	4628      	mov	r0, r5
 80050fc:	f000 fb96 	bl	800582c <_sbrk_r>
 8005100:	3001      	adds	r0, #1
 8005102:	d1f2      	bne.n	80050ea <sbrk_aligned+0x22>
 8005104:	e7ef      	b.n	80050e6 <sbrk_aligned+0x1e>
 8005106:	bf00      	nop
 8005108:	200002e8 	.word	0x200002e8

0800510c <_malloc_r>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	1ccd      	adds	r5, r1, #3
 8005112:	f025 0503 	bic.w	r5, r5, #3
 8005116:	3508      	adds	r5, #8
 8005118:	2d0c      	cmp	r5, #12
 800511a:	bf38      	it	cc
 800511c:	250c      	movcc	r5, #12
 800511e:	2d00      	cmp	r5, #0
 8005120:	4606      	mov	r6, r0
 8005122:	db01      	blt.n	8005128 <_malloc_r+0x1c>
 8005124:	42a9      	cmp	r1, r5
 8005126:	d904      	bls.n	8005132 <_malloc_r+0x26>
 8005128:	230c      	movs	r3, #12
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	2000      	movs	r0, #0
 800512e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005208 <_malloc_r+0xfc>
 8005136:	f000 f869 	bl	800520c <__malloc_lock>
 800513a:	f8d8 3000 	ldr.w	r3, [r8]
 800513e:	461c      	mov	r4, r3
 8005140:	bb44      	cbnz	r4, 8005194 <_malloc_r+0x88>
 8005142:	4629      	mov	r1, r5
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff ffbf 	bl	80050c8 <sbrk_aligned>
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	4604      	mov	r4, r0
 800514e:	d158      	bne.n	8005202 <_malloc_r+0xf6>
 8005150:	f8d8 4000 	ldr.w	r4, [r8]
 8005154:	4627      	mov	r7, r4
 8005156:	2f00      	cmp	r7, #0
 8005158:	d143      	bne.n	80051e2 <_malloc_r+0xd6>
 800515a:	2c00      	cmp	r4, #0
 800515c:	d04b      	beq.n	80051f6 <_malloc_r+0xea>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	eb04 0903 	add.w	r9, r4, r3
 8005168:	f000 fb60 	bl	800582c <_sbrk_r>
 800516c:	4581      	cmp	r9, r0
 800516e:	d142      	bne.n	80051f6 <_malloc_r+0xea>
 8005170:	6821      	ldr	r1, [r4, #0]
 8005172:	4630      	mov	r0, r6
 8005174:	1a6d      	subs	r5, r5, r1
 8005176:	4629      	mov	r1, r5
 8005178:	f7ff ffa6 	bl	80050c8 <sbrk_aligned>
 800517c:	3001      	adds	r0, #1
 800517e:	d03a      	beq.n	80051f6 <_malloc_r+0xea>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	442b      	add	r3, r5
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	f8d8 3000 	ldr.w	r3, [r8]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	bb62      	cbnz	r2, 80051e8 <_malloc_r+0xdc>
 800518e:	f8c8 7000 	str.w	r7, [r8]
 8005192:	e00f      	b.n	80051b4 <_malloc_r+0xa8>
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	1b52      	subs	r2, r2, r5
 8005198:	d420      	bmi.n	80051dc <_malloc_r+0xd0>
 800519a:	2a0b      	cmp	r2, #11
 800519c:	d917      	bls.n	80051ce <_malloc_r+0xc2>
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	6025      	str	r5, [r4, #0]
 80051a4:	bf18      	it	ne
 80051a6:	6059      	strne	r1, [r3, #4]
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	bf08      	it	eq
 80051ac:	f8c8 1000 	streq.w	r1, [r8]
 80051b0:	5162      	str	r2, [r4, r5]
 80051b2:	604b      	str	r3, [r1, #4]
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 f82f 	bl	8005218 <__malloc_unlock>
 80051ba:	f104 000b 	add.w	r0, r4, #11
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	f020 0007 	bic.w	r0, r0, #7
 80051c4:	1ac2      	subs	r2, r0, r3
 80051c6:	bf1c      	itt	ne
 80051c8:	1a1b      	subne	r3, r3, r0
 80051ca:	50a3      	strne	r3, [r4, r2]
 80051cc:	e7af      	b.n	800512e <_malloc_r+0x22>
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	bf0c      	ite	eq
 80051d4:	f8c8 2000 	streq.w	r2, [r8]
 80051d8:	605a      	strne	r2, [r3, #4]
 80051da:	e7eb      	b.n	80051b4 <_malloc_r+0xa8>
 80051dc:	4623      	mov	r3, r4
 80051de:	6864      	ldr	r4, [r4, #4]
 80051e0:	e7ae      	b.n	8005140 <_malloc_r+0x34>
 80051e2:	463c      	mov	r4, r7
 80051e4:	687f      	ldr	r7, [r7, #4]
 80051e6:	e7b6      	b.n	8005156 <_malloc_r+0x4a>
 80051e8:	461a      	mov	r2, r3
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d1fb      	bne.n	80051e8 <_malloc_r+0xdc>
 80051f0:	2300      	movs	r3, #0
 80051f2:	6053      	str	r3, [r2, #4]
 80051f4:	e7de      	b.n	80051b4 <_malloc_r+0xa8>
 80051f6:	230c      	movs	r3, #12
 80051f8:	4630      	mov	r0, r6
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f000 f80c 	bl	8005218 <__malloc_unlock>
 8005200:	e794      	b.n	800512c <_malloc_r+0x20>
 8005202:	6005      	str	r5, [r0, #0]
 8005204:	e7d6      	b.n	80051b4 <_malloc_r+0xa8>
 8005206:	bf00      	nop
 8005208:	200002ec 	.word	0x200002ec

0800520c <__malloc_lock>:
 800520c:	4801      	ldr	r0, [pc, #4]	@ (8005214 <__malloc_lock+0x8>)
 800520e:	f7ff bf11 	b.w	8005034 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	200002e4 	.word	0x200002e4

08005218 <__malloc_unlock>:
 8005218:	4801      	ldr	r0, [pc, #4]	@ (8005220 <__malloc_unlock+0x8>)
 800521a:	f7ff bf0c 	b.w	8005036 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	200002e4 	.word	0x200002e4

08005224 <__ssputs_r>:
 8005224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005228:	461f      	mov	r7, r3
 800522a:	688e      	ldr	r6, [r1, #8]
 800522c:	4682      	mov	sl, r0
 800522e:	42be      	cmp	r6, r7
 8005230:	460c      	mov	r4, r1
 8005232:	4690      	mov	r8, r2
 8005234:	680b      	ldr	r3, [r1, #0]
 8005236:	d82d      	bhi.n	8005294 <__ssputs_r+0x70>
 8005238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800523c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005240:	d026      	beq.n	8005290 <__ssputs_r+0x6c>
 8005242:	6965      	ldr	r5, [r4, #20]
 8005244:	6909      	ldr	r1, [r1, #16]
 8005246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800524a:	eba3 0901 	sub.w	r9, r3, r1
 800524e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005252:	1c7b      	adds	r3, r7, #1
 8005254:	444b      	add	r3, r9
 8005256:	106d      	asrs	r5, r5, #1
 8005258:	429d      	cmp	r5, r3
 800525a:	bf38      	it	cc
 800525c:	461d      	movcc	r5, r3
 800525e:	0553      	lsls	r3, r2, #21
 8005260:	d527      	bpl.n	80052b2 <__ssputs_r+0x8e>
 8005262:	4629      	mov	r1, r5
 8005264:	f7ff ff52 	bl	800510c <_malloc_r>
 8005268:	4606      	mov	r6, r0
 800526a:	b360      	cbz	r0, 80052c6 <__ssputs_r+0xa2>
 800526c:	464a      	mov	r2, r9
 800526e:	6921      	ldr	r1, [r4, #16]
 8005270:	f000 fafa 	bl	8005868 <memcpy>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800527a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	6126      	str	r6, [r4, #16]
 8005282:	444e      	add	r6, r9
 8005284:	6026      	str	r6, [r4, #0]
 8005286:	463e      	mov	r6, r7
 8005288:	6165      	str	r5, [r4, #20]
 800528a:	eba5 0509 	sub.w	r5, r5, r9
 800528e:	60a5      	str	r5, [r4, #8]
 8005290:	42be      	cmp	r6, r7
 8005292:	d900      	bls.n	8005296 <__ssputs_r+0x72>
 8005294:	463e      	mov	r6, r7
 8005296:	4632      	mov	r2, r6
 8005298:	4641      	mov	r1, r8
 800529a:	6820      	ldr	r0, [r4, #0]
 800529c:	f000 faac 	bl	80057f8 <memmove>
 80052a0:	2000      	movs	r0, #0
 80052a2:	68a3      	ldr	r3, [r4, #8]
 80052a4:	1b9b      	subs	r3, r3, r6
 80052a6:	60a3      	str	r3, [r4, #8]
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	4433      	add	r3, r6
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	462a      	mov	r2, r5
 80052b4:	f000 fae6 	bl	8005884 <_realloc_r>
 80052b8:	4606      	mov	r6, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1e0      	bne.n	8005280 <__ssputs_r+0x5c>
 80052be:	4650      	mov	r0, sl
 80052c0:	6921      	ldr	r1, [r4, #16]
 80052c2:	f7ff feb9 	bl	8005038 <_free_r>
 80052c6:	230c      	movs	r3, #12
 80052c8:	f8ca 3000 	str.w	r3, [sl]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	e7e9      	b.n	80052ae <__ssputs_r+0x8a>
	...

080052dc <_svfiprintf_r>:
 80052dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	4698      	mov	r8, r3
 80052e2:	898b      	ldrh	r3, [r1, #12]
 80052e4:	4607      	mov	r7, r0
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	460d      	mov	r5, r1
 80052ea:	4614      	mov	r4, r2
 80052ec:	b09d      	sub	sp, #116	@ 0x74
 80052ee:	d510      	bpl.n	8005312 <_svfiprintf_r+0x36>
 80052f0:	690b      	ldr	r3, [r1, #16]
 80052f2:	b973      	cbnz	r3, 8005312 <_svfiprintf_r+0x36>
 80052f4:	2140      	movs	r1, #64	@ 0x40
 80052f6:	f7ff ff09 	bl	800510c <_malloc_r>
 80052fa:	6028      	str	r0, [r5, #0]
 80052fc:	6128      	str	r0, [r5, #16]
 80052fe:	b930      	cbnz	r0, 800530e <_svfiprintf_r+0x32>
 8005300:	230c      	movs	r3, #12
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	b01d      	add	sp, #116	@ 0x74
 800530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	616b      	str	r3, [r5, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	9309      	str	r3, [sp, #36]	@ 0x24
 8005316:	2320      	movs	r3, #32
 8005318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800531c:	2330      	movs	r3, #48	@ 0x30
 800531e:	f04f 0901 	mov.w	r9, #1
 8005322:	f8cd 800c 	str.w	r8, [sp, #12]
 8005326:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80054c0 <_svfiprintf_r+0x1e4>
 800532a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800532e:	4623      	mov	r3, r4
 8005330:	469a      	mov	sl, r3
 8005332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005336:	b10a      	cbz	r2, 800533c <_svfiprintf_r+0x60>
 8005338:	2a25      	cmp	r2, #37	@ 0x25
 800533a:	d1f9      	bne.n	8005330 <_svfiprintf_r+0x54>
 800533c:	ebba 0b04 	subs.w	fp, sl, r4
 8005340:	d00b      	beq.n	800535a <_svfiprintf_r+0x7e>
 8005342:	465b      	mov	r3, fp
 8005344:	4622      	mov	r2, r4
 8005346:	4629      	mov	r1, r5
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff6b 	bl	8005224 <__ssputs_r>
 800534e:	3001      	adds	r0, #1
 8005350:	f000 80a7 	beq.w	80054a2 <_svfiprintf_r+0x1c6>
 8005354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005356:	445a      	add	r2, fp
 8005358:	9209      	str	r2, [sp, #36]	@ 0x24
 800535a:	f89a 3000 	ldrb.w	r3, [sl]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 809f 	beq.w	80054a2 <_svfiprintf_r+0x1c6>
 8005364:	2300      	movs	r3, #0
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536e:	f10a 0a01 	add.w	sl, sl, #1
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	9307      	str	r3, [sp, #28]
 8005376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800537a:	931a      	str	r3, [sp, #104]	@ 0x68
 800537c:	4654      	mov	r4, sl
 800537e:	2205      	movs	r2, #5
 8005380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005384:	484e      	ldr	r0, [pc, #312]	@ (80054c0 <_svfiprintf_r+0x1e4>)
 8005386:	f000 fa61 	bl	800584c <memchr>
 800538a:	9a04      	ldr	r2, [sp, #16]
 800538c:	b9d8      	cbnz	r0, 80053c6 <_svfiprintf_r+0xea>
 800538e:	06d0      	lsls	r0, r2, #27
 8005390:	bf44      	itt	mi
 8005392:	2320      	movmi	r3, #32
 8005394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005398:	0711      	lsls	r1, r2, #28
 800539a:	bf44      	itt	mi
 800539c:	232b      	movmi	r3, #43	@ 0x2b
 800539e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053a2:	f89a 3000 	ldrb.w	r3, [sl]
 80053a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a8:	d015      	beq.n	80053d6 <_svfiprintf_r+0xfa>
 80053aa:	4654      	mov	r4, sl
 80053ac:	2000      	movs	r0, #0
 80053ae:	f04f 0c0a 	mov.w	ip, #10
 80053b2:	9a07      	ldr	r2, [sp, #28]
 80053b4:	4621      	mov	r1, r4
 80053b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ba:	3b30      	subs	r3, #48	@ 0x30
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d94b      	bls.n	8005458 <_svfiprintf_r+0x17c>
 80053c0:	b1b0      	cbz	r0, 80053f0 <_svfiprintf_r+0x114>
 80053c2:	9207      	str	r2, [sp, #28]
 80053c4:	e014      	b.n	80053f0 <_svfiprintf_r+0x114>
 80053c6:	eba0 0308 	sub.w	r3, r0, r8
 80053ca:	fa09 f303 	lsl.w	r3, r9, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	46a2      	mov	sl, r4
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	e7d2      	b.n	800537c <_svfiprintf_r+0xa0>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	1d19      	adds	r1, r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9103      	str	r1, [sp, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bfbb      	ittet	lt
 80053e2:	425b      	neglt	r3, r3
 80053e4:	f042 0202 	orrlt.w	r2, r2, #2
 80053e8:	9307      	strge	r3, [sp, #28]
 80053ea:	9307      	strlt	r3, [sp, #28]
 80053ec:	bfb8      	it	lt
 80053ee:	9204      	strlt	r2, [sp, #16]
 80053f0:	7823      	ldrb	r3, [r4, #0]
 80053f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f4:	d10a      	bne.n	800540c <_svfiprintf_r+0x130>
 80053f6:	7863      	ldrb	r3, [r4, #1]
 80053f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053fa:	d132      	bne.n	8005462 <_svfiprintf_r+0x186>
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	3402      	adds	r4, #2
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	9203      	str	r2, [sp, #12]
 8005406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80054c4 <_svfiprintf_r+0x1e8>
 8005410:	2203      	movs	r2, #3
 8005412:	4650      	mov	r0, sl
 8005414:	7821      	ldrb	r1, [r4, #0]
 8005416:	f000 fa19 	bl	800584c <memchr>
 800541a:	b138      	cbz	r0, 800542c <_svfiprintf_r+0x150>
 800541c:	2240      	movs	r2, #64	@ 0x40
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	eba0 000a 	sub.w	r0, r0, sl
 8005424:	4082      	lsls	r2, r0
 8005426:	4313      	orrs	r3, r2
 8005428:	3401      	adds	r4, #1
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005430:	2206      	movs	r2, #6
 8005432:	4825      	ldr	r0, [pc, #148]	@ (80054c8 <_svfiprintf_r+0x1ec>)
 8005434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005438:	f000 fa08 	bl	800584c <memchr>
 800543c:	2800      	cmp	r0, #0
 800543e:	d036      	beq.n	80054ae <_svfiprintf_r+0x1d2>
 8005440:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <_svfiprintf_r+0x1f0>)
 8005442:	bb1b      	cbnz	r3, 800548c <_svfiprintf_r+0x1b0>
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	3307      	adds	r3, #7
 8005448:	f023 0307 	bic.w	r3, r3, #7
 800544c:	3308      	adds	r3, #8
 800544e:	9303      	str	r3, [sp, #12]
 8005450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005452:	4433      	add	r3, r6
 8005454:	9309      	str	r3, [sp, #36]	@ 0x24
 8005456:	e76a      	b.n	800532e <_svfiprintf_r+0x52>
 8005458:	460c      	mov	r4, r1
 800545a:	2001      	movs	r0, #1
 800545c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005460:	e7a8      	b.n	80053b4 <_svfiprintf_r+0xd8>
 8005462:	2300      	movs	r3, #0
 8005464:	f04f 0c0a 	mov.w	ip, #10
 8005468:	4619      	mov	r1, r3
 800546a:	3401      	adds	r4, #1
 800546c:	9305      	str	r3, [sp, #20]
 800546e:	4620      	mov	r0, r4
 8005470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005474:	3a30      	subs	r2, #48	@ 0x30
 8005476:	2a09      	cmp	r2, #9
 8005478:	d903      	bls.n	8005482 <_svfiprintf_r+0x1a6>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0c6      	beq.n	800540c <_svfiprintf_r+0x130>
 800547e:	9105      	str	r1, [sp, #20]
 8005480:	e7c4      	b.n	800540c <_svfiprintf_r+0x130>
 8005482:	4604      	mov	r4, r0
 8005484:	2301      	movs	r3, #1
 8005486:	fb0c 2101 	mla	r1, ip, r1, r2
 800548a:	e7f0      	b.n	800546e <_svfiprintf_r+0x192>
 800548c:	ab03      	add	r3, sp, #12
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	462a      	mov	r2, r5
 8005492:	4638      	mov	r0, r7
 8005494:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <_svfiprintf_r+0x1f4>)
 8005496:	a904      	add	r1, sp, #16
 8005498:	f3af 8000 	nop.w
 800549c:	1c42      	adds	r2, r0, #1
 800549e:	4606      	mov	r6, r0
 80054a0:	d1d6      	bne.n	8005450 <_svfiprintf_r+0x174>
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	065b      	lsls	r3, r3, #25
 80054a6:	f53f af2d 	bmi.w	8005304 <_svfiprintf_r+0x28>
 80054aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054ac:	e72c      	b.n	8005308 <_svfiprintf_r+0x2c>
 80054ae:	ab03      	add	r3, sp, #12
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462a      	mov	r2, r5
 80054b4:	4638      	mov	r0, r7
 80054b6:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <_svfiprintf_r+0x1f4>)
 80054b8:	a904      	add	r1, sp, #16
 80054ba:	f000 f87d 	bl	80055b8 <_printf_i>
 80054be:	e7ed      	b.n	800549c <_svfiprintf_r+0x1c0>
 80054c0:	0800598e 	.word	0x0800598e
 80054c4:	08005994 	.word	0x08005994
 80054c8:	08005998 	.word	0x08005998
 80054cc:	00000000 	.word	0x00000000
 80054d0:	08005225 	.word	0x08005225

080054d4 <_printf_common>:
 80054d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	4616      	mov	r6, r2
 80054da:	4698      	mov	r8, r3
 80054dc:	688a      	ldr	r2, [r1, #8]
 80054de:	690b      	ldr	r3, [r1, #16]
 80054e0:	4607      	mov	r7, r0
 80054e2:	4293      	cmp	r3, r2
 80054e4:	bfb8      	it	lt
 80054e6:	4613      	movlt	r3, r2
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054ee:	460c      	mov	r4, r1
 80054f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054f4:	b10a      	cbz	r2, 80054fa <_printf_common+0x26>
 80054f6:	3301      	adds	r3, #1
 80054f8:	6033      	str	r3, [r6, #0]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	0699      	lsls	r1, r3, #26
 80054fe:	bf42      	ittt	mi
 8005500:	6833      	ldrmi	r3, [r6, #0]
 8005502:	3302      	addmi	r3, #2
 8005504:	6033      	strmi	r3, [r6, #0]
 8005506:	6825      	ldr	r5, [r4, #0]
 8005508:	f015 0506 	ands.w	r5, r5, #6
 800550c:	d106      	bne.n	800551c <_printf_common+0x48>
 800550e:	f104 0a19 	add.w	sl, r4, #25
 8005512:	68e3      	ldr	r3, [r4, #12]
 8005514:	6832      	ldr	r2, [r6, #0]
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	42ab      	cmp	r3, r5
 800551a:	dc2b      	bgt.n	8005574 <_printf_common+0xa0>
 800551c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	3b00      	subs	r3, #0
 8005524:	bf18      	it	ne
 8005526:	2301      	movne	r3, #1
 8005528:	0692      	lsls	r2, r2, #26
 800552a:	d430      	bmi.n	800558e <_printf_common+0xba>
 800552c:	4641      	mov	r1, r8
 800552e:	4638      	mov	r0, r7
 8005530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005534:	47c8      	blx	r9
 8005536:	3001      	adds	r0, #1
 8005538:	d023      	beq.n	8005582 <_printf_common+0xae>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	6922      	ldr	r2, [r4, #16]
 800553e:	f003 0306 	and.w	r3, r3, #6
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf14      	ite	ne
 8005546:	2500      	movne	r5, #0
 8005548:	6833      	ldreq	r3, [r6, #0]
 800554a:	f04f 0600 	mov.w	r6, #0
 800554e:	bf08      	it	eq
 8005550:	68e5      	ldreq	r5, [r4, #12]
 8005552:	f104 041a 	add.w	r4, r4, #26
 8005556:	bf08      	it	eq
 8005558:	1aed      	subeq	r5, r5, r3
 800555a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800555e:	bf08      	it	eq
 8005560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005564:	4293      	cmp	r3, r2
 8005566:	bfc4      	itt	gt
 8005568:	1a9b      	subgt	r3, r3, r2
 800556a:	18ed      	addgt	r5, r5, r3
 800556c:	42b5      	cmp	r5, r6
 800556e:	d11a      	bne.n	80055a6 <_printf_common+0xd2>
 8005570:	2000      	movs	r0, #0
 8005572:	e008      	b.n	8005586 <_printf_common+0xb2>
 8005574:	2301      	movs	r3, #1
 8005576:	4652      	mov	r2, sl
 8005578:	4641      	mov	r1, r8
 800557a:	4638      	mov	r0, r7
 800557c:	47c8      	blx	r9
 800557e:	3001      	adds	r0, #1
 8005580:	d103      	bne.n	800558a <_printf_common+0xb6>
 8005582:	f04f 30ff 	mov.w	r0, #4294967295
 8005586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800558a:	3501      	adds	r5, #1
 800558c:	e7c1      	b.n	8005512 <_printf_common+0x3e>
 800558e:	2030      	movs	r0, #48	@ 0x30
 8005590:	18e1      	adds	r1, r4, r3
 8005592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800559c:	4422      	add	r2, r4
 800559e:	3302      	adds	r3, #2
 80055a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055a4:	e7c2      	b.n	800552c <_printf_common+0x58>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4622      	mov	r2, r4
 80055aa:	4641      	mov	r1, r8
 80055ac:	4638      	mov	r0, r7
 80055ae:	47c8      	blx	r9
 80055b0:	3001      	adds	r0, #1
 80055b2:	d0e6      	beq.n	8005582 <_printf_common+0xae>
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7d9      	b.n	800556c <_printf_common+0x98>

080055b8 <_printf_i>:
 80055b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	7e0f      	ldrb	r7, [r1, #24]
 80055be:	4691      	mov	r9, r2
 80055c0:	2f78      	cmp	r7, #120	@ 0x78
 80055c2:	4680      	mov	r8, r0
 80055c4:	460c      	mov	r4, r1
 80055c6:	469a      	mov	sl, r3
 80055c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ce:	d807      	bhi.n	80055e0 <_printf_i+0x28>
 80055d0:	2f62      	cmp	r7, #98	@ 0x62
 80055d2:	d80a      	bhi.n	80055ea <_printf_i+0x32>
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	f000 80d3 	beq.w	8005780 <_printf_i+0x1c8>
 80055da:	2f58      	cmp	r7, #88	@ 0x58
 80055dc:	f000 80ba 	beq.w	8005754 <_printf_i+0x19c>
 80055e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055e8:	e03a      	b.n	8005660 <_printf_i+0xa8>
 80055ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ee:	2b15      	cmp	r3, #21
 80055f0:	d8f6      	bhi.n	80055e0 <_printf_i+0x28>
 80055f2:	a101      	add	r1, pc, #4	@ (adr r1, 80055f8 <_printf_i+0x40>)
 80055f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055f8:	08005651 	.word	0x08005651
 80055fc:	08005665 	.word	0x08005665
 8005600:	080055e1 	.word	0x080055e1
 8005604:	080055e1 	.word	0x080055e1
 8005608:	080055e1 	.word	0x080055e1
 800560c:	080055e1 	.word	0x080055e1
 8005610:	08005665 	.word	0x08005665
 8005614:	080055e1 	.word	0x080055e1
 8005618:	080055e1 	.word	0x080055e1
 800561c:	080055e1 	.word	0x080055e1
 8005620:	080055e1 	.word	0x080055e1
 8005624:	08005767 	.word	0x08005767
 8005628:	0800568f 	.word	0x0800568f
 800562c:	08005721 	.word	0x08005721
 8005630:	080055e1 	.word	0x080055e1
 8005634:	080055e1 	.word	0x080055e1
 8005638:	08005789 	.word	0x08005789
 800563c:	080055e1 	.word	0x080055e1
 8005640:	0800568f 	.word	0x0800568f
 8005644:	080055e1 	.word	0x080055e1
 8005648:	080055e1 	.word	0x080055e1
 800564c:	08005729 	.word	0x08005729
 8005650:	6833      	ldr	r3, [r6, #0]
 8005652:	1d1a      	adds	r2, r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6032      	str	r2, [r6, #0]
 8005658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800565c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005660:	2301      	movs	r3, #1
 8005662:	e09e      	b.n	80057a2 <_printf_i+0x1ea>
 8005664:	6833      	ldr	r3, [r6, #0]
 8005666:	6820      	ldr	r0, [r4, #0]
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	6031      	str	r1, [r6, #0]
 800566c:	0606      	lsls	r6, r0, #24
 800566e:	d501      	bpl.n	8005674 <_printf_i+0xbc>
 8005670:	681d      	ldr	r5, [r3, #0]
 8005672:	e003      	b.n	800567c <_printf_i+0xc4>
 8005674:	0645      	lsls	r5, r0, #25
 8005676:	d5fb      	bpl.n	8005670 <_printf_i+0xb8>
 8005678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800567c:	2d00      	cmp	r5, #0
 800567e:	da03      	bge.n	8005688 <_printf_i+0xd0>
 8005680:	232d      	movs	r3, #45	@ 0x2d
 8005682:	426d      	negs	r5, r5
 8005684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005688:	230a      	movs	r3, #10
 800568a:	4859      	ldr	r0, [pc, #356]	@ (80057f0 <_printf_i+0x238>)
 800568c:	e011      	b.n	80056b2 <_printf_i+0xfa>
 800568e:	6821      	ldr	r1, [r4, #0]
 8005690:	6833      	ldr	r3, [r6, #0]
 8005692:	0608      	lsls	r0, r1, #24
 8005694:	f853 5b04 	ldr.w	r5, [r3], #4
 8005698:	d402      	bmi.n	80056a0 <_printf_i+0xe8>
 800569a:	0649      	lsls	r1, r1, #25
 800569c:	bf48      	it	mi
 800569e:	b2ad      	uxthmi	r5, r5
 80056a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80056a2:	6033      	str	r3, [r6, #0]
 80056a4:	bf14      	ite	ne
 80056a6:	230a      	movne	r3, #10
 80056a8:	2308      	moveq	r3, #8
 80056aa:	4851      	ldr	r0, [pc, #324]	@ (80057f0 <_printf_i+0x238>)
 80056ac:	2100      	movs	r1, #0
 80056ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056b2:	6866      	ldr	r6, [r4, #4]
 80056b4:	2e00      	cmp	r6, #0
 80056b6:	bfa8      	it	ge
 80056b8:	6821      	ldrge	r1, [r4, #0]
 80056ba:	60a6      	str	r6, [r4, #8]
 80056bc:	bfa4      	itt	ge
 80056be:	f021 0104 	bicge.w	r1, r1, #4
 80056c2:	6021      	strge	r1, [r4, #0]
 80056c4:	b90d      	cbnz	r5, 80056ca <_printf_i+0x112>
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d04b      	beq.n	8005762 <_printf_i+0x1aa>
 80056ca:	4616      	mov	r6, r2
 80056cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80056d0:	fb03 5711 	mls	r7, r3, r1, r5
 80056d4:	5dc7      	ldrb	r7, [r0, r7]
 80056d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056da:	462f      	mov	r7, r5
 80056dc:	42bb      	cmp	r3, r7
 80056de:	460d      	mov	r5, r1
 80056e0:	d9f4      	bls.n	80056cc <_printf_i+0x114>
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d10b      	bne.n	80056fe <_printf_i+0x146>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	07df      	lsls	r7, r3, #31
 80056ea:	d508      	bpl.n	80056fe <_printf_i+0x146>
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	6861      	ldr	r1, [r4, #4]
 80056f0:	4299      	cmp	r1, r3
 80056f2:	bfde      	ittt	le
 80056f4:	2330      	movle	r3, #48	@ 0x30
 80056f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056fe:	1b92      	subs	r2, r2, r6
 8005700:	6122      	str	r2, [r4, #16]
 8005702:	464b      	mov	r3, r9
 8005704:	4621      	mov	r1, r4
 8005706:	4640      	mov	r0, r8
 8005708:	f8cd a000 	str.w	sl, [sp]
 800570c:	aa03      	add	r2, sp, #12
 800570e:	f7ff fee1 	bl	80054d4 <_printf_common>
 8005712:	3001      	adds	r0, #1
 8005714:	d14a      	bne.n	80057ac <_printf_i+0x1f4>
 8005716:	f04f 30ff 	mov.w	r0, #4294967295
 800571a:	b004      	add	sp, #16
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	f043 0320 	orr.w	r3, r3, #32
 8005726:	6023      	str	r3, [r4, #0]
 8005728:	2778      	movs	r7, #120	@ 0x78
 800572a:	4832      	ldr	r0, [pc, #200]	@ (80057f4 <_printf_i+0x23c>)
 800572c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	6831      	ldr	r1, [r6, #0]
 8005734:	061f      	lsls	r7, r3, #24
 8005736:	f851 5b04 	ldr.w	r5, [r1], #4
 800573a:	d402      	bmi.n	8005742 <_printf_i+0x18a>
 800573c:	065f      	lsls	r7, r3, #25
 800573e:	bf48      	it	mi
 8005740:	b2ad      	uxthmi	r5, r5
 8005742:	6031      	str	r1, [r6, #0]
 8005744:	07d9      	lsls	r1, r3, #31
 8005746:	bf44      	itt	mi
 8005748:	f043 0320 	orrmi.w	r3, r3, #32
 800574c:	6023      	strmi	r3, [r4, #0]
 800574e:	b11d      	cbz	r5, 8005758 <_printf_i+0x1a0>
 8005750:	2310      	movs	r3, #16
 8005752:	e7ab      	b.n	80056ac <_printf_i+0xf4>
 8005754:	4826      	ldr	r0, [pc, #152]	@ (80057f0 <_printf_i+0x238>)
 8005756:	e7e9      	b.n	800572c <_printf_i+0x174>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	f023 0320 	bic.w	r3, r3, #32
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	e7f6      	b.n	8005750 <_printf_i+0x198>
 8005762:	4616      	mov	r6, r2
 8005764:	e7bd      	b.n	80056e2 <_printf_i+0x12a>
 8005766:	6833      	ldr	r3, [r6, #0]
 8005768:	6825      	ldr	r5, [r4, #0]
 800576a:	1d18      	adds	r0, r3, #4
 800576c:	6961      	ldr	r1, [r4, #20]
 800576e:	6030      	str	r0, [r6, #0]
 8005770:	062e      	lsls	r6, r5, #24
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	d501      	bpl.n	800577a <_printf_i+0x1c2>
 8005776:	6019      	str	r1, [r3, #0]
 8005778:	e002      	b.n	8005780 <_printf_i+0x1c8>
 800577a:	0668      	lsls	r0, r5, #25
 800577c:	d5fb      	bpl.n	8005776 <_printf_i+0x1be>
 800577e:	8019      	strh	r1, [r3, #0]
 8005780:	2300      	movs	r3, #0
 8005782:	4616      	mov	r6, r2
 8005784:	6123      	str	r3, [r4, #16]
 8005786:	e7bc      	b.n	8005702 <_printf_i+0x14a>
 8005788:	6833      	ldr	r3, [r6, #0]
 800578a:	2100      	movs	r1, #0
 800578c:	1d1a      	adds	r2, r3, #4
 800578e:	6032      	str	r2, [r6, #0]
 8005790:	681e      	ldr	r6, [r3, #0]
 8005792:	6862      	ldr	r2, [r4, #4]
 8005794:	4630      	mov	r0, r6
 8005796:	f000 f859 	bl	800584c <memchr>
 800579a:	b108      	cbz	r0, 80057a0 <_printf_i+0x1e8>
 800579c:	1b80      	subs	r0, r0, r6
 800579e:	6060      	str	r0, [r4, #4]
 80057a0:	6863      	ldr	r3, [r4, #4]
 80057a2:	6123      	str	r3, [r4, #16]
 80057a4:	2300      	movs	r3, #0
 80057a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057aa:	e7aa      	b.n	8005702 <_printf_i+0x14a>
 80057ac:	4632      	mov	r2, r6
 80057ae:	4649      	mov	r1, r9
 80057b0:	4640      	mov	r0, r8
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	47d0      	blx	sl
 80057b6:	3001      	adds	r0, #1
 80057b8:	d0ad      	beq.n	8005716 <_printf_i+0x15e>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	079b      	lsls	r3, r3, #30
 80057be:	d413      	bmi.n	80057e8 <_printf_i+0x230>
 80057c0:	68e0      	ldr	r0, [r4, #12]
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	4298      	cmp	r0, r3
 80057c6:	bfb8      	it	lt
 80057c8:	4618      	movlt	r0, r3
 80057ca:	e7a6      	b.n	800571a <_printf_i+0x162>
 80057cc:	2301      	movs	r3, #1
 80057ce:	4632      	mov	r2, r6
 80057d0:	4649      	mov	r1, r9
 80057d2:	4640      	mov	r0, r8
 80057d4:	47d0      	blx	sl
 80057d6:	3001      	adds	r0, #1
 80057d8:	d09d      	beq.n	8005716 <_printf_i+0x15e>
 80057da:	3501      	adds	r5, #1
 80057dc:	68e3      	ldr	r3, [r4, #12]
 80057de:	9903      	ldr	r1, [sp, #12]
 80057e0:	1a5b      	subs	r3, r3, r1
 80057e2:	42ab      	cmp	r3, r5
 80057e4:	dcf2      	bgt.n	80057cc <_printf_i+0x214>
 80057e6:	e7eb      	b.n	80057c0 <_printf_i+0x208>
 80057e8:	2500      	movs	r5, #0
 80057ea:	f104 0619 	add.w	r6, r4, #25
 80057ee:	e7f5      	b.n	80057dc <_printf_i+0x224>
 80057f0:	0800599f 	.word	0x0800599f
 80057f4:	080059b0 	.word	0x080059b0

080057f8 <memmove>:
 80057f8:	4288      	cmp	r0, r1
 80057fa:	b510      	push	{r4, lr}
 80057fc:	eb01 0402 	add.w	r4, r1, r2
 8005800:	d902      	bls.n	8005808 <memmove+0x10>
 8005802:	4284      	cmp	r4, r0
 8005804:	4623      	mov	r3, r4
 8005806:	d807      	bhi.n	8005818 <memmove+0x20>
 8005808:	1e43      	subs	r3, r0, #1
 800580a:	42a1      	cmp	r1, r4
 800580c:	d008      	beq.n	8005820 <memmove+0x28>
 800580e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005816:	e7f8      	b.n	800580a <memmove+0x12>
 8005818:	4601      	mov	r1, r0
 800581a:	4402      	add	r2, r0
 800581c:	428a      	cmp	r2, r1
 800581e:	d100      	bne.n	8005822 <memmove+0x2a>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582a:	e7f7      	b.n	800581c <memmove+0x24>

0800582c <_sbrk_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	2300      	movs	r3, #0
 8005830:	4d05      	ldr	r5, [pc, #20]	@ (8005848 <_sbrk_r+0x1c>)
 8005832:	4604      	mov	r4, r0
 8005834:	4608      	mov	r0, r1
 8005836:	602b      	str	r3, [r5, #0]
 8005838:	f7fb ffb4 	bl	80017a4 <_sbrk>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d102      	bne.n	8005846 <_sbrk_r+0x1a>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	b103      	cbz	r3, 8005846 <_sbrk_r+0x1a>
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	200002e0 	.word	0x200002e0

0800584c <memchr>:
 800584c:	4603      	mov	r3, r0
 800584e:	b510      	push	{r4, lr}
 8005850:	b2c9      	uxtb	r1, r1
 8005852:	4402      	add	r2, r0
 8005854:	4293      	cmp	r3, r2
 8005856:	4618      	mov	r0, r3
 8005858:	d101      	bne.n	800585e <memchr+0x12>
 800585a:	2000      	movs	r0, #0
 800585c:	e003      	b.n	8005866 <memchr+0x1a>
 800585e:	7804      	ldrb	r4, [r0, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	428c      	cmp	r4, r1
 8005864:	d1f6      	bne.n	8005854 <memchr+0x8>
 8005866:	bd10      	pop	{r4, pc}

08005868 <memcpy>:
 8005868:	440a      	add	r2, r1
 800586a:	4291      	cmp	r1, r2
 800586c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005870:	d100      	bne.n	8005874 <memcpy+0xc>
 8005872:	4770      	bx	lr
 8005874:	b510      	push	{r4, lr}
 8005876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587a:	4291      	cmp	r1, r2
 800587c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005880:	d1f9      	bne.n	8005876 <memcpy+0xe>
 8005882:	bd10      	pop	{r4, pc}

08005884 <_realloc_r>:
 8005884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005888:	4680      	mov	r8, r0
 800588a:	4615      	mov	r5, r2
 800588c:	460c      	mov	r4, r1
 800588e:	b921      	cbnz	r1, 800589a <_realloc_r+0x16>
 8005890:	4611      	mov	r1, r2
 8005892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005896:	f7ff bc39 	b.w	800510c <_malloc_r>
 800589a:	b92a      	cbnz	r2, 80058a8 <_realloc_r+0x24>
 800589c:	f7ff fbcc 	bl	8005038 <_free_r>
 80058a0:	2400      	movs	r4, #0
 80058a2:	4620      	mov	r0, r4
 80058a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a8:	f000 f81a 	bl	80058e0 <_malloc_usable_size_r>
 80058ac:	4285      	cmp	r5, r0
 80058ae:	4606      	mov	r6, r0
 80058b0:	d802      	bhi.n	80058b8 <_realloc_r+0x34>
 80058b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058b6:	d8f4      	bhi.n	80058a2 <_realloc_r+0x1e>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4640      	mov	r0, r8
 80058bc:	f7ff fc26 	bl	800510c <_malloc_r>
 80058c0:	4607      	mov	r7, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d0ec      	beq.n	80058a0 <_realloc_r+0x1c>
 80058c6:	42b5      	cmp	r5, r6
 80058c8:	462a      	mov	r2, r5
 80058ca:	4621      	mov	r1, r4
 80058cc:	bf28      	it	cs
 80058ce:	4632      	movcs	r2, r6
 80058d0:	f7ff ffca 	bl	8005868 <memcpy>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4640      	mov	r0, r8
 80058d8:	f7ff fbae 	bl	8005038 <_free_r>
 80058dc:	463c      	mov	r4, r7
 80058de:	e7e0      	b.n	80058a2 <_realloc_r+0x1e>

080058e0 <_malloc_usable_size_r>:
 80058e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e4:	1f18      	subs	r0, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bfbc      	itt	lt
 80058ea:	580b      	ldrlt	r3, [r1, r0]
 80058ec:	18c0      	addlt	r0, r0, r3
 80058ee:	4770      	bx	lr

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
