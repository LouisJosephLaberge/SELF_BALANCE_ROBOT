
SELF_BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b154  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800b268  0800b268  0000c268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b788  0800b788  0000d258  2**0
                  CONTENTS
  4 .ARM          00000008  0800b788  0800b788  0000c788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b790  0800b790  0000d258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b790  0800b790  0000c790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b794  0800b794  0000c794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800b798  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000258  0800b9f0  0000d258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800b9f0  0000d558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001340c  00000000  00000000  0000d281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003012  00000000  00000000  0002068d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  000236a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e48  00000000  00000000  000248d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae4f  00000000  00000000  00025718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001827e  00000000  00000000  00040567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947dd  00000000  00000000  000587e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecfc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f8  00000000  00000000  000ed008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f3300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000258 	.word	0x20000258
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b24c 	.word	0x0800b24c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000025c 	.word	0x2000025c
 800014c:	0800b24c 	.word	0x0800b24c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_d2lz>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	2200      	movs	r2, #0
 800113c:	2300      	movs	r3, #0
 800113e:	4604      	mov	r4, r0
 8001140:	460d      	mov	r5, r1
 8001142:	f7ff fc3b 	bl	80009bc <__aeabi_dcmplt>
 8001146:	b928      	cbnz	r0, 8001154 <__aeabi_d2lz+0x1c>
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001150:	f000 b80a 	b.w	8001168 <__aeabi_d2ulz>
 8001154:	4620      	mov	r0, r4
 8001156:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800115a:	f000 f805 	bl	8001168 <__aeabi_d2ulz>
 800115e:	4240      	negs	r0, r0
 8001160:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001164:	bd38      	pop	{r3, r4, r5, pc}
 8001166:	bf00      	nop

08001168 <__aeabi_d2ulz>:
 8001168:	b5d0      	push	{r4, r6, r7, lr}
 800116a:	2200      	movs	r2, #0
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <__aeabi_d2ulz+0x34>)
 800116e:	4606      	mov	r6, r0
 8001170:	460f      	mov	r7, r1
 8001172:	f7ff f9b1 	bl	80004d8 <__aeabi_dmul>
 8001176:	f7ff fc5f 	bl	8000a38 <__aeabi_d2uiz>
 800117a:	4604      	mov	r4, r0
 800117c:	f7ff f932 	bl	80003e4 <__aeabi_ui2d>
 8001180:	2200      	movs	r2, #0
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <__aeabi_d2ulz+0x38>)
 8001184:	f7ff f9a8 	bl	80004d8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4630      	mov	r0, r6
 800118e:	4639      	mov	r1, r7
 8001190:	f7fe ffea 	bl	8000168 <__aeabi_dsub>
 8001194:	f7ff fc50 	bl	8000a38 <__aeabi_d2uiz>
 8001198:	4621      	mov	r1, r4
 800119a:	bdd0      	pop	{r4, r6, r7, pc}
 800119c:	3df00000 	.word	0x3df00000
 80011a0:	41f00000 	.word	0x41f00000

080011a4 <adcInit>:
extern ADC_HandleTypeDef hadc1;

Adc_Handler handler_adc;

bool adcInit()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	return HAL_OK == HAL_ADC_Start_DMA(&hadc1, handler_adc.raw_values, 3);
 80011a8:	2203      	movs	r2, #3
 80011aa:	4906      	ldr	r1, [pc, #24]	@ (80011c4 <adcInit+0x20>)
 80011ac:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <adcInit+0x24>)
 80011ae:	f001 fd47 	bl	8002c40 <HAL_ADC_Start_DMA>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000278 	.word	0x20000278
 80011c8:	2000028c 	.word	0x2000028c
 80011cc:	00000000 	.word	0x00000000

080011d0 <filterGetRollAngle>:
#include "filter.h"

static Filter_Handler hfilter;

float filterGetRollAngle()
{
 80011d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011d4:	b08e      	sub	sp, #56	@ 0x38
 80011d6:	af00      	add	r7, sp, #0
	Acc_Handler acc;
	Gyro_Handler gyro;

	float roll_angle_total = 0, roll_gyro = 0, roll_acc = 0;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float dt_ms = HAL_GetTick() - hfilter.timestamp;
 80011ea:	f001 fc23 	bl	8002a34 <HAL_GetTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a59      	ldr	r2, [pc, #356]	@ (8001358 <filterGetRollAngle+0x188>)
 80011f2:	8892      	ldrh	r2, [r2, #4]
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fd44 	bl	8000c84 <__aeabi_ui2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	hfilter.timestamp = HAL_GetTick();
 8001200:	f001 fc18 	bl	8002a34 <HAL_GetTick>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <filterGetRollAngle+0x188>)
 800120a:	809a      	strh	r2, [r3, #4]

	mpu6050GetGyro(&gyro);
 800120c:	463b      	mov	r3, r7
 800120e:	4618      	mov	r0, r3
 8001210:	f000 ff68 	bl	80020e4 <mpu6050GetGyro>
	mpu6050GetAcc(&acc);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f000 ff21 	bl	8002060 <mpu6050GetAcc>

	//Apply Low-Pass filter for the Accelerometer
	filterLpAcc(&acc);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f8a0 	bl	8001368 <filterLpAcc>

	//Apply High-Pass filter for the Gyroscope
	filterHpGyro(&gyro);
 8001228:	463b      	mov	r3, r7
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f904 	bl	8001438 <filterHpGyro>

	//Combine both inputs giving 97% weight to gyro according to literature
	roll_gyro = gyro.filtered_y*dt_ms/1000;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd7d 	bl	8000d34 <__aeabi_fmul>
 800123a:	4603      	mov	r3, r0
 800123c:	4947      	ldr	r1, [pc, #284]	@ (800135c <filterGetRollAngle+0x18c>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fe2c 	bl	8000e9c <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	633b      	str	r3, [r7, #48]	@ 0x30
	roll_acc = (180*(atan(acc.filtered_x / sqrt(pow(acc.filtered_y, 2) + pow(acc.filtered_z,2)))))/PI;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f8ec 	bl	8000428 <__aeabi_f2d>
 8001250:	4604      	mov	r4, r0
 8001252:	460d      	mov	r5, r1
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8e6 	bl	8000428 <__aeabi_f2d>
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001264:	f008 ff2e 	bl	800a0c4 <pow>
 8001268:	4680      	mov	r8, r0
 800126a:	4689      	mov	r9, r1
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8da 	bl	8000428 <__aeabi_f2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800127c:	f008 ff22 	bl	800a0c4 <pow>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4640      	mov	r0, r8
 8001286:	4649      	mov	r1, r9
 8001288:	f7fe ff70 	bl	800016c <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f008 ff7e 	bl	800a194 <sqrt>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff fa44 	bl	800072c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f008 ff98 	bl	800a1e0 <atan>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <filterGetRollAngle+0x190>)
 80012b6:	f7ff f90f 	bl	80004d8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001340 <filterGetRollAngle+0x170>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff fa30 	bl	800072c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fbd0 	bl	8000a78 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c

	roll_angle_total = (ALPHA * (hfilter.last_roll_angle + roll_gyro) + (1-ALPHA)*roll_acc);
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <filterGetRollAngle+0x188>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fc1e 	bl	8000b24 <__addsf3>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f89c 	bl	8000428 <__aeabi_f2d>
 80012f0:	a315      	add	r3, pc, #84	@ (adr r3, 8001348 <filterGetRollAngle+0x178>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f8ef 	bl	80004d8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4614      	mov	r4, r2
 8001300:	461d      	mov	r5, r3
 8001302:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001304:	f7ff f890 	bl	8000428 <__aeabi_f2d>
 8001308:	a311      	add	r3, pc, #68	@ (adr r3, 8001350 <filterGetRollAngle+0x180>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f8e3 	bl	80004d8 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ff27 	bl	800016c <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fba7 	bl	8000a78 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
	hfilter.last_roll_angle = roll_angle_total;
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <filterGetRollAngle+0x188>)
 8001330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001332:	6013      	str	r3, [r2, #0]

	return roll_angle_total;
 8001334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001336:	4618      	mov	r0, r3
 8001338:	3738      	adds	r7, #56	@ 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001340:	54524550 	.word	0x54524550
 8001344:	400921fb 	.word	0x400921fb
 8001348:	cccccccd 	.word	0xcccccccd
 800134c:	3feccccc 	.word	0x3feccccc
 8001350:	99999998 	.word	0x99999998
 8001354:	3fb99999 	.word	0x3fb99999
 8001358:	20000284 	.word	0x20000284
 800135c:	447a0000 	.word	0x447a0000
 8001360:	40668000 	.word	0x40668000
 8001364:	00000000 	.word	0x00000000

08001368 <filterLpAcc>:

void filterLpAcc(Acc_Handler* acc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	acc->filtered_x = (float)((acc->raw_x * G) / 8192);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f844 	bl	8000404 <__aeabi_i2d>
 800137c:	a32a      	add	r3, pc, #168	@ (adr r3, 8001428 <filterLpAcc+0xc0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f8a9 	bl	80004d8 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <filterLpAcc+0xc8>)
 8001394:	f7ff f9ca 	bl	800072c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb6a 	bl	8000a78 <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	609a      	str	r2, [r3, #8]
	acc->filtered_y = (float)((acc->raw_y * G) / 8192);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f827 	bl	8000404 <__aeabi_i2d>
 80013b6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001428 <filterLpAcc+0xc0>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f88c 	bl	80004d8 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <filterLpAcc+0xc8>)
 80013ce:	f7ff f9ad 	bl	800072c <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb4d 	bl	8000a78 <__aeabi_d2f>
 80013de:	4602      	mov	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]
	acc->filtered_z = (float)((acc->raw_z * G) / 8192);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f80a 	bl	8000404 <__aeabi_i2d>
 80013f0:	a30d      	add	r3, pc, #52	@ (adr r3, 8001428 <filterLpAcc+0xc0>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f86f 	bl	80004d8 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <filterLpAcc+0xc8>)
 8001408:	f7ff f990 	bl	800072c <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fb30 	bl	8000a78 <__aeabi_d2f>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	51eb851f 	.word	0x51eb851f
 800142c:	40239eb8 	.word	0x40239eb8
 8001430:	40c00000 	.word	0x40c00000
 8001434:	00000000 	.word	0x00000000

08001438 <filterHpGyro>:

void filterHpGyro(Gyro_Handler* gyro)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	gyro->filtered_x = (float)(gyro->raw_x / 65.5);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffdc 	bl	8000404 <__aeabi_i2d>
 800144c:	a31c      	add	r3, pc, #112	@ (adr r3, 80014c0 <filterHpGyro+0x88>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f96b 	bl	800072c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fb0b 	bl	8000a78 <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
	gyro->filtered_y = (float)(gyro->raw_y / 65.5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ffc8 	bl	8000404 <__aeabi_i2d>
 8001474:	a312      	add	r3, pc, #72	@ (adr r3, 80014c0 <filterHpGyro+0x88>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f957 	bl	800072c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff faf7 	bl	8000a78 <__aeabi_d2f>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	60da      	str	r2, [r3, #12]
	gyro->filtered_z = (float)(gyro->raw_z / 65.5);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffb4 	bl	8000404 <__aeabi_i2d>
 800149c:	a308      	add	r3, pc, #32	@ (adr r3, 80014c0 <filterHpGyro+0x88>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f943 	bl	800072c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fae3 	bl	8000a78 <__aeabi_d2f>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	611a      	str	r2, [r3, #16]
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	00000000 	.word	0x00000000
 80014c4:	40506000 	.word	0x40506000

080014c8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	handler_adc.convCompleted = true;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_ADC_ConvCpltCallback+0x18>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000274 	.word	0x20000274

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e8:	f001 fa4c 	bl	8002984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 f856 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f000 f9f0 	bl	80018d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f4:	f000 f9d0 	bl	8001898 <MX_DMA_Init>
  MX_I2C1_Init();
 80014f8:	f000 f8fc 	bl	80016f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014fc:	f000 f9a2 	bl	8001844 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001500:	f000 f926 	bl	8001750 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001504:	f000 f89a 	bl	800163c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Send Hello message to UART to test transmission
  if(HAL_UART_Transmit(&huart1, (uint8_t*)hello_msg, strlen(hello_msg), HAL_MAX_DELAY) != HAL_OK)
 8001508:	4822      	ldr	r0, [pc, #136]	@ (8001594 <main+0xb0>)
 800150a:	f7fe fe21 	bl	8000150 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	491f      	ldr	r1, [pc, #124]	@ (8001594 <main+0xb0>)
 8001518:	481f      	ldr	r0, [pc, #124]	@ (8001598 <main+0xb4>)
 800151a:	f004 ff6d 	bl	80063f8 <HAL_UART_Transmit>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <main+0x44>
  {
	  Error_Handler();
 8001524:	f000 fae6 	bl	8001af4 <Error_Handler>
  }

  //Init IMU
  HAL_Delay(500);
 8001528:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800152c:	f001 fa8c 	bl	8002a48 <HAL_Delay>
  if(!mpu6050Init()) Error_Handler();
 8001530:	f000 fc42 	bl	8001db8 <mpu6050Init>
 8001534:	4603      	mov	r3, r0
 8001536:	f083 0301 	eor.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <main+0x60>
 8001540:	f000 fad8 	bl	8001af4 <Error_Handler>

  //Init both motors
  if(!motorInit()) Error_Handler();
 8001544:	f000 fadc 	bl	8001b00 <motorInit>
 8001548:	4603      	mov	r3, r0
 800154a:	f083 0301 	eor.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <main+0x74>
 8001554:	f000 face 	bl	8001af4 <Error_Handler>

  //Init PID controller
  if(!pidInit(1, 0, 0)) Error_Handler();
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001564:	f000 fe00 	bl	8002168 <pidInit>
 8001568:	4603      	mov	r3, r0
 800156a:	f083 0301 	eor.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <main+0x94>
 8001574:	f000 fabe 	bl	8001af4 <Error_Handler>

  //Init ADC
  if(!adcInit()) Error_Handler();
 8001578:	f7ff fe14 	bl	80011a4 <adcInit>
 800157c:	4603      	mov	r3, r0
 800157e:	f083 0301 	eor.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <main+0xa8>
 8001588:	f000 fab4 	bl	8001af4 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	motorProcess();
 800158c:	f000 fb8e 	bl	8001cac <motorProcess>
 8001590:	e7fc      	b.n	800158c <main+0xa8>
 8001592:	bf00      	nop
 8001594:	20000000 	.word	0x20000000
 8001598:	2000039c 	.word	0x2000039c

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	@ 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a6:	2228      	movs	r2, #40	@ 0x28
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f006 fd01 	bl	8007fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d4:	2310      	movs	r3, #16
 80015d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fdd3 	bl	800518c <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015ec:	f000 fa82 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f004 f840 	bl	8005690 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001616:	f000 fa6d 	bl	8001af4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800161a:	2302      	movs	r3, #2
 800161c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f004 f9c1 	bl	80059ac <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001630:	f000 fa60 	bl	8001af4 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3750      	adds	r7, #80	@ 0x50
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800164c:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <MX_ADC1_Init+0xb0>)
 800164e:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <MX_ADC1_Init+0xb4>)
 8001650:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <MX_ADC1_Init+0xb0>)
 8001654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <MX_ADC1_Init+0xb0>)
 800165c:	2201      	movs	r2, #1
 800165e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_ADC1_Init+0xb0>)
 8001662:	2200      	movs	r2, #0
 8001664:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_ADC1_Init+0xb0>)
 8001668:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800166c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_ADC1_Init+0xb0>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_ADC1_Init+0xb0>)
 8001676:	2203      	movs	r2, #3
 8001678:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800167a:	481c      	ldr	r0, [pc, #112]	@ (80016ec <MX_ADC1_Init+0xb0>)
 800167c:	f001 fa08 	bl	8002a90 <HAL_ADC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001686:	f000 fa35 	bl	8001af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800168e:	2301      	movs	r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001692:	2307      	movs	r3, #7
 8001694:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4814      	ldr	r0, [pc, #80]	@ (80016ec <MX_ADC1_Init+0xb0>)
 800169c:	f001 fc88 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f000 fa25 	bl	8001af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_ADC1_Init+0xb0>)
 80016b8:	f001 fc7a 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80016c2:	f000 fa17 	bl	8001af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016ca:	2303      	movs	r3, #3
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <MX_ADC1_Init+0xb0>)
 80016d4:	f001 fc6c 	bl	8002fb0 <HAL_ADC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80016de:	f000 fa09 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000028c 	.word	0x2000028c
 80016f0:	40012400 	.word	0x40012400

080016f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f002 fba3 	bl	8003e7c <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 f9da 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000300 	.word	0x20000300
 8001748:	40005400 	.word	0x40005400
 800174c:	000186a0 	.word	0x000186a0

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]
 8001770:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001772:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001774:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001778:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <MX_TIM2_Init+0xf0>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001786:	4b2e      	ldr	r3, [pc, #184]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800178c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800179a:	4829      	ldr	r0, [pc, #164]	@ (8001840 <MX_TIM2_Init+0xf0>)
 800179c:	f004 f9bc 	bl	8005b18 <HAL_TIM_PWM_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017a6:	f000 f9a5 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	4619      	mov	r1, r3
 80017b8:	4821      	ldr	r0, [pc, #132]	@ (8001840 <MX_TIM2_Init+0xf0>)
 80017ba:	f004 fd6f 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017c4:	f000 f996 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c8:	2360      	movs	r3, #96	@ 0x60
 80017ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4818      	ldr	r0, [pc, #96]	@ (8001840 <MX_TIM2_Init+0xf0>)
 80017e0:	f004 fa8c 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017ea:	f000 f983 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2204      	movs	r2, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4812      	ldr	r0, [pc, #72]	@ (8001840 <MX_TIM2_Init+0xf0>)
 80017f6:	f004 fa81 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001800:	f000 f978 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2208      	movs	r2, #8
 8001808:	4619      	mov	r1, r3
 800180a:	480d      	ldr	r0, [pc, #52]	@ (8001840 <MX_TIM2_Init+0xf0>)
 800180c:	f004 fa76 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001816:	f000 f96d 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	220c      	movs	r2, #12
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001822:	f004 fa6b 	bl	8005cfc <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800182c:	f000 f962 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <MX_TIM2_Init+0xf0>)
 8001832:	f000 fead 	bl	8002590 <HAL_TIM_MspPostInit>

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000354 	.word	0x20000354

08001844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f004 fd6c 	bl	8006358 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 f935 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000039c 	.word	0x2000039c
 8001894:	40013800 	.word	0x40013800

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <MX_DMA_Init+0x38>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <MX_DMA_Init+0x38>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6153      	str	r3, [r2, #20]
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <MX_DMA_Init+0x38>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	200b      	movs	r0, #11
 80018bc:	f001 fe51 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018c0:	200b      	movs	r0, #11
 80018c2:	f001 fe6a 	bl	800359a <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <MX_GPIO_Init+0xbc>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a28      	ldr	r2, [pc, #160]	@ (8001990 <MX_GPIO_Init+0xbc>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <MX_GPIO_Init+0xbc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a22      	ldr	r2, [pc, #136]	@ (8001990 <MX_GPIO_Init+0xbc>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <MX_GPIO_Init+0xbc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800191e:	481d      	ldr	r0, [pc, #116]	@ (8001994 <MX_GPIO_Init+0xc0>)
 8001920:	f002 fa7c 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_IRQ_Pin */
  GPIO_InitStruct.Pin = BUTTON_IRQ_Pin;
 8001924:	2308      	movs	r3, #8
 8001926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <MX_GPIO_Init+0xc4>)
 800192a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4619      	mov	r1, r3
 8001936:	4817      	ldr	r0, [pc, #92]	@ (8001994 <MX_GPIO_Init+0xc0>)
 8001938:	f002 f8ec 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 800193c:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8001940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001946:	2302      	movs	r3, #2
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4619      	mov	r1, r3
 8001954:	480f      	ldr	r0, [pc, #60]	@ (8001994 <MX_GPIO_Init+0xc0>)
 8001956:	f002 f8dd 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800195e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2302      	movs	r3, #2
 800196a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4619      	mov	r1, r3
 8001972:	4808      	ldr	r0, [pc, #32]	@ (8001994 <MX_GPIO_Init+0xc0>)
 8001974:	f002 f8ce 	bl	8003b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	2009      	movs	r0, #9
 800197e:	f001 fdf0 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001982:	2009      	movs	r0, #9
 8001984:	f001 fe09 	bl	800359a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40010800 	.word	0x40010800
 8001998:	10210000 	.word	0x10210000

0800199c <read_pid_value>:

/* USER CODE BEGIN 4 */
void read_pid_value(float* value)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(float)], rx_char, counter = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
	while(huart1.RxState == HAL_UART_STATE_BUSY_RX);
 80019a8:	bf00      	nop
 80019aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <read_pid_value+0x88>)
 80019ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b22      	cmp	r3, #34	@ 0x22
 80019b4:	d0f9      	beq.n	80019aa <read_pid_value+0xe>
	while(1)
	{
		if(HAL_UART_Receive(&huart1, &rx_char, sizeof(uint8_t), HAL_MAX_DELAY) != HAL_OK)
 80019b6:	f107 010f 	add.w	r1, r7, #15
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2201      	movs	r2, #1
 80019c0:	4818      	ldr	r0, [pc, #96]	@ (8001a24 <read_pid_value+0x88>)
 80019c2:	f004 fd9c 	bl	80064fe <HAL_UART_Receive>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <read_pid_value+0x34>
		{
			Error_Handler();
 80019cc:	f000 f892 	bl	8001af4 <Error_Handler>
		}
		if(rx_char == '\n' || rx_char == '\r')
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	2b0a      	cmp	r3, #10
 80019d4:	d002      	beq.n	80019dc <read_pid_value+0x40>
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b0d      	cmp	r3, #13
 80019da:	d109      	bne.n	80019f0 <read_pid_value+0x54>
		{
			*value = strtof((char*)buffer, NULL);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f006 f968 	bl	8007cb8 <strtof>
 80019e8:	4602      	mov	r2, r0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
			break;
 80019ee:	e015      	b.n	8001a1c <read_pid_value+0x80>
		}
		if(HAL_UART_Transmit(&huart1, &rx_char, sizeof(uint8_t), HAL_MAX_DELAY) != HAL_OK)
 80019f0:	f107 010f 	add.w	r1, r7, #15
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	2201      	movs	r2, #1
 80019fa:	480a      	ldr	r0, [pc, #40]	@ (8001a24 <read_pid_value+0x88>)
 80019fc:	f004 fcfc 	bl	80063f8 <HAL_UART_Transmit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <read_pid_value+0x6e>
		{
		  Error_Handler();
 8001a06:	f000 f875 	bl	8001af4 <Error_Handler>
		}
		buffer[counter++] = rx_char;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	75fa      	strb	r2, [r7, #23]
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	3318      	adds	r3, #24
 8001a14:	443b      	add	r3, r7
 8001a16:	f803 2c08 	strb.w	r2, [r3, #-8]
		if(HAL_UART_Receive(&huart1, &rx_char, sizeof(uint8_t), HAL_MAX_DELAY) != HAL_OK)
 8001a1a:	e7cc      	b.n	80019b6 <read_pid_value+0x1a>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000039c 	.word	0x2000039c

08001a28 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	while(huart1.gState == HAL_UART_STATE_BUSY_TX);
 8001a32:	bf00      	nop
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b21      	cmp	r3, #33	@ 0x21
 8001a3e:	d0f9      	beq.n	8001a34 <HAL_GPIO_EXTI_Callback+0xc>
	if(HAL_UART_Transmit(&huart1, (uint8_t*)pid_p_msg, strlen(pid_p_msg), HAL_MAX_DELAY) != HAL_OK)
 8001a40:	4829      	ldr	r0, [pc, #164]	@ (8001ae8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001a42:	f7fe fb85 	bl	8000150 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	4926      	ldr	r1, [pc, #152]	@ (8001ae8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001a50:	4824      	ldr	r0, [pc, #144]	@ (8001ae4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a52:	f004 fcd1 	bl	80063f8 <HAL_UART_Transmit>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_GPIO_EXTI_Callback+0x38>
	{
	  Error_Handler();
 8001a5c:	f000 f84a 	bl	8001af4 <Error_Handler>
	}
	float p = 0, i = 0, d = 0;
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
	read_pid_value(&p);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff90 	bl	800199c <read_pid_value>

	if(HAL_UART_Transmit(&huart1, (uint8_t*)pid_i_msg, strlen(pid_i_msg), HAL_MAX_DELAY) != HAL_OK)
 8001a7c:	481b      	ldr	r0, [pc, #108]	@ (8001aec <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a7e:	f7fe fb67 	bl	8000150 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	4918      	ldr	r1, [pc, #96]	@ (8001aec <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a8c:	4815      	ldr	r0, [pc, #84]	@ (8001ae4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a8e:	f004 fcb3 	bl	80063f8 <HAL_UART_Transmit>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_GPIO_EXTI_Callback+0x74>
	{
	  Error_Handler();
 8001a98:	f000 f82c 	bl	8001af4 <Error_Handler>
	}
	read_pid_value(&i);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff7b 	bl	800199c <read_pid_value>
	if(HAL_UART_Transmit(&huart1, (uint8_t*)pid_d_msg, strlen(pid_d_msg), HAL_MAX_DELAY) != HAL_OK)
 8001aa6:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001aa8:	f7fe fb52 	bl	8000150 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	490e      	ldr	r1, [pc, #56]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001ab6:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ab8:	f004 fc9e 	bl	80063f8 <HAL_UART_Transmit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_GPIO_EXTI_Callback+0x9e>
	{
	  Error_Handler();
 8001ac2:	f000 f817 	bl	8001af4 <Error_Handler>
	}
	read_pid_value(&d);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff66 	bl	800199c <read_pid_value>

	pidInit(p, i, d);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	6939      	ldr	r1, [r7, #16]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fb46 	bl	8002168 <pidInit>
}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000039c 	.word	0x2000039c
 8001ae8:	20000020 	.word	0x20000020
 8001aec:	2000003c 	.word	0x2000003c
 8001af0:	20000058 	.word	0x20000058

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <motorInit>:

extern TIM_HandleTypeDef htim2;
extern Pid_Handler hpid;

bool motorInit()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	return HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1)
 8001b04:	2100      	movs	r1, #0
 8001b06:	4811      	ldr	r0, [pc, #68]	@ (8001b4c <motorInit+0x4c>)
 8001b08:	f004 f856 	bl	8005bb8 <HAL_TIM_PWM_Start>
 8001b0c:	4603      	mov	r3, r0
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2)
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3)
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d116      	bne.n	8001b40 <motorInit+0x40>
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2)
 8001b12:	2104      	movs	r1, #4
 8001b14:	480d      	ldr	r0, [pc, #52]	@ (8001b4c <motorInit+0x4c>)
 8001b16:	f004 f84f 	bl	8005bb8 <HAL_TIM_PWM_Start>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10f      	bne.n	8001b40 <motorInit+0x40>
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3)
 8001b20:	2108      	movs	r1, #8
 8001b22:	480a      	ldr	r0, [pc, #40]	@ (8001b4c <motorInit+0x4c>)
 8001b24:	f004 f848 	bl	8005bb8 <HAL_TIM_PWM_Start>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d108      	bne.n	8001b40 <motorInit+0x40>
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001b2e:	210c      	movs	r1, #12
 8001b30:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <motorInit+0x4c>)
 8001b32:	f004 f841 	bl	8005bb8 <HAL_TIM_PWM_Start>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <motorInit+0x40>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <motorInit+0x42>
 8001b40:	2300      	movs	r3, #0
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000354 	.word	0x20000354

08001b50 <motorRequestMovementSpeed>:
	}
	HAL_Delay(2000);
}

void motorRequestMovementSpeed(int8_t speed, uint8_t motor)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
	uint8_t abs_speed = abs(speed);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bfb8      	it	lt
 8001b68:	425b      	neglt	r3, r3
 8001b6a:	73fb      	strb	r3, [r7, #15]
	uint32_t ccr_value = (abs_speed * htim2.Init.Period)/100;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca8 <motorRequestMovementSpeed+0x158>)
 8001b78:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	60bb      	str	r3, [r7, #8]
	switch(motor)
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d04d      	beq.n	8001c22 <motorRequestMovementSpeed+0xd2>
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	f300 8086 	bgt.w	8001c98 <motorRequestMovementSpeed+0x148>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <motorRequestMovementSpeed+0x46>
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d023      	beq.n	8001bdc <motorRequestMovementSpeed+0x8c>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
			}
	}
}
 8001b94:	e080      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
			if(speed >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db08      	blt.n	8001bb0 <motorRequestMovementSpeed+0x60>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8001b9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001bae:	e073      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
			}else if(speed <= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	dc08      	bgt.n	8001bca <motorRequestMovementSpeed+0x7a>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8001bc0:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001bc8:	e066      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001bda:	e05d      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
			if(speed >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db08      	blt.n	8001bf6 <motorRequestMovementSpeed+0xa6>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ccr_value);
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001bec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001bf4:	e050      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
			}else if(speed <= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	dc08      	bgt.n	8001c10 <motorRequestMovementSpeed+0xc0>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001bfe:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ccr_value);
 8001c06:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001c0e:	e043      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001c20:	e03a      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
			if(speed >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db10      	blt.n	8001c4c <motorRequestMovementSpeed+0xfc>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ccr_value);
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001c42:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c4a:	e025      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
			}else if(speed <= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dc10      	bgt.n	8001c76 <motorRequestMovementSpeed+0x126>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8001c54:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, ccr_value);
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c74:	e010      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <motorRequestMovementSpeed+0x154>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c96:	e7ff      	b.n	8001c98 <motorRequestMovementSpeed+0x148>
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000354 	.word	0x20000354
 8001ca8:	51eb851f 	.word	0x51eb851f

08001cac <motorProcess>:

void motorProcess()
{
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b09e      	sub	sp, #120	@ 0x78
 8001cb0:	af02      	add	r7, sp, #8
	char msg[100];
	pidApply();
 8001cb2:	f000 fa71 	bl	8002198 <pidApply>
	float pid_perc = (hpid.output * (100 - MIN_PWM)) / PID_MAX;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <motorProcess+0xf8>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	493b      	ldr	r1, [pc, #236]	@ (8001da8 <motorProcess+0xfc>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f839 	bl	8000d34 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4939      	ldr	r1, [pc, #228]	@ (8001dac <motorProcess+0x100>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f8e8 	bl	8000e9c <__aeabi_fdiv>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int8_t sign = (pid_perc < 0) ? -1 : 1;
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001cd6:	f7ff f9cb 	bl	8001070 <__aeabi_fcmplt>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <motorProcess+0x3a>
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	e000      	b.n	8001ce8 <motorProcess+0x3c>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	int8_t speed_pid_output = abs(pid_perc) < 0.001 ? (sign*MIN_PWM) : (int8_t)pid_perc + (sign*MIN_PWM);
 8001cec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001cee:	f7ff f9fd 	bl	80010ec <__aeabi_f2iz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db05      	blt.n	8001d04 <motorProcess+0x58>
 8001cf8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001cfa:	f7ff f9f7 	bl	80010ec <__aeabi_f2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dd05      	ble.n	8001d10 <motorProcess+0x64>
 8001d04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001d06:	f7ff f9f1 	bl	80010ec <__aeabi_f2iz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	e000      	b.n	8001d12 <motorProcess+0x66>
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
	if(hpid.change)
 8001d16:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <motorProcess+0xf8>)
 8001d18:	7f1b      	ldrb	r3, [r3, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d037      	beq.n	8001d8e <motorProcess+0xe2>
	{
		sprintf(msg, "Angle : %d               speed output : %d              Time : %ld \n\r", (int16_t)(100*hpid.last_error), speed_pid_output, (uint32_t)HAL_GetTick());
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <motorProcess+0xf8>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4921      	ldr	r1, [pc, #132]	@ (8001da8 <motorProcess+0xfc>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f805 	bl	8000d34 <__aeabi_fmul>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f9dd 	bl	80010ec <__aeabi_f2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	461d      	mov	r5, r3
 8001d38:	f997 406a 	ldrsb.w	r4, [r7, #106]	@ 0x6a
 8001d3c:	f000 fe7a 	bl	8002a34 <HAL_GetTick>
 8001d40:	4603      	mov	r3, r0
 8001d42:	1d38      	adds	r0, r7, #4
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4623      	mov	r3, r4
 8001d48:	462a      	mov	r2, r5
 8001d4a:	4919      	ldr	r1, [pc, #100]	@ (8001db0 <motorProcess+0x104>)
 8001d4c:	f006 f8ce 	bl	8007eec <siprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
		__disable_irq();
		if(HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe f9fa 	bl	8000150 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	1d39      	adds	r1, r7, #4
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	4813      	ldr	r0, [pc, #76]	@ (8001db4 <motorProcess+0x108>)
 8001d68:	f004 fb46 	bl	80063f8 <HAL_UART_Transmit>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <motorProcess+0xca>
		{
			Error_Handler();
 8001d72:	f7ff febf 	bl	8001af4 <Error_Handler>
		}
		while(huart1.gState == HAL_UART_STATE_BUSY_TX);
 8001d76:	bf00      	nop
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <motorProcess+0x108>)
 8001d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b21      	cmp	r3, #33	@ 0x21
 8001d82:	d0f9      	beq.n	8001d78 <motorProcess+0xcc>
		hpid.change = false;
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <motorProcess+0xf8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	771a      	strb	r2, [r3, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d8a:	b662      	cpsie	i
}
 8001d8c:	bf00      	nop
		__enable_irq();
	}
	motorRequestMovementSpeed(speed_pid_output, BOTH);
 8001d8e:	f997 306a 	ldrsb.w	r3, [r7, #106]	@ 0x6a
 8001d92:	2102      	movs	r1, #2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fedb 	bl	8001b50 <motorRequestMovementSpeed>
}
 8001d9a:	bf00      	nop
 8001d9c:	3770      	adds	r7, #112	@ 0x70
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bdb0      	pop	{r4, r5, r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200003e4 	.word	0x200003e4
 8001da8:	42c80000 	.word	0x42c80000
 8001dac:	41200000 	.word	0x41200000
 8001db0:	0800b268 	.word	0x0800b268
 8001db4:	2000039c 	.word	0x2000039c

08001db8 <mpu6050Init>:
 */

#include "mpu6050.h"

bool mpu6050Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0b8      	sub	sp, #224	@ 0xe0
 8001dbc:	af04      	add	r7, sp, #16
	//Check if device is ready
	char msg[200];
	uint8_t reg_buff = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, HAL_MAX_DELAY) != HAL_OK)
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	21d0      	movs	r1, #208	@ 0xd0
 8001dca:	48a0      	ldr	r0, [pc, #640]	@ (800204c <mpu6050Init+0x294>)
 8001dcc:	f002 fcfc 	bl	80047c8 <HAL_I2C_IsDeviceReady>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <mpu6050Init+0x22>
	{
		return false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e133      	b.n	8002042 <mpu6050Init+0x28a>
	}
	//RESET MODULE
	reg_buff = 0x1<<7;
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	2301      	movs	r3, #1
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	226b      	movs	r2, #107	@ 0x6b
 8001df0:	21d0      	movs	r1, #208	@ 0xd0
 8001df2:	4896      	ldr	r0, [pc, #600]	@ (800204c <mpu6050Init+0x294>)
 8001df4:	f002 f986 	bl	8004104 <HAL_I2C_Mem_Write>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <mpu6050Init+0x4a>
	{
		return false;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e11f      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001e02:	2032      	movs	r0, #50	@ 0x32
 8001e04:	f000 fe20 	bl	8002a48 <HAL_Delay>

	//Remove from SLEEP MODE
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, 0, 1, HAL_MAX_DELAY) != HAL_OK)
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0c:	9302      	str	r3, [sp, #8]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	226b      	movs	r2, #107	@ 0x6b
 8001e1a:	21d0      	movs	r1, #208	@ 0xd0
 8001e1c:	488b      	ldr	r0, [pc, #556]	@ (800204c <mpu6050Init+0x294>)
 8001e1e:	f002 f971 	bl	8004104 <HAL_I2C_Mem_Write>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <mpu6050Init+0x74>
	{
		return false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e10a      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001e2c:	2032      	movs	r0, #50	@ 0x32
 8001e2e:	f000 fe0b 	bl	8002a48 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2301      	movs	r3, #1
 8001e42:	226b      	movs	r2, #107	@ 0x6b
 8001e44:	21d0      	movs	r1, #208	@ 0xd0
 8001e46:	4881      	ldr	r0, [pc, #516]	@ (800204c <mpu6050Init+0x294>)
 8001e48:	f002 fa56 	bl	80042f8 <HAL_I2C_Mem_Read>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <mpu6050Init+0x9e>
	{
		return false;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e0f5      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001e56:	2032      	movs	r0, #50	@ 0x32
 8001e58:	f000 fdf6 	bl	8002a48 <HAL_Delay>

	//Accelerometer configuration
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2301      	movs	r3, #1
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	221c      	movs	r2, #28
 8001e6e:	21d0      	movs	r1, #208	@ 0xd0
 8001e70:	4876      	ldr	r0, [pc, #472]	@ (800204c <mpu6050Init+0x294>)
 8001e72:	f002 fa41 	bl	80042f8 <HAL_I2C_Mem_Read>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <mpu6050Init+0xc8>
	{
		return false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e0e0      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001e80:	2032      	movs	r0, #50	@ 0x32
 8001e82:	f000 fde1 	bl	8002a48 <HAL_Delay>
	reg_buff |= (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	f043 0308 	orr.w	r3, r3, #8
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	2301      	movs	r3, #1
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	1dfb      	adds	r3, r7, #7
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	221c      	movs	r2, #28
 8001ea2:	21d0      	movs	r1, #208	@ 0xd0
 8001ea4:	4869      	ldr	r0, [pc, #420]	@ (800204c <mpu6050Init+0x294>)
 8001ea6:	f002 f92d 	bl	8004104 <HAL_I2C_Mem_Write>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <mpu6050Init+0xfc>
	{
		return false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e0c6      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001eb4:	2032      	movs	r0, #50	@ 0x32
 8001eb6:	f000 fdc7 	bl	8002a48 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	221c      	movs	r2, #28
 8001ecc:	21d0      	movs	r1, #208	@ 0xd0
 8001ece:	485f      	ldr	r0, [pc, #380]	@ (800204c <mpu6050Init+0x294>)
 8001ed0:	f002 fa12 	bl	80042f8 <HAL_I2C_Mem_Read>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <mpu6050Init+0x126>
	{
		return false;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e0b1      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001ede:	2032      	movs	r0, #50	@ 0x32
 8001ee0:	f000 fdb2 	bl	8002a48 <HAL_Delay>
	if(reg_buff != (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL))
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d015      	beq.n	8001f16 <mpu6050Init+0x15e>
	{
		sprintf(msg,"MPU6050_ACCEL_CONFIG NOT SET CORRECTLY\n\r");
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4958      	ldr	r1, [pc, #352]	@ (8002050 <mpu6050Init+0x298>)
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 fffb 	bl	8007eec <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe f928 	bl	8000150 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	f107 0108 	add.w	r1, r7, #8
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	4851      	ldr	r0, [pc, #324]	@ (8002054 <mpu6050Init+0x29c>)
 8001f0e:	f004 fa73 	bl	80063f8 <HAL_UART_Transmit>
		return false;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e095      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001f16:	2032      	movs	r0, #50	@ 0x32
 8001f18:	f000 fd96 	bl	8002a48 <HAL_Delay>

	//Gyroscope configuration

	reg_buff = (MPU6050_FS_SEL_500HZ << MPU_6050_GYRO_CONFIG_FS_SEL);
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2301      	movs	r3, #1
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	221b      	movs	r2, #27
 8001f32:	21d0      	movs	r1, #208	@ 0xd0
 8001f34:	4845      	ldr	r0, [pc, #276]	@ (800204c <mpu6050Init+0x294>)
 8001f36:	f002 f8e5 	bl	8004104 <HAL_I2C_Mem_Write>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <mpu6050Init+0x18c>
	{
		return false;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e07e      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001f44:	2032      	movs	r0, #50	@ 0x32
 8001f46:	f000 fd7f 	bl	8002a48 <HAL_Delay>
	reg_buff = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	221b      	movs	r2, #27
 8001f60:	21d0      	movs	r1, #208	@ 0xd0
 8001f62:	483a      	ldr	r0, [pc, #232]	@ (800204c <mpu6050Init+0x294>)
 8001f64:	f002 f9c8 	bl	80042f8 <HAL_I2C_Mem_Read>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <mpu6050Init+0x1ba>
	{
		return false;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e067      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001f72:	2032      	movs	r0, #50	@ 0x32
 8001f74:	f000 fd68 	bl	8002a48 <HAL_Delay>
	if(reg_buff != (MPU6050_FS_SEL_500HZ << MPU_6050_GYRO_CONFIG_FS_SEL))
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d015      	beq.n	8001faa <mpu6050Init+0x1f2>
	{
		sprintf(msg,"MPU6050_GYRO_CONFIG NOT SET CORRECTLY\n\r");
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4935      	ldr	r1, [pc, #212]	@ (8002058 <mpu6050Init+0x2a0>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f005 ffb1 	bl	8007eec <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe f8de 	bl	8000150 <strlen>
 8001f94:	4603      	mov	r3, r0
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	f107 0108 	add.w	r1, r7, #8
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	482c      	ldr	r0, [pc, #176]	@ (8002054 <mpu6050Init+0x29c>)
 8001fa2:	f004 fa29 	bl	80063f8 <HAL_UART_Transmit>
		return false;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e04b      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001faa:	2032      	movs	r0, #50	@ 0x32
 8001fac:	f000 fd4c 	bl	8002a48 <HAL_Delay>
//		return false;
//	}
//	HAL_Delay(50);

	//DLPF configuration
	reg_buff = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	221a      	movs	r2, #26
 8001fc6:	21d0      	movs	r1, #208	@ 0xd0
 8001fc8:	4820      	ldr	r0, [pc, #128]	@ (800204c <mpu6050Init+0x294>)
 8001fca:	f002 f89b 	bl	8004104 <HAL_I2C_Mem_Write>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <mpu6050Init+0x220>
	{
		return false;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e034      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001fd8:	2032      	movs	r0, #50	@ 0x32
 8001fda:	f000 fd35 	bl	8002a48 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	221a      	movs	r2, #26
 8001ff0:	21d0      	movs	r1, #208	@ 0xd0
 8001ff2:	4816      	ldr	r0, [pc, #88]	@ (800204c <mpu6050Init+0x294>)
 8001ff4:	f002 f980 	bl	80042f8 <HAL_I2C_Mem_Read>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <mpu6050Init+0x24a>
	{
		return false;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e01f      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8002002:	2032      	movs	r0, #50	@ 0x32
 8002004:	f000 fd20 	bl	8002a48 <HAL_Delay>
	if(reg_buff != 0)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <mpu6050Init+0x282>
	{
		sprintf(msg,"MPU6050_CONFIG_REG NOT SET CORRECTLY\n\r");
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	4912      	ldr	r1, [pc, #72]	@ (800205c <mpu6050Init+0x2a4>)
 8002014:	4618      	mov	r0, r3
 8002016:	f005 ff69 	bl	8007eec <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe f896 	bl	8000150 <strlen>
 8002024:	4603      	mov	r3, r0
 8002026:	b29a      	uxth	r2, r3
 8002028:	f107 0108 	add.w	r1, r7, #8
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	4808      	ldr	r0, [pc, #32]	@ (8002054 <mpu6050Init+0x29c>)
 8002032:	f004 f9e1 	bl	80063f8 <HAL_UART_Transmit>
		return false;
 8002036:	2300      	movs	r3, #0
 8002038:	e003      	b.n	8002042 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 800203a:	2032      	movs	r0, #50	@ 0x32
 800203c:	f000 fd04 	bl	8002a48 <HAL_Delay>

	return true;
 8002040:	2301      	movs	r3, #1
}
 8002042:	4618      	mov	r0, r3
 8002044:	37d0      	adds	r7, #208	@ 0xd0
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000300 	.word	0x20000300
 8002050:	0800b2b0 	.word	0x0800b2b0
 8002054:	2000039c 	.word	0x2000039c
 8002058:	0800b2dc 	.word	0x0800b2dc
 800205c:	0800b304 	.word	0x0800b304

08002060 <mpu6050GetAcc>:

void mpu6050GetAcc(Acc_Handler* acc_buff)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af04      	add	r7, sp, #16
 8002066:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 8002068:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <mpu6050GetAcc+0x7c>)
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002072:	6018      	str	r0, [r3, #0]
 8002074:	3304      	adds	r3, #4
 8002076:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	2306      	movs	r3, #6
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2301      	movs	r3, #1
 800208a:	223b      	movs	r2, #59	@ 0x3b
 800208c:	21d0      	movs	r1, #208	@ 0xd0
 800208e:	4814      	ldr	r0, [pc, #80]	@ (80020e0 <mpu6050GetAcc+0x80>)
 8002090:	f002 f932 	bl	80042f8 <HAL_I2C_Mem_Read>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <mpu6050GetAcc+0x3e>
	{
		Error_Handler();
 800209a:	f7ff fd2b 	bl	8001af4 <Error_Handler>
	}

	acc_buff->raw_x = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 800209e:	7a3b      	ldrb	r3, [r7, #8]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	7a7b      	ldrb	r3, [r7, #9]
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	801a      	strh	r2, [r3, #0]
	acc_buff->raw_y = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 80020b0:	7abb      	ldrb	r3, [r7, #10]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b21a      	sxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	805a      	strh	r2, [r3, #2]
	acc_buff->raw_z = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 80020c2:	7b3b      	ldrb	r3, [r7, #12]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	7b7b      	ldrb	r3, [r7, #13]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	809a      	strh	r2, [r3, #4]
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800b32c 	.word	0x0800b32c
 80020e0:	20000300 	.word	0x20000300

080020e4 <mpu6050GetGyro>:

void mpu6050GetGyro(Gyro_Handler* gyro_buff)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 80020ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <mpu6050GetGyro+0x7c>)
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020f6:	6018      	str	r0, [r3, #0]
 80020f8:	3304      	adds	r3, #4
 80020fa:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	2306      	movs	r3, #6
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	2243      	movs	r2, #67	@ 0x43
 8002110:	21d0      	movs	r1, #208	@ 0xd0
 8002112:	4814      	ldr	r0, [pc, #80]	@ (8002164 <mpu6050GetGyro+0x80>)
 8002114:	f002 f8f0 	bl	80042f8 <HAL_I2C_Mem_Read>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <mpu6050GetGyro+0x3e>
	{
		Error_Handler();
 800211e:	f7ff fce9 	bl	8001af4 <Error_Handler>
	}

	gyro_buff->raw_x = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 8002122:	7a3b      	ldrb	r3, [r7, #8]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	b21a      	sxth	r2, r3
 8002128:	7a7b      	ldrb	r3, [r7, #9]
 800212a:	b21b      	sxth	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b21a      	sxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	801a      	strh	r2, [r3, #0]
	gyro_buff->raw_y = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	805a      	strh	r2, [r3, #2]
	gyro_buff->raw_z = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b21a      	sxth	r2, r3
 800214c:	7b7b      	ldrb	r3, [r7, #13]
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21a      	sxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	809a      	strh	r2, [r3, #4]
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0800b32c 	.word	0x0800b32c
 8002164:	20000300 	.word	0x20000300

08002168 <pidInit>:
#include "adc.h"

Pid_Handler hpid;

bool pidInit(float p, float i, float d)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	hpid.p_gain = p;
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <pidInit+0x2c>)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6013      	str	r3, [r2, #0]
	hpid.i_gain = i;
 800217a:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <pidInit+0x2c>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	6053      	str	r3, [r2, #4]
	hpid.d_gain = d;
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <pidInit+0x2c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6093      	str	r3, [r2, #8]

	return true;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	200003e4 	.word	0x200003e4

08002198 <pidApply>:

void pidApply()
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	uint32_t dt = HAL_GetTick() - hpid.timestamp;
 800219e:	f000 fc49 	bl	8002a34 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002354 <pidApply+0x1bc>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	607b      	str	r3, [r7, #4]
	hpid.change = false;
 80021ac:	4b69      	ldr	r3, [pc, #420]	@ (8002354 <pidApply+0x1bc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	771a      	strb	r2, [r3, #28]

	if(dt >= RESPONSE_TIME_MS)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b06      	cmp	r3, #6
 80021b6:	f240 80c9 	bls.w	800234c <pidApply+0x1b4>
	{
		float error = filterGetRollAngle();
 80021ba:	f7ff f809 	bl	80011d0 <filterGetRollAngle>
 80021be:	6038      	str	r0, [r7, #0]
		if(handler_adc.convCompleted)
 80021c0:	4b65      	ldr	r3, [pc, #404]	@ (8002358 <pidApply+0x1c0>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02c      	beq.n	8002222 <pidApply+0x8a>
		{
			hpid.p_gain = (float)handler_adc.raw_values[0] / 4095.0f;
 80021c8:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <pidApply+0x1c0>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fd59 	bl	8000c84 <__aeabi_ui2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4961      	ldr	r1, [pc, #388]	@ (800235c <pidApply+0x1c4>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fe60 	bl	8000e9c <__aeabi_fdiv>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002354 <pidApply+0x1bc>)
 80021e2:	601a      	str	r2, [r3, #0]
			hpid.i_gain = (float)handler_adc.raw_values[1] / 4095.0f;
 80021e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002358 <pidApply+0x1c0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fd4b 	bl	8000c84 <__aeabi_ui2f>
 80021ee:	4603      	mov	r3, r0
 80021f0:	495a      	ldr	r1, [pc, #360]	@ (800235c <pidApply+0x1c4>)
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fe52 	bl	8000e9c <__aeabi_fdiv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b55      	ldr	r3, [pc, #340]	@ (8002354 <pidApply+0x1bc>)
 80021fe:	605a      	str	r2, [r3, #4]
			hpid.d_gain = (float)handler_adc.raw_values[2] / 4095.0f;
 8002200:	4b55      	ldr	r3, [pc, #340]	@ (8002358 <pidApply+0x1c0>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fd3d 	bl	8000c84 <__aeabi_ui2f>
 800220a:	4603      	mov	r3, r0
 800220c:	4953      	ldr	r1, [pc, #332]	@ (800235c <pidApply+0x1c4>)
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fe44 	bl	8000e9c <__aeabi_fdiv>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <pidApply+0x1bc>)
 800221a:	609a      	str	r2, [r3, #8]

			handler_adc.convCompleted = false;
 800221c:	4b4e      	ldr	r3, [pc, #312]	@ (8002358 <pidApply+0x1c0>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
		}

		hpid.timestamp = HAL_GetTick();
 8002222:	f000 fc07 	bl	8002a34 <HAL_GetTick>
 8002226:	4603      	mov	r3, r0
 8002228:	4a4a      	ldr	r2, [pc, #296]	@ (8002354 <pidApply+0x1bc>)
 800222a:	6153      	str	r3, [r2, #20]

		hpid.error_sum += error;
 800222c:	4b49      	ldr	r3, [pc, #292]	@ (8002354 <pidApply+0x1bc>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fd2b 	bl	8000c8c <__aeabi_i2f>
 8002236:	4603      	mov	r3, r0
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fc72 	bl	8000b24 <__addsf3>
 8002240:	4603      	mov	r3, r0
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ff52 	bl	80010ec <__aeabi_f2iz>
 8002248:	4603      	mov	r3, r0
 800224a:	4a42      	ldr	r2, [pc, #264]	@ (8002354 <pidApply+0x1bc>)
 800224c:	6113      	str	r3, [r2, #16]

		if(hpid.error_sum >= INTEGRAL_GAIN_MAX) hpid.error_sum = INTEGRAL_GAIN_MAX;
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <pidApply+0x1bc>)
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002256:	4293      	cmp	r3, r2
 8002258:	dd03      	ble.n	8002262 <pidApply+0xca>
 800225a:	4b3e      	ldr	r3, [pc, #248]	@ (8002354 <pidApply+0x1bc>)
 800225c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002260:	611a      	str	r2, [r3, #16]

		if(hpid.error_sum <= -INTEGRAL_GAIN_MAX) hpid.error_sum = -INTEGRAL_GAIN_MAX;
 8002262:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <pidApply+0x1bc>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	4a3e      	ldr	r2, [pc, #248]	@ (8002360 <pidApply+0x1c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	da02      	bge.n	8002272 <pidApply+0xda>
 800226c:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <pidApply+0x1bc>)
 800226e:	4a3d      	ldr	r2, [pc, #244]	@ (8002364 <pidApply+0x1cc>)
 8002270:	611a      	str	r2, [r3, #16]

		hpid.output = (float)(hpid.p_gain * error
 8002272:	4b38      	ldr	r3, [pc, #224]	@ (8002354 <pidApply+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fd5b 	bl	8000d34 <__aeabi_fmul>
 800227e:	4603      	mov	r3, r0
 8002280:	461d      	mov	r5, r3
				+ (hpid.i_gain * hpid.error_sum * (float)dt / 1000)
 8002282:	4b34      	ldr	r3, [pc, #208]	@ (8002354 <pidApply+0x1bc>)
 8002284:	685c      	ldr	r4, [r3, #4]
 8002286:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <pidApply+0x1bc>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fcfe 	bl	8000c8c <__aeabi_i2f>
 8002290:	4603      	mov	r3, r0
 8002292:	4619      	mov	r1, r3
 8002294:	4620      	mov	r0, r4
 8002296:	f7fe fd4d 	bl	8000d34 <__aeabi_fmul>
 800229a:	4603      	mov	r3, r0
 800229c:	461c      	mov	r4, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fcf0 	bl	8000c84 <__aeabi_ui2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7fe fd43 	bl	8000d34 <__aeabi_fmul>
 80022ae:	4603      	mov	r3, r0
 80022b0:	492d      	ldr	r1, [pc, #180]	@ (8002368 <pidApply+0x1d0>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fdf2 	bl	8000e9c <__aeabi_fdiv>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4619      	mov	r1, r3
 80022bc:	4628      	mov	r0, r5
 80022be:	f7fe fc31 	bl	8000b24 <__addsf3>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461d      	mov	r5, r3
				- hpid.d_gain * (error - hpid.last_error) * 1000 / (float)dt);
 80022c6:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <pidApply+0x1bc>)
 80022c8:	689c      	ldr	r4, [r3, #8]
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <pidApply+0x1bc>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4619      	mov	r1, r3
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	f7fe fc25 	bl	8000b20 <__aeabi_fsub>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4619      	mov	r1, r3
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fe fd2a 	bl	8000d34 <__aeabi_fmul>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4921      	ldr	r1, [pc, #132]	@ (8002368 <pidApply+0x1d0>)
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fd25 	bl	8000d34 <__aeabi_fmul>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461c      	mov	r4, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fcc8 	bl	8000c84 <__aeabi_ui2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4619      	mov	r1, r3
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7fe fdcf 	bl	8000e9c <__aeabi_fdiv>
 80022fe:	4603      	mov	r3, r0
		hpid.output = (float)(hpid.p_gain * error
 8002300:	4619      	mov	r1, r3
 8002302:	4628      	mov	r0, r5
 8002304:	f7fe fc0c 	bl	8000b20 <__aeabi_fsub>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <pidApply+0x1bc>)
 800230e:	619a      	str	r2, [r3, #24]

		if(hpid.output >= PID_MAX) hpid.output = PID_MAX;
 8002310:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <pidApply+0x1bc>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4915      	ldr	r1, [pc, #84]	@ (800236c <pidApply+0x1d4>)
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe febe 	bl	8001098 <__aeabi_fcmpge>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <pidApply+0x190>
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <pidApply+0x1bc>)
 8002324:	4a11      	ldr	r2, [pc, #68]	@ (800236c <pidApply+0x1d4>)
 8002326:	619a      	str	r2, [r3, #24]

		if(hpid.output <= -PID_MAX) hpid.output = -PID_MAX;
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <pidApply+0x1bc>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4910      	ldr	r1, [pc, #64]	@ (8002370 <pidApply+0x1d8>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fea8 	bl	8001084 <__aeabi_fcmple>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <pidApply+0x1a8>
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <pidApply+0x1bc>)
 800233c:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <pidApply+0x1d8>)
 800233e:	619a      	str	r2, [r3, #24]

		hpid.last_error = error;
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <pidApply+0x1bc>)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	60d3      	str	r3, [r2, #12]
		hpid.change = true;
 8002346:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <pidApply+0x1bc>)
 8002348:	2201      	movs	r2, #1
 800234a:	771a      	strb	r2, [r3, #28]
	}
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bdb0      	pop	{r4, r5, r7, pc}
 8002354:	200003e4 	.word	0x200003e4
 8002358:	20000274 	.word	0x20000274
 800235c:	457ff000 	.word	0x457ff000
 8002360:	ffffec79 	.word	0xffffec79
 8002364:	ffffec78 	.word	0xffffec78
 8002368:	447a0000 	.word	0x447a0000
 800236c:	41200000 	.word	0x41200000
 8002370:	c1200000 	.word	0xc1200000

08002374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <HAL_MspInit+0x5c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4a14      	ldr	r2, [pc, #80]	@ (80023d0 <HAL_MspInit+0x5c>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6193      	str	r3, [r2, #24]
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_MspInit+0x5c>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <HAL_MspInit+0x5c>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a0e      	ldr	r2, [pc, #56]	@ (80023d0 <HAL_MspInit+0x5c>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <HAL_MspInit+0x5c>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_MspInit+0x60>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <HAL_MspInit+0x60>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010000 	.word	0x40010000

080023d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2c      	ldr	r2, [pc, #176]	@ (80024a4 <HAL_ADC_MspInit+0xcc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d151      	bne.n	800249c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_ADC_MspInit+0xd0>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a2a      	ldr	r2, [pc, #168]	@ (80024a8 <HAL_ADC_MspInit+0xd0>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <HAL_ADC_MspInit+0xd0>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HAL_ADC_MspInit+0xd0>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a24      	ldr	r2, [pc, #144]	@ (80024a8 <HAL_ADC_MspInit+0xd0>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <HAL_ADC_MspInit+0xd0>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002428:	2307      	movs	r3, #7
 800242a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242c:	2303      	movs	r3, #3
 800242e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4619      	mov	r1, r3
 8002436:	481d      	ldr	r0, [pc, #116]	@ (80024ac <HAL_ADC_MspInit+0xd4>)
 8002438:	f001 fb6c 	bl	8003b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800243c:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 800243e:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_ADC_MspInit+0xdc>)
 8002440:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002442:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800244e:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002454:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 800245e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002462:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002464:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002466:	2220      	movs	r2, #32
 8002468:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002470:	480f      	ldr	r0, [pc, #60]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002472:	f001 f8ad 	bl	80035d0 <HAL_DMA_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800247c:	f7ff fb3a 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0b      	ldr	r2, [pc, #44]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002484:	621a      	str	r2, [r3, #32]
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <HAL_ADC_MspInit+0xd8>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2101      	movs	r1, #1
 8002490:	2012      	movs	r0, #18
 8002492:	f001 f866 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002496:	2012      	movs	r0, #18
 8002498:	f001 f87f 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012400 	.word	0x40012400
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010800 	.word	0x40010800
 80024b0:	200002bc 	.word	0x200002bc
 80024b4:	40020008 	.word	0x40020008

080024b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002548 <HAL_I2C_MspInit+0x90>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d132      	bne.n	800253e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <HAL_I2C_MspInit+0x94>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	@ (800254c <HAL_I2C_MspInit+0x94>)
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_I2C_MspInit+0x94>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4812      	ldr	r0, [pc, #72]	@ (8002550 <HAL_I2C_MspInit+0x98>)
 8002506:	f001 fb05 	bl	8003b14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800250a:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_I2C_MspInit+0x9c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002520:	4a0c      	ldr	r2, [pc, #48]	@ (8002554 <HAL_I2C_MspInit+0x9c>)
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_I2C_MspInit+0x94>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a08      	ldr	r2, [pc, #32]	@ (800254c <HAL_I2C_MspInit+0x94>)
 800252c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_I2C_MspInit+0x94>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40005400 	.word	0x40005400
 800254c:	40021000 	.word	0x40021000
 8002550:	40010c00 	.word	0x40010c00
 8002554:	40010000 	.word	0x40010000

08002558 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002568:	d10b      	bne.n	8002582 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800256a:	4b08      	ldr	r3, [pc, #32]	@ (800258c <HAL_TIM_PWM_MspInit+0x34>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a07      	ldr	r2, [pc, #28]	@ (800258c <HAL_TIM_PWM_MspInit+0x34>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	61d3      	str	r3, [r2, #28]
 8002576:	4b05      	ldr	r3, [pc, #20]	@ (800258c <HAL_TIM_PWM_MspInit+0x34>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ae:	d143      	bne.n	8002638 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	4b23      	ldr	r3, [pc, #140]	@ (8002640 <HAL_TIM_MspPostInit+0xb0>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a22      	ldr	r2, [pc, #136]	@ (8002640 <HAL_TIM_MspPostInit+0xb0>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <HAL_TIM_MspPostInit+0xb0>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <HAL_TIM_MspPostInit+0xb0>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <HAL_TIM_MspPostInit+0xb0>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <HAL_TIM_MspPostInit+0xb0>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80025e0:	f640 4308 	movw	r3, #3080	@ 0xc08
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ea:	2302      	movs	r3, #2
 80025ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	4813      	ldr	r0, [pc, #76]	@ (8002644 <HAL_TIM_MspPostInit+0xb4>)
 80025f6:	f001 fa8d 	bl	8003b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2302      	movs	r3, #2
 8002606:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	480e      	ldr	r0, [pc, #56]	@ (8002648 <HAL_TIM_MspPostInit+0xb8>)
 8002610:	f001 fa80 	bl	8003b14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8002614:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_TIM_MspPostInit+0xbc>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
 8002632:	4a06      	ldr	r2, [pc, #24]	@ (800264c <HAL_TIM_MspPostInit+0xbc>)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	@ 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	40010c00 	.word	0x40010c00
 8002648:	40010800 	.word	0x40010800
 800264c:	40010000 	.word	0x40010000

08002650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	@ 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a22      	ldr	r2, [pc, #136]	@ (80026f4 <HAL_UART_MspInit+0xa4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d13d      	bne.n	80026ec <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <HAL_UART_MspInit+0xa8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a20      	ldr	r2, [pc, #128]	@ (80026f8 <HAL_UART_MspInit+0xa8>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <HAL_UART_MspInit+0xa8>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_UART_MspInit+0xa8>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a1a      	ldr	r2, [pc, #104]	@ (80026f8 <HAL_UART_MspInit+0xa8>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_UART_MspInit+0xa8>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026a0:	2340      	movs	r3, #64	@ 0x40
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	4812      	ldr	r0, [pc, #72]	@ (80026fc <HAL_UART_MspInit+0xac>)
 80026b4:	f001 fa2e 	bl	8003b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	480c      	ldr	r0, [pc, #48]	@ (80026fc <HAL_UART_MspInit+0xac>)
 80026cc:	f001 fa22 	bl	8003b14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <HAL_UART_MspInit+0xb0>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e6:	4a06      	ldr	r2, [pc, #24]	@ (8002700 <HAL_UART_MspInit+0xb0>)
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	@ 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	40010000 	.word	0x40010000

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <NMI_Handler+0x4>

0800270c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <HardFault_Handler+0x4>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <MemManage_Handler+0x4>

0800271c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <BusFault_Handler+0x4>

08002724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <UsageFault_Handler+0x4>

0800272c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002754:	f000 f95c 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}

0800275c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_IRQ_Pin);
 8002760:	2008      	movs	r0, #8
 8002762:	f001 fb73 	bl	8003e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <DMA1_Channel1_IRQHandler+0x10>)
 8002772:	f001 f89b 	bl	80038ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200002bc 	.word	0x200002bc

08002780 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <ADC1_2_IRQHandler+0x10>)
 8002786:	f000 fb39 	bl	8002dfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000028c 	.word	0x2000028c

08002794 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <USART1_IRQHandler+0x10>)
 800279a:	f003 ff43 	bl	8006624 <HAL_UART_IRQHandler>
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000039c 	.word	0x2000039c

080027a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return 1;
 80027ac:	2301      	movs	r3, #1
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <_kill>:

int _kill(int pid, int sig)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027c0:	f005 fc58 	bl	8008074 <__errno>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2216      	movs	r2, #22
 80027c8:	601a      	str	r2, [r3, #0]
  return -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_exit>:

void _exit (int status)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027de:	f04f 31ff 	mov.w	r1, #4294967295
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffe7 	bl	80027b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <_exit+0x12>

080027ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e00a      	b.n	8002814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027fe:	f3af 8000 	nop.w
 8002802:	4601      	mov	r1, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	dbf0      	blt.n	80027fe <_read+0x12>
  }

  return len;
 800281c:	687b      	ldr	r3, [r7, #4]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e009      	b.n	800284c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbf1      	blt.n	8002838 <_write+0x12>
  }
  return len;
 8002854:	687b      	ldr	r3, [r7, #4]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_close>:

int _close(int file)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002884:	605a      	str	r2, [r3, #4]
  return 0;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <_sbrk+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <_sbrk+0x60>)
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <_sbrk+0x64>)
 80028de:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <_sbrk+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e2:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f0:	f005 fbc0 	bl	8008074 <__errno>
 80028f4:	4603      	mov	r3, r0
 80028f6:	220c      	movs	r2, #12
 80028f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	e009      	b.n	8002914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002906:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <_sbrk+0x64>)
 8002910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20005000 	.word	0x20005000
 8002920:	00000400 	.word	0x00000400
 8002924:	20000404 	.word	0x20000404
 8002928:	20000558 	.word	0x20000558

0800292c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002938:	f7ff fff8 	bl	800292c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480b      	ldr	r0, [pc, #44]	@ (800296c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800293e:	490c      	ldr	r1, [pc, #48]	@ (8002970 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002940:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a09      	ldr	r2, [pc, #36]	@ (8002978 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002954:	4c09      	ldr	r4, [pc, #36]	@ (800297c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002962:	f005 fb8d 	bl	8008080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002966:	f7fe fdbd 	bl	80014e4 <main>
  bx lr
 800296a:	4770      	bx	lr
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002974:	0800b798 	.word	0x0800b798
  ldr r2, =_sbss
 8002978:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800297c:	20000558 	.word	0x20000558

08002980 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <CAN1_RX1_IRQHandler>
	...

08002984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_Init+0x28>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_Init+0x28>)
 800298e:	f043 0310 	orr.w	r3, r3, #16
 8002992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 fdd9 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	200f      	movs	r0, #15
 800299c:	f000 f808 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fce8 	bl	8002374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_InitTick+0x54>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_InitTick+0x58>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fdf1 	bl	80035b6 <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00e      	b.n	80029fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d80a      	bhi.n	80029fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 fdb9 	bl	8003562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_InitTick+0x5c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000074 	.word	0x20000074
 8002a08:	2000007c 	.word	0x2000007c
 8002a0c:	20000078 	.word	0x20000078

08002a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <HAL_IncTick+0x1c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a03      	ldr	r2, [pc, #12]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	2000007c 	.word	0x2000007c
 8002a30:	20000408 	.word	0x20000408

08002a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b02      	ldr	r3, [pc, #8]	@ (8002a44 <HAL_GetTick+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000408 	.word	0x20000408

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffe0 	bl	8002a34 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000007c 	.word	0x2000007c

08002a90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0be      	b.n	8002c30 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fc82 	bl	80023d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fbbd 	bl	8003254 <ADC_ConversionStop_Disable>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8099 	bne.w	8002c1e <HAL_ADC_Init+0x18e>
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8095 	bne.w	8002c1e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002afc:	f023 0302 	bic.w	r3, r3, #2
 8002b00:	f043 0202 	orr.w	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7b1b      	ldrb	r3, [r3, #12]
 8002b16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b28:	d003      	beq.n	8002b32 <HAL_ADC_Init+0xa2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_ADC_Init+0xa8>
 8002b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_Init+0xaa>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7d1b      	ldrb	r3, [r3, #20]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d119      	bne.n	8002b7c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7b1b      	ldrb	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	035a      	lsls	r2, r3, #13
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e00b      	b.n	8002b7c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_ADC_Init+0x1a8>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bac:	d003      	beq.n	8002bb6 <HAL_ADC_Init+0x126>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d104      	bne.n	8002bc0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	051b      	lsls	r3, r3, #20
 8002bbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	4b18      	ldr	r3, [pc, #96]	@ (8002c3c <HAL_ADC_Init+0x1ac>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bfa:	e018      	b.n	8002c2e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	f023 0312 	bic.w	r3, r3, #18
 8002c04:	f043 0210 	orr.w	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c1c:	e007      	b.n	8002c2e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	ffe1f7fd 	.word	0xffe1f7fd
 8002c3c:	ff1f0efe 	.word	0xff1f0efe

08002c40 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a64      	ldr	r2, [pc, #400]	@ (8002de8 <HAL_ADC_Start_DMA+0x1a8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_Start_DMA+0x24>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a63      	ldr	r2, [pc, #396]	@ (8002dec <HAL_ADC_Start_DMA+0x1ac>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d106      	bne.n	8002c72 <HAL_ADC_Start_DMA+0x32>
 8002c64:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <HAL_ADC_Start_DMA+0x1a8>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 80b3 	bne.w	8002dd8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_Start_DMA+0x40>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0ae      	b.n	8002dde <HAL_ADC_Start_DMA+0x19e>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fa89 	bl	80031a0 <ADC_Enable>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 809a 	bne.w	8002dce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8002dec <HAL_ADC_Start_DMA+0x1ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_Start_DMA+0x84>
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <HAL_ADC_Start_DMA+0x1a8>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d115      	bne.n	8002cf0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d026      	beq.n	8002d2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ce6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cee:	e01d      	b.n	8002d2c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a39      	ldr	r2, [pc, #228]	@ (8002de8 <HAL_ADC_Start_DMA+0x1a8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_ADC_Start_DMA+0xd0>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a38      	ldr	r2, [pc, #224]	@ (8002dec <HAL_ADC_Start_DMA+0x1ac>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d10d      	bne.n	8002d2c <HAL_ADC_Start_DMA+0xec>
 8002d10:	4b35      	ldr	r3, [pc, #212]	@ (8002de8 <HAL_ADC_Start_DMA+0x1a8>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	f023 0206 	bic.w	r2, r3, #6
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d44:	e002      	b.n	8002d4c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <HAL_ADC_Start_DMA+0x1b0>)
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <HAL_ADC_Start_DMA+0x1b4>)
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a23      	ldr	r2, [pc, #140]	@ (8002df8 <HAL_ADC_Start_DMA+0x1b8>)
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0202 	mvn.w	r2, #2
 8002d74:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d84:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a18      	ldr	r0, [r3, #32]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	334c      	adds	r3, #76	@ 0x4c
 8002d90:	4619      	mov	r1, r3
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f000 fc75 	bl	8003684 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002da4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002da8:	d108      	bne.n	8002dbc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002db8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002dba:	e00f      	b.n	8002ddc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002dca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002dcc:	e006      	b.n	8002ddc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002dd6:	e001      	b.n	8002ddc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40012400 	.word	0x40012400
 8002dec:	40012800 	.word	0x40012800
 8002df0:	080032d7 	.word	0x080032d7
 8002df4:	08003353 	.word	0x08003353
 8002df8:	0800336f 	.word	0x0800336f

08002dfc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03e      	beq.n	8002e9c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d039      	beq.n	8002e9c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d105      	bne.n	8002e40 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e4a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e4e:	d11d      	bne.n	8002e8c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d119      	bne.n	8002e8c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0220 	bic.w	r2, r2, #32
 8002e66:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7fe fb1b 	bl	80014c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0212 	mvn.w	r2, #18
 8002e9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04d      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d048      	beq.n	8002f42 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002ed2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002ed6:	d012      	beq.n	8002efe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d125      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ef0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ef4:	d11d      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d119      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f0c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa35 	bl	80033a2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 020c 	mvn.w	r2, #12
 8002f40:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f812 	bl	8002f8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0201 	mvn.w	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x20>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0dc      	b.n	800318a <HAL_ADC_ConfigChannel+0x1da>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d81c      	bhi.n	800301a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b05      	subs	r3, #5
 8002ff2:	221f      	movs	r2, #31
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b05      	subs	r3, #5
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34
 8003018:	e03c      	b.n	8003094 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d81c      	bhi.n	800305c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	3b23      	subs	r3, #35	@ 0x23
 8003034:	221f      	movs	r2, #31
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	4019      	ands	r1, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	3b23      	subs	r3, #35	@ 0x23
 800304e:	fa00 f203 	lsl.w	r2, r0, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
 800305a:	e01b      	b.n	8003094 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3b41      	subs	r3, #65	@ 0x41
 800306e:	221f      	movs	r2, #31
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	4019      	ands	r1, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3b41      	subs	r3, #65	@ 0x41
 8003088:	fa00 f203 	lsl.w	r2, r0, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b09      	cmp	r3, #9
 800309a:	d91c      	bls.n	80030d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68d9      	ldr	r1, [r3, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	3b1e      	subs	r3, #30
 80030ae:	2207      	movs	r2, #7
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4019      	ands	r1, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6898      	ldr	r0, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	3b1e      	subs	r3, #30
 80030c8:	fa00 f203 	lsl.w	r2, r0, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	e019      	b.n	800310a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6919      	ldr	r1, [r3, #16]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	2207      	movs	r2, #7
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	4019      	ands	r1, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6898      	ldr	r0, [r3, #8]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b10      	cmp	r3, #16
 8003110:	d003      	beq.n	800311a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003116:	2b11      	cmp	r3, #17
 8003118:	d132      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1d      	ldr	r2, [pc, #116]	@ (8003194 <HAL_ADC_ConfigChannel+0x1e4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d125      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d126      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003140:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b10      	cmp	r3, #16
 8003148:	d11a      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314a:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <HAL_ADC_ConfigChannel+0x1e8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a13      	ldr	r2, [pc, #76]	@ (800319c <HAL_ADC_ConfigChannel+0x1ec>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0c9a      	lsrs	r2, r3, #18
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003160:	e002      	b.n	8003168 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f9      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x1b2>
 800316e:	e007      	b.n	8003180 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	40012400 	.word	0x40012400
 8003198:	20000074 	.word	0x20000074
 800319c:	431bde83 	.word	0x431bde83

080031a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d040      	beq.n	8003240 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031ce:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <ADC_Enable+0xac>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <ADC_Enable+0xb0>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	0c9b      	lsrs	r3, r3, #18
 80031da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031dc:	e002      	b.n	80031e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031ea:	f7ff fc23 	bl	8002a34 <HAL_GetTick>
 80031ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031f0:	e01f      	b.n	8003232 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031f2:	f7ff fc1f 	bl	8002a34 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d918      	bls.n	8003232 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d011      	beq.n	8003232 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e007      	b.n	8003242 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d1d8      	bne.n	80031f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000074 	.word	0x20000074
 8003250:	431bde83 	.word	0x431bde83

08003254 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d12e      	bne.n	80032cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800327e:	f7ff fbd9 	bl	8002a34 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003284:	e01b      	b.n	80032be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003286:	f7ff fbd5 	bl	8002a34 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d914      	bls.n	80032be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d10d      	bne.n	80032be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e007      	b.n	80032ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d0dc      	beq.n	8003286 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d127      	bne.n	8003340 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003306:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800330a:	d115      	bne.n	8003338 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7fe f8c5 	bl	80014c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800333e:	e004      	b.n	800334a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff fe0a 	bl	8002f7a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	f043 0204 	orr.w	r2, r3, #4
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f7ff fe02 	bl	8002f9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e6:	4a04      	ldr	r2, [pc, #16]	@ (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60d3      	str	r3, [r2, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <__NVIC_GetPriorityGrouping+0x18>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	f003 0307 	and.w	r3, r3, #7
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db0b      	blt.n	8003442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4906      	ldr	r1, [pc, #24]	@ (800344c <__NVIC_EnableIRQ+0x34>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2001      	movs	r0, #1
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	@ (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	@ (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	@ 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003518:	d301      	bcc.n	800351e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351a:	2301      	movs	r3, #1
 800351c:	e00f      	b.n	800353e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <SysTick_Config+0x40>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003526:	210f      	movs	r1, #15
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f7ff ff90 	bl	8003450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <SysTick_Config+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <SysTick_Config+0x40>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff2d 	bl	80033b4 <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff42 	bl	80033fc <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff90 	bl	80034a4 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5f 	bl	8003450 <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff35 	bl	8003418 <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffa2 	bl	8003508 <SysTick_Config>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e043      	b.n	800366e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <HAL_DMA_Init+0xa8>)
 80035ee:	4413      	add	r3, r2
 80035f0:	4a22      	ldr	r2, [pc, #136]	@ (800367c <HAL_DMA_Init+0xac>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <HAL_DMA_Init+0xb0>)
 8003602:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800361a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800361e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	bffdfff8 	.word	0xbffdfff8
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	40020000 	.word	0x40020000

08003684 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_DMA_Start_IT+0x20>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e04b      	b.n	800373c <HAL_DMA_Start_IT+0xb8>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d13a      	bne.n	800372e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f9eb 	bl	8003ab8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 020e 	orr.w	r2, r2, #14
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e00f      	b.n	800371c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0204 	bic.w	r2, r2, #4
 800370a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 020a 	orr.w	r2, r2, #10
 800371a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e005      	b.n	800373a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d008      	beq.n	800376e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2204      	movs	r2, #4
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e020      	b.n	80037b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 020e 	bic.w	r2, r2, #14
 800377c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d005      	beq.n	80037e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e051      	b.n	8003884 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 020e 	bic.w	r2, r2, #14
 80037ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_DMA_Abort_IT+0xd4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d029      	beq.n	800385e <HAL_DMA_Abort_IT+0xa2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a21      	ldr	r2, [pc, #132]	@ (8003894 <HAL_DMA_Abort_IT+0xd8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d022      	beq.n	800385a <HAL_DMA_Abort_IT+0x9e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1f      	ldr	r2, [pc, #124]	@ (8003898 <HAL_DMA_Abort_IT+0xdc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d01a      	beq.n	8003854 <HAL_DMA_Abort_IT+0x98>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1e      	ldr	r2, [pc, #120]	@ (800389c <HAL_DMA_Abort_IT+0xe0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d012      	beq.n	800384e <HAL_DMA_Abort_IT+0x92>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <HAL_DMA_Abort_IT+0xe4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00a      	beq.n	8003848 <HAL_DMA_Abort_IT+0x8c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1b      	ldr	r2, [pc, #108]	@ (80038a4 <HAL_DMA_Abort_IT+0xe8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d102      	bne.n	8003842 <HAL_DMA_Abort_IT+0x86>
 800383c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003840:	e00e      	b.n	8003860 <HAL_DMA_Abort_IT+0xa4>
 8003842:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003846:	e00b      	b.n	8003860 <HAL_DMA_Abort_IT+0xa4>
 8003848:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800384c:	e008      	b.n	8003860 <HAL_DMA_Abort_IT+0xa4>
 800384e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003852:	e005      	b.n	8003860 <HAL_DMA_Abort_IT+0xa4>
 8003854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003858:	e002      	b.n	8003860 <HAL_DMA_Abort_IT+0xa4>
 800385a:	2310      	movs	r3, #16
 800385c:	e000      	b.n	8003860 <HAL_DMA_Abort_IT+0xa4>
 800385e:	2301      	movs	r3, #1
 8003860:	4a11      	ldr	r2, [pc, #68]	@ (80038a8 <HAL_DMA_Abort_IT+0xec>)
 8003862:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
    } 
  }
  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40020008 	.word	0x40020008
 8003894:	4002001c 	.word	0x4002001c
 8003898:	40020030 	.word	0x40020030
 800389c:	40020044 	.word	0x40020044
 80038a0:	40020058 	.word	0x40020058
 80038a4:	4002006c 	.word	0x4002006c
 80038a8:	40020000 	.word	0x40020000

080038ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	2204      	movs	r2, #4
 80038ca:	409a      	lsls	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d04f      	beq.n	8003974 <HAL_DMA_IRQHandler+0xc8>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0204 	bic.w	r2, r2, #4
 80038fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a66      	ldr	r2, [pc, #408]	@ (8003a9c <HAL_DMA_IRQHandler+0x1f0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d029      	beq.n	800395a <HAL_DMA_IRQHandler+0xae>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a65      	ldr	r2, [pc, #404]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <HAL_DMA_IRQHandler+0xaa>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a63      	ldr	r2, [pc, #396]	@ (8003aa4 <HAL_DMA_IRQHandler+0x1f8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01a      	beq.n	8003950 <HAL_DMA_IRQHandler+0xa4>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a62      	ldr	r2, [pc, #392]	@ (8003aa8 <HAL_DMA_IRQHandler+0x1fc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d012      	beq.n	800394a <HAL_DMA_IRQHandler+0x9e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a60      	ldr	r2, [pc, #384]	@ (8003aac <HAL_DMA_IRQHandler+0x200>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00a      	beq.n	8003944 <HAL_DMA_IRQHandler+0x98>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a5f      	ldr	r2, [pc, #380]	@ (8003ab0 <HAL_DMA_IRQHandler+0x204>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d102      	bne.n	800393e <HAL_DMA_IRQHandler+0x92>
 8003938:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800393c:	e00e      	b.n	800395c <HAL_DMA_IRQHandler+0xb0>
 800393e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003942:	e00b      	b.n	800395c <HAL_DMA_IRQHandler+0xb0>
 8003944:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003948:	e008      	b.n	800395c <HAL_DMA_IRQHandler+0xb0>
 800394a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800394e:	e005      	b.n	800395c <HAL_DMA_IRQHandler+0xb0>
 8003950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003954:	e002      	b.n	800395c <HAL_DMA_IRQHandler+0xb0>
 8003956:	2340      	movs	r3, #64	@ 0x40
 8003958:	e000      	b.n	800395c <HAL_DMA_IRQHandler+0xb0>
 800395a:	2304      	movs	r3, #4
 800395c:	4a55      	ldr	r2, [pc, #340]	@ (8003ab4 <HAL_DMA_IRQHandler+0x208>)
 800395e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8094 	beq.w	8003a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003972:	e08e      	b.n	8003a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	2202      	movs	r2, #2
 800397a:	409a      	lsls	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d056      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x186>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d051      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 020a 	bic.w	r2, r2, #10
 80039aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a38      	ldr	r2, [pc, #224]	@ (8003a9c <HAL_DMA_IRQHandler+0x1f0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d029      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x166>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a37      	ldr	r2, [pc, #220]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1f4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x162>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a35      	ldr	r2, [pc, #212]	@ (8003aa4 <HAL_DMA_IRQHandler+0x1f8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01a      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x15c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <HAL_DMA_IRQHandler+0x1fc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d012      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x156>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a32      	ldr	r2, [pc, #200]	@ (8003aac <HAL_DMA_IRQHandler+0x200>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00a      	beq.n	80039fc <HAL_DMA_IRQHandler+0x150>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a31      	ldr	r2, [pc, #196]	@ (8003ab0 <HAL_DMA_IRQHandler+0x204>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d102      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x14a>
 80039f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80039f4:	e00e      	b.n	8003a14 <HAL_DMA_IRQHandler+0x168>
 80039f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039fa:	e00b      	b.n	8003a14 <HAL_DMA_IRQHandler+0x168>
 80039fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a00:	e008      	b.n	8003a14 <HAL_DMA_IRQHandler+0x168>
 8003a02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a06:	e005      	b.n	8003a14 <HAL_DMA_IRQHandler+0x168>
 8003a08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a0c:	e002      	b.n	8003a14 <HAL_DMA_IRQHandler+0x168>
 8003a0e:	2320      	movs	r3, #32
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_IRQHandler+0x168>
 8003a12:	2302      	movs	r3, #2
 8003a14:	4a27      	ldr	r2, [pc, #156]	@ (8003ab4 <HAL_DMA_IRQHandler+0x208>)
 8003a16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d034      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a30:	e02f      	b.n	8003a92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	2208      	movs	r2, #8
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x1e8>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d023      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 020e 	bic.w	r2, r2, #14
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
    }
  }
  return;
 8003a92:	bf00      	nop
 8003a94:	bf00      	nop
}
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40020008 	.word	0x40020008
 8003aa0:	4002001c 	.word	0x4002001c
 8003aa4:	40020030 	.word	0x40020030
 8003aa8:	40020044 	.word	0x40020044
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	4002006c 	.word	0x4002006c
 8003ab4:	40020000 	.word	0x40020000

08003ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d108      	bne.n	8003af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003af6:	e007      	b.n	8003b08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b08b      	sub	sp, #44	@ 0x2c
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b26:	e169      	b.n	8003dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b28:	2201      	movs	r2, #1
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	f040 8158 	bne.w	8003df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a9a      	ldr	r2, [pc, #616]	@ (8003db4 <HAL_GPIO_Init+0x2a0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d05e      	beq.n	8003c0e <HAL_GPIO_Init+0xfa>
 8003b50:	4a98      	ldr	r2, [pc, #608]	@ (8003db4 <HAL_GPIO_Init+0x2a0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d875      	bhi.n	8003c42 <HAL_GPIO_Init+0x12e>
 8003b56:	4a98      	ldr	r2, [pc, #608]	@ (8003db8 <HAL_GPIO_Init+0x2a4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d058      	beq.n	8003c0e <HAL_GPIO_Init+0xfa>
 8003b5c:	4a96      	ldr	r2, [pc, #600]	@ (8003db8 <HAL_GPIO_Init+0x2a4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d86f      	bhi.n	8003c42 <HAL_GPIO_Init+0x12e>
 8003b62:	4a96      	ldr	r2, [pc, #600]	@ (8003dbc <HAL_GPIO_Init+0x2a8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d052      	beq.n	8003c0e <HAL_GPIO_Init+0xfa>
 8003b68:	4a94      	ldr	r2, [pc, #592]	@ (8003dbc <HAL_GPIO_Init+0x2a8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d869      	bhi.n	8003c42 <HAL_GPIO_Init+0x12e>
 8003b6e:	4a94      	ldr	r2, [pc, #592]	@ (8003dc0 <HAL_GPIO_Init+0x2ac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d04c      	beq.n	8003c0e <HAL_GPIO_Init+0xfa>
 8003b74:	4a92      	ldr	r2, [pc, #584]	@ (8003dc0 <HAL_GPIO_Init+0x2ac>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d863      	bhi.n	8003c42 <HAL_GPIO_Init+0x12e>
 8003b7a:	4a92      	ldr	r2, [pc, #584]	@ (8003dc4 <HAL_GPIO_Init+0x2b0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d046      	beq.n	8003c0e <HAL_GPIO_Init+0xfa>
 8003b80:	4a90      	ldr	r2, [pc, #576]	@ (8003dc4 <HAL_GPIO_Init+0x2b0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d85d      	bhi.n	8003c42 <HAL_GPIO_Init+0x12e>
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d82a      	bhi.n	8003be0 <HAL_GPIO_Init+0xcc>
 8003b8a:	2b12      	cmp	r3, #18
 8003b8c:	d859      	bhi.n	8003c42 <HAL_GPIO_Init+0x12e>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <HAL_GPIO_Init+0x80>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003c0f 	.word	0x08003c0f
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003bfb 	.word	0x08003bfb
 8003ba0:	08003c3d 	.word	0x08003c3d
 8003ba4:	08003c43 	.word	0x08003c43
 8003ba8:	08003c43 	.word	0x08003c43
 8003bac:	08003c43 	.word	0x08003c43
 8003bb0:	08003c43 	.word	0x08003c43
 8003bb4:	08003c43 	.word	0x08003c43
 8003bb8:	08003c43 	.word	0x08003c43
 8003bbc:	08003c43 	.word	0x08003c43
 8003bc0:	08003c43 	.word	0x08003c43
 8003bc4:	08003c43 	.word	0x08003c43
 8003bc8:	08003c43 	.word	0x08003c43
 8003bcc:	08003c43 	.word	0x08003c43
 8003bd0:	08003c43 	.word	0x08003c43
 8003bd4:	08003c43 	.word	0x08003c43
 8003bd8:	08003bf1 	.word	0x08003bf1
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	4a79      	ldr	r2, [pc, #484]	@ (8003dc8 <HAL_GPIO_Init+0x2b4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003be6:	e02c      	b.n	8003c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	623b      	str	r3, [r7, #32]
          break;
 8003bee:	e029      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	623b      	str	r3, [r7, #32]
          break;
 8003bf8:	e024      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	623b      	str	r3, [r7, #32]
          break;
 8003c02:	e01f      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	623b      	str	r3, [r7, #32]
          break;
 8003c0c:	e01a      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c16:	2304      	movs	r3, #4
 8003c18:	623b      	str	r3, [r7, #32]
          break;
 8003c1a:	e013      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d105      	bne.n	8003c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c24:	2308      	movs	r3, #8
 8003c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	611a      	str	r2, [r3, #16]
          break;
 8003c2e:	e009      	b.n	8003c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c30:	2308      	movs	r3, #8
 8003c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	615a      	str	r2, [r3, #20]
          break;
 8003c3a:	e003      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	623b      	str	r3, [r7, #32]
          break;
 8003c40:	e000      	b.n	8003c44 <HAL_GPIO_Init+0x130>
          break;
 8003c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2bff      	cmp	r3, #255	@ 0xff
 8003c48:	d801      	bhi.n	8003c4e <HAL_GPIO_Init+0x13a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	e001      	b.n	8003c52 <HAL_GPIO_Init+0x13e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2bff      	cmp	r3, #255	@ 0xff
 8003c58:	d802      	bhi.n	8003c60 <HAL_GPIO_Init+0x14c>
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	e002      	b.n	8003c66 <HAL_GPIO_Init+0x152>
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	3b08      	subs	r3, #8
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	210f      	movs	r1, #15
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	401a      	ands	r2, r3
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	431a      	orrs	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80b1 	beq.w	8003df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c94:	4b4d      	ldr	r3, [pc, #308]	@ (8003dcc <HAL_GPIO_Init+0x2b8>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	4a4c      	ldr	r2, [pc, #304]	@ (8003dcc <HAL_GPIO_Init+0x2b8>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6193      	str	r3, [r2, #24]
 8003ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8003dcc <HAL_GPIO_Init+0x2b8>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cac:	4a48      	ldr	r2, [pc, #288]	@ (8003dd0 <HAL_GPIO_Init+0x2bc>)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a40      	ldr	r2, [pc, #256]	@ (8003dd4 <HAL_GPIO_Init+0x2c0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_GPIO_Init+0x1ec>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3f      	ldr	r2, [pc, #252]	@ (8003dd8 <HAL_GPIO_Init+0x2c4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00d      	beq.n	8003cfc <HAL_GPIO_Init+0x1e8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ddc <HAL_GPIO_Init+0x2c8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <HAL_GPIO_Init+0x1e4>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3d      	ldr	r2, [pc, #244]	@ (8003de0 <HAL_GPIO_Init+0x2cc>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_GPIO_Init+0x1e0>
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e006      	b.n	8003d02 <HAL_GPIO_Init+0x1ee>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	e004      	b.n	8003d02 <HAL_GPIO_Init+0x1ee>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e002      	b.n	8003d02 <HAL_GPIO_Init+0x1ee>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_GPIO_Init+0x1ee>
 8003d00:	2300      	movs	r3, #0
 8003d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d04:	f002 0203 	and.w	r2, r2, #3
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	4093      	lsls	r3, r2
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d12:	492f      	ldr	r1, [pc, #188]	@ (8003dd0 <HAL_GPIO_Init+0x2bc>)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	492c      	ldr	r1, [pc, #176]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
 8003d38:	e006      	b.n	8003d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	4928      	ldr	r1, [pc, #160]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d54:	4b23      	ldr	r3, [pc, #140]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	4922      	ldr	r1, [pc, #136]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d62:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	491e      	ldr	r1, [pc, #120]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4918      	ldr	r1, [pc, #96]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d8a:	4b16      	ldr	r3, [pc, #88]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	4914      	ldr	r1, [pc, #80]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d021      	beq.n	8003de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003da4:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	490e      	ldr	r1, [pc, #56]	@ (8003de4 <HAL_GPIO_Init+0x2d0>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
 8003db0:	e021      	b.n	8003df6 <HAL_GPIO_Init+0x2e2>
 8003db2:	bf00      	nop
 8003db4:	10320000 	.word	0x10320000
 8003db8:	10310000 	.word	0x10310000
 8003dbc:	10220000 	.word	0x10220000
 8003dc0:	10210000 	.word	0x10210000
 8003dc4:	10120000 	.word	0x10120000
 8003dc8:	10110000 	.word	0x10110000
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40010800 	.word	0x40010800
 8003dd8:	40010c00 	.word	0x40010c00
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40011400 	.word	0x40011400
 8003de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_GPIO_Init+0x304>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	4909      	ldr	r1, [pc, #36]	@ (8003e18 <HAL_GPIO_Init+0x304>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	3301      	adds	r3, #1
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f47f ae8e 	bne.w	8003b28 <HAL_GPIO_Init+0x14>
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	372c      	adds	r7, #44	@ 0x2c
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	40010400 	.word	0x40010400

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	611a      	str	r2, [r3, #16]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e56:	4b08      	ldr	r3, [pc, #32]	@ (8003e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e62:	4a05      	ldr	r2, [pc, #20]	@ (8003e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd fddc 	bl	8001a28 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40010400 	.word	0x40010400

08003e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e12b      	b.n	80040e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe fb08 	bl	80024b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	@ 0x24
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f001 fd1e 	bl	8005920 <HAL_RCC_GetPCLK1Freq>
 8003ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4a81      	ldr	r2, [pc, #516]	@ (80040f0 <HAL_I2C_Init+0x274>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d807      	bhi.n	8003f00 <HAL_I2C_Init+0x84>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a80      	ldr	r2, [pc, #512]	@ (80040f4 <HAL_I2C_Init+0x278>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bf94      	ite	ls
 8003ef8:	2301      	movls	r3, #1
 8003efa:	2300      	movhi	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	e006      	b.n	8003f0e <HAL_I2C_Init+0x92>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a7d      	ldr	r2, [pc, #500]	@ (80040f8 <HAL_I2C_Init+0x27c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	bf94      	ite	ls
 8003f08:	2301      	movls	r3, #1
 8003f0a:	2300      	movhi	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0e7      	b.n	80040e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a78      	ldr	r2, [pc, #480]	@ (80040fc <HAL_I2C_Init+0x280>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0c9b      	lsrs	r3, r3, #18
 8003f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a6a      	ldr	r2, [pc, #424]	@ (80040f0 <HAL_I2C_Init+0x274>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d802      	bhi.n	8003f50 <HAL_I2C_Init+0xd4>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	e009      	b.n	8003f64 <HAL_I2C_Init+0xe8>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	4a69      	ldr	r2, [pc, #420]	@ (8004100 <HAL_I2C_Init+0x284>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	3301      	adds	r3, #1
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	495c      	ldr	r1, [pc, #368]	@ (80040f0 <HAL_I2C_Init+0x274>)
 8003f80:	428b      	cmp	r3, r1
 8003f82:	d819      	bhi.n	8003fb8 <HAL_I2C_Init+0x13c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1e59      	subs	r1, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f92:	1c59      	adds	r1, r3, #1
 8003f94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f98:	400b      	ands	r3, r1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_I2C_Init+0x138>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e59      	subs	r1, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb2:	e051      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	e04f      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d111      	bne.n	8003fe4 <HAL_I2C_Init+0x168>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e58      	subs	r0, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	440b      	add	r3, r1
 8003fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e012      	b.n	800400a <HAL_I2C_Init+0x18e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	0099      	lsls	r1, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Init+0x196>
 800400e:	2301      	movs	r3, #1
 8004010:	e022      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10e      	bne.n	8004038 <HAL_I2C_Init+0x1bc>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1e58      	subs	r0, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	440b      	add	r3, r1
 8004028:	fbb0 f3f3 	udiv	r3, r0, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004036:	e00f      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1e58      	subs	r0, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	0099      	lsls	r1, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	fbb0 f3f3 	udiv	r3, r0, r3
 800404e:	3301      	adds	r3, #1
 8004050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004054:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	6809      	ldr	r1, [r1, #0]
 800405c:	4313      	orrs	r3, r2
 800405e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004086:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6911      	ldr	r1, [r2, #16]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	000186a0 	.word	0x000186a0
 80040f4:	001e847f 	.word	0x001e847f
 80040f8:	003d08ff 	.word	0x003d08ff
 80040fc:	431bde83 	.word	0x431bde83
 8004100:	10624dd3 	.word	0x10624dd3

08004104 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	4608      	mov	r0, r1
 800410e:	4611      	mov	r1, r2
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	460b      	mov	r3, r1
 8004118:	813b      	strh	r3, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800411e:	f7fe fc89 	bl	8002a34 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b20      	cmp	r3, #32
 800412e:	f040 80d9 	bne.w	80042e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	2319      	movs	r3, #25
 8004138:	2201      	movs	r2, #1
 800413a:	496d      	ldr	r1, [pc, #436]	@ (80042f0 <HAL_I2C_Mem_Write+0x1ec>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fdef 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	e0cc      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_I2C_Mem_Write+0x56>
 8004156:	2302      	movs	r3, #2
 8004158:	e0c5      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d007      	beq.n	8004180 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2221      	movs	r2, #33	@ 0x21
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2240      	movs	r2, #64	@ 0x40
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a4d      	ldr	r2, [pc, #308]	@ (80042f4 <HAL_I2C_Mem_Write+0x1f0>)
 80041c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041c2:	88f8      	ldrh	r0, [r7, #6]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4603      	mov	r3, r0
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fc26 	bl	8004a24 <I2C_RequestMemoryWrite>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d052      	beq.n	8004284 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e081      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 feb4 	bl	8004f54 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06b      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_I2C_Mem_Write+0x180>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1aa      	bne.n	80041e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fea7 	bl	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00d      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d107      	bne.n	80042b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e016      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	00100002 	.word	0x00100002
 80042f4:	ffff0000 	.word	0xffff0000

080042f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	@ 0x30
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	460b      	mov	r3, r1
 800430c:	813b      	strh	r3, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004316:	f7fe fb8d 	bl	8002a34 <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b20      	cmp	r3, #32
 8004326:	f040 8244 	bne.w	80047b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2319      	movs	r3, #25
 8004330:	2201      	movs	r2, #1
 8004332:	4982      	ldr	r1, [pc, #520]	@ (800453c <HAL_I2C_Mem_Read+0x244>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fcf3 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
 8004342:	e237      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_I2C_Mem_Read+0x5a>
 800434e:	2302      	movs	r3, #2
 8004350:	e230      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d007      	beq.n	8004378 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2222      	movs	r2, #34	@ 0x22
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a62      	ldr	r2, [pc, #392]	@ (8004540 <HAL_I2C_Mem_Read+0x248>)
 80043b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ba:	88f8      	ldrh	r0, [r7, #6]
 80043bc:	893a      	ldrh	r2, [r7, #8]
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4603      	mov	r3, r0
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fbc0 	bl	8004b50 <I2C_RequestMemoryRead>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1ec      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d113      	bne.n	800440a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e1c0      	b.n	800478c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	2b01      	cmp	r3, #1
 8004410:	d11e      	bne.n	8004450 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004422:	b672      	cpsid	i
}
 8004424:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800444c:	b662      	cpsie	i
}
 800444e:	e035      	b.n	80044bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	2b02      	cmp	r3, #2
 8004456:	d11e      	bne.n	8004496 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004466:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004468:	b672      	cpsid	i
}
 800446a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004490:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004492:	b662      	cpsie	i
}
 8004494:	e012      	b.n	80044bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80044bc:	e166      	b.n	800478c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	f200 811f 	bhi.w	8004706 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d123      	bne.n	8004518 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fdcd 	bl	8005074 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e167      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004516:	e139      	b.n	800478c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451c:	2b02      	cmp	r3, #2
 800451e:	d152      	bne.n	80045c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004526:	2200      	movs	r2, #0
 8004528:	4906      	ldr	r1, [pc, #24]	@ (8004544 <HAL_I2C_Mem_Read+0x24c>)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fbf8 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e13c      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
 800453a:	bf00      	nop
 800453c:	00100002 	.word	0x00100002
 8004540:	ffff0000 	.word	0xffff0000
 8004544:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004548:	b672      	cpsid	i
}
 800454a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800455a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800458e:	b662      	cpsie	i
}
 8004590:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045c4:	e0e2      	b.n	800478c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045cc:	2200      	movs	r2, #0
 80045ce:	497b      	ldr	r1, [pc, #492]	@ (80047bc <HAL_I2C_Mem_Read+0x4c4>)
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fba5 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0e9      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045f0:	b672      	cpsid	i
}
 80045f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004626:	4b66      	ldr	r3, [pc, #408]	@ (80047c0 <HAL_I2C_Mem_Read+0x4c8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	08db      	lsrs	r3, r3, #3
 800462c:	4a65      	ldr	r2, [pc, #404]	@ (80047c4 <HAL_I2C_Mem_Read+0x4cc>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a1a      	lsrs	r2, r3, #8
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00da      	lsls	r2, r3, #3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	3b01      	subs	r3, #1
 8004644:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d118      	bne.n	800467e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800466e:	b662      	cpsie	i
}
 8004670:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e09a      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d1d9      	bne.n	8004640 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046ce:	b662      	cpsie	i
}
 80046d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004704:	e042      	b.n	800478c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004708:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fcb2 	bl	8005074 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e04c      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d118      	bne.n	800478c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	f47f ae94 	bne.w	80044be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e000      	b.n	80047b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
  }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	@ 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010004 	.word	0x00010004
 80047c0:	20000074 	.word	0x20000074
 80047c4:	14f8b589 	.word	0x14f8b589

080047c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	460b      	mov	r3, r1
 80047d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80047d8:	f7fe f92c 	bl	8002a34 <HAL_GetTick>
 80047dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	f040 8111 	bne.w	8004a12 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2319      	movs	r3, #25
 80047f6:	2201      	movs	r2, #1
 80047f8:	4988      	ldr	r1, [pc, #544]	@ (8004a1c <HAL_I2C_IsDeviceReady+0x254>)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa90 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004806:	2302      	movs	r3, #2
 8004808:	e104      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_I2C_IsDeviceReady+0x50>
 8004814:	2302      	movs	r3, #2
 8004816:	e0fd      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d007      	beq.n	800483e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2224      	movs	r2, #36	@ 0x24
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a70      	ldr	r2, [pc, #448]	@ (8004a20 <HAL_I2C_IsDeviceReady+0x258>)
 8004860:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004870:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2200      	movs	r2, #0
 800487a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa4e 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004898:	d103      	bne.n	80048a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0b6      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fe f8bd 	bl	8002a34 <HAL_GetTick>
 80048ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048ea:	e025      	b.n	8004938 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ec:	f7fe f8a2 	bl	8002a34 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <HAL_I2C_IsDeviceReady+0x13a>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	22a0      	movs	r2, #160	@ 0xa0
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2ba0      	cmp	r3, #160	@ 0xa0
 8004942:	d005      	beq.n	8004950 <HAL_I2C_IsDeviceReady+0x188>
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_I2C_IsDeviceReady+0x188>
 800494a:	7dbb      	ldrb	r3, [r7, #22]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0cd      	beq.n	80048ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b02      	cmp	r3, #2
 8004964:	d129      	bne.n	80049ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004974:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2319      	movs	r3, #25
 8004992:	2201      	movs	r2, #1
 8004994:	4921      	ldr	r1, [pc, #132]	@ (8004a1c <HAL_I2C_IsDeviceReady+0x254>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f9c2 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e036      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e02c      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2319      	movs	r3, #25
 80049da:	2201      	movs	r2, #1
 80049dc:	490f      	ldr	r1, [pc, #60]	@ (8004a1c <HAL_I2C_IsDeviceReady+0x254>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f99e 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e012      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	f4ff af32 	bcc.w	8004862 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	00100002 	.word	0x00100002
 8004a20:	ffff0000 	.word	0xffff0000

08004a24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	817b      	strh	r3, [r7, #10]
 8004a36:	460b      	mov	r3, r1
 8004a38:	813b      	strh	r3, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f960 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00d      	beq.n	8004a82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a74:	d103      	bne.n	8004a7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e05f      	b.n	8004b42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	6a3a      	ldr	r2, [r7, #32]
 8004a96:	492d      	ldr	r1, [pc, #180]	@ (8004b4c <I2C_RequestMemoryWrite+0x128>)
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f9bb 	bl	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e04c      	b.n	8004b42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac0:	6a39      	ldr	r1, [r7, #32]
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fa46 	bl	8004f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00d      	beq.n	8004aea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d107      	bne.n	8004ae6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e02b      	b.n	8004b42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d105      	bne.n	8004afc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]
 8004afa:	e021      	b.n	8004b40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004afc:	893b      	ldrh	r3, [r7, #8]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	6a39      	ldr	r1, [r7, #32]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa20 	bl	8004f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00d      	beq.n	8004b36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d107      	bne.n	8004b32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e005      	b.n	8004b42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b36:	893b      	ldrh	r3, [r7, #8]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	00010002 	.word	0x00010002

08004b50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	817b      	strh	r3, [r7, #10]
 8004b62:	460b      	mov	r3, r1
 8004b64:	813b      	strh	r3, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f8c2 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb0:	d103      	bne.n	8004bba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e0aa      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	4952      	ldr	r1, [pc, #328]	@ (8004d1c <I2C_RequestMemoryRead+0x1cc>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f91d 	bl	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e097      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfc:	6a39      	ldr	r1, [r7, #32]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f9a8 	bl	8004f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d107      	bne.n	8004c22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e076      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d105      	bne.n	8004c38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
 8004c36:	e021      	b.n	8004c7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c38:	893b      	ldrh	r3, [r7, #8]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 f982 	bl	8004f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e050      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c72:	893b      	ldrh	r3, [r7, #8]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7e:	6a39      	ldr	r1, [r7, #32]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f967 	bl	8004f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d107      	bne.n	8004ca4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e035      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f82b 	bl	8004d20 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cde:	d103      	bne.n	8004ce8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e013      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cec:	897b      	ldrh	r3, [r7, #10]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	6a3a      	ldr	r2, [r7, #32]
 8004d00:	4906      	ldr	r1, [pc, #24]	@ (8004d1c <I2C_RequestMemoryRead+0x1cc>)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f886 	bl	8004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	00010002 	.word	0x00010002

08004d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d30:	e048      	b.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d044      	beq.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fd fe7b 	bl	8002a34 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d139      	bne.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10d      	bne.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	43da      	mvns	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4013      	ands	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	e00c      	b.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d116      	bne.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e023      	b.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10d      	bne.n	8004dea <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	e00c      	b.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d093      	beq.n	8004d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e22:	e071      	b.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e32:	d123      	bne.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	f043 0204 	orr.w	r2, r3, #4
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e067      	b.n	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	d041      	beq.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e84:	f7fd fdd6 	bl	8002a34 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d302      	bcc.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d136      	bne.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10c      	bne.n	8004ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e00b      	b.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e021      	b.n	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10c      	bne.n	8004f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	43da      	mvns	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e00b      	b.n	8004f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f af6d 	bne.w	8004e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f60:	e034      	b.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8e3 	bl	800512e <I2C_IsAcknowledgeFailed>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e034      	b.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d028      	beq.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7a:	f7fd fd5b 	bl	8002a34 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d302      	bcc.n	8004f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11d      	bne.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b80      	cmp	r3, #128	@ 0x80
 8004f9c:	d016      	beq.n	8004fcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e007      	b.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd6:	2b80      	cmp	r3, #128	@ 0x80
 8004fd8:	d1c3      	bne.n	8004f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ff0:	e034      	b.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f89b 	bl	800512e <I2C_IsAcknowledgeFailed>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e034      	b.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d028      	beq.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fd fd13 	bl	8002a34 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11d      	bne.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d016      	beq.n	800505c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e007      	b.n	800506c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b04      	cmp	r3, #4
 8005068:	d1c3      	bne.n	8004ff2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005080:	e049      	b.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b10      	cmp	r3, #16
 800508e:	d119      	bne.n	80050c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0210 	mvn.w	r2, #16
 8005098:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e030      	b.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c4:	f7fd fcb6 	bl	8002a34 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11d      	bne.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e4:	2b40      	cmp	r3, #64	@ 0x40
 80050e6:	d016      	beq.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e007      	b.n	8005126 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b40      	cmp	r3, #64	@ 0x40
 8005122:	d1ae      	bne.n	8005082 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005144:	d11b      	bne.n	800517e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800514e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	f043 0204 	orr.w	r2, r3, #4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
	...

0800518c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e272      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8087 	beq.w	80052ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051ac:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d00c      	beq.n	80051d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051b8:	4b8f      	ldr	r3, [pc, #572]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d112      	bne.n	80051ea <HAL_RCC_OscConfig+0x5e>
 80051c4:	4b8c      	ldr	r3, [pc, #560]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d0:	d10b      	bne.n	80051ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d2:	4b89      	ldr	r3, [pc, #548]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d06c      	beq.n	80052b8 <HAL_RCC_OscConfig+0x12c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d168      	bne.n	80052b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e24c      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x76>
 80051f4:	4b80      	ldr	r3, [pc, #512]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a7f      	ldr	r2, [pc, #508]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e02e      	b.n	8005260 <HAL_RCC_OscConfig+0xd4>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0x98>
 800520a:	4b7b      	ldr	r3, [pc, #492]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a7a      	ldr	r2, [pc, #488]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b78      	ldr	r3, [pc, #480]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a77      	ldr	r2, [pc, #476]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800521c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e01d      	b.n	8005260 <HAL_RCC_OscConfig+0xd4>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800522c:	d10c      	bne.n	8005248 <HAL_RCC_OscConfig+0xbc>
 800522e:	4b72      	ldr	r3, [pc, #456]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a71      	ldr	r2, [pc, #452]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	4b6f      	ldr	r3, [pc, #444]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a6e      	ldr	r2, [pc, #440]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e00b      	b.n	8005260 <HAL_RCC_OscConfig+0xd4>
 8005248:	4b6b      	ldr	r3, [pc, #428]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a6a      	ldr	r2, [pc, #424]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800524e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4b68      	ldr	r3, [pc, #416]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a67      	ldr	r2, [pc, #412]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800525a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800525e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d013      	beq.n	8005290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fd fbe4 	bl	8002a34 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005270:	f7fd fbe0 	bl	8002a34 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	@ 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e200      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	4b5d      	ldr	r3, [pc, #372]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0xe4>
 800528e:	e014      	b.n	80052ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fd fbd0 	bl	8002a34 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005298:	f7fd fbcc 	bl	8002a34 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	@ 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1ec      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052aa:	4b53      	ldr	r3, [pc, #332]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x10c>
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d063      	beq.n	800538e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052c6:	4b4c      	ldr	r3, [pc, #304]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052d2:	4b49      	ldr	r3, [pc, #292]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d11c      	bne.n	8005318 <HAL_RCC_OscConfig+0x18c>
 80052de:	4b46      	ldr	r3, [pc, #280]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d116      	bne.n	8005318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ea:	4b43      	ldr	r3, [pc, #268]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_RCC_OscConfig+0x176>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d001      	beq.n	8005302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e1c0      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005302:	4b3d      	ldr	r3, [pc, #244]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4939      	ldr	r1, [pc, #228]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005316:	e03a      	b.n	800538e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005320:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <HAL_RCC_OscConfig+0x270>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fd fb85 	bl	8002a34 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532e:	f7fd fb81 	bl	8002a34 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e1a1      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005340:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	4b2a      	ldr	r3, [pc, #168]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4927      	ldr	r1, [pc, #156]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 800535c:	4313      	orrs	r3, r2
 800535e:	600b      	str	r3, [r1, #0]
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005362:	4b26      	ldr	r3, [pc, #152]	@ (80053fc <HAL_RCC_OscConfig+0x270>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005368:	f7fd fb64 	bl	8002a34 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005370:	f7fd fb60 	bl	8002a34 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e180      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005382:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d03a      	beq.n	8005410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d019      	beq.n	80053d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a2:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <HAL_RCC_OscConfig+0x274>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a8:	f7fd fb44 	bl	8002a34 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b0:	f7fd fb40 	bl	8002a34 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e160      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c2:	4b0d      	ldr	r3, [pc, #52]	@ (80053f8 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053ce:	2001      	movs	r0, #1
 80053d0:	f000 face 	bl	8005970 <RCC_Delay>
 80053d4:	e01c      	b.n	8005410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <HAL_RCC_OscConfig+0x274>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053dc:	f7fd fb2a 	bl	8002a34 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e2:	e00f      	b.n	8005404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e4:	f7fd fb26 	bl	8002a34 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d908      	bls.n	8005404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e146      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
 80053f6:	bf00      	nop
 80053f8:	40021000 	.word	0x40021000
 80053fc:	42420000 	.word	0x42420000
 8005400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005404:	4b92      	ldr	r3, [pc, #584]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e9      	bne.n	80053e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80a6 	beq.w	800556a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005422:	4b8b      	ldr	r3, [pc, #556]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10d      	bne.n	800544a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542e:	4b88      	ldr	r3, [pc, #544]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4a87      	ldr	r2, [pc, #540]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005438:	61d3      	str	r3, [r2, #28]
 800543a:	4b85      	ldr	r3, [pc, #532]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005446:	2301      	movs	r3, #1
 8005448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544a:	4b82      	ldr	r3, [pc, #520]	@ (8005654 <HAL_RCC_OscConfig+0x4c8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005452:	2b00      	cmp	r3, #0
 8005454:	d118      	bne.n	8005488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005456:	4b7f      	ldr	r3, [pc, #508]	@ (8005654 <HAL_RCC_OscConfig+0x4c8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7e      	ldr	r2, [pc, #504]	@ (8005654 <HAL_RCC_OscConfig+0x4c8>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005462:	f7fd fae7 	bl	8002a34 <HAL_GetTick>
 8005466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546a:	f7fd fae3 	bl	8002a34 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b64      	cmp	r3, #100	@ 0x64
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e103      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547c:	4b75      	ldr	r3, [pc, #468]	@ (8005654 <HAL_RCC_OscConfig+0x4c8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d106      	bne.n	800549e <HAL_RCC_OscConfig+0x312>
 8005490:	4b6f      	ldr	r3, [pc, #444]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	4a6e      	ldr	r2, [pc, #440]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	6213      	str	r3, [r2, #32]
 800549c:	e02d      	b.n	80054fa <HAL_RCC_OscConfig+0x36e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCC_OscConfig+0x334>
 80054a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	4a69      	ldr	r2, [pc, #420]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	6213      	str	r3, [r2, #32]
 80054b2:	4b67      	ldr	r3, [pc, #412]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	4a66      	ldr	r2, [pc, #408]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	6213      	str	r3, [r2, #32]
 80054be:	e01c      	b.n	80054fa <HAL_RCC_OscConfig+0x36e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b05      	cmp	r3, #5
 80054c6:	d10c      	bne.n	80054e2 <HAL_RCC_OscConfig+0x356>
 80054c8:	4b61      	ldr	r3, [pc, #388]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	4a60      	ldr	r2, [pc, #384]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	6213      	str	r3, [r2, #32]
 80054d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	4a5d      	ldr	r2, [pc, #372]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	6213      	str	r3, [r2, #32]
 80054e0:	e00b      	b.n	80054fa <HAL_RCC_OscConfig+0x36e>
 80054e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4a5a      	ldr	r2, [pc, #360]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6213      	str	r3, [r2, #32]
 80054ee:	4b58      	ldr	r3, [pc, #352]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	4a57      	ldr	r2, [pc, #348]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d015      	beq.n	800552e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005502:	f7fd fa97 	bl	8002a34 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005508:	e00a      	b.n	8005520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550a:	f7fd fa93 	bl	8002a34 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e0b1      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005520:	4b4b      	ldr	r3, [pc, #300]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0ee      	beq.n	800550a <HAL_RCC_OscConfig+0x37e>
 800552c:	e014      	b.n	8005558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552e:	f7fd fa81 	bl	8002a34 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005534:	e00a      	b.n	800554c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005536:	f7fd fa7d 	bl	8002a34 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e09b      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554c:	4b40      	ldr	r3, [pc, #256]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ee      	bne.n	8005536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d105      	bne.n	800556a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555e:	4b3c      	ldr	r3, [pc, #240]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	4a3b      	ldr	r2, [pc, #236]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8087 	beq.w	8005682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005574:	4b36      	ldr	r3, [pc, #216]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 030c 	and.w	r3, r3, #12
 800557c:	2b08      	cmp	r3, #8
 800557e:	d061      	beq.n	8005644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	2b02      	cmp	r3, #2
 8005586:	d146      	bne.n	8005616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005588:	4b33      	ldr	r3, [pc, #204]	@ (8005658 <HAL_RCC_OscConfig+0x4cc>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7fd fa51 	bl	8002a34 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005596:	f7fd fa4d 	bl	8002a34 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e06d      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a8:	4b29      	ldr	r3, [pc, #164]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f0      	bne.n	8005596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055bc:	d108      	bne.n	80055d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055be:	4b24      	ldr	r3, [pc, #144]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	4921      	ldr	r1, [pc, #132]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a19      	ldr	r1, [r3, #32]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	430b      	orrs	r3, r1
 80055e2:	491b      	ldr	r1, [pc, #108]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005658 <HAL_RCC_OscConfig+0x4cc>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ee:	f7fd fa21 	bl	8002a34 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fd fa1d 	bl	8002a34 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e03d      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x46a>
 8005614:	e035      	b.n	8005682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_RCC_OscConfig+0x4cc>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fd fa0a 	bl	8002a34 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7fd fa06 	bl	8002a34 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e026      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x498>
 8005642:	e01e      	b.n	8005682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d107      	bne.n	800565c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e019      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
 8005650:	40021000 	.word	0x40021000
 8005654:	40007000 	.word	0x40007000
 8005658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800565c:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <HAL_RCC_OscConfig+0x500>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	429a      	cmp	r2, r3
 800566e:	d106      	bne.n	800567e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000

08005690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0d0      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d910      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4b67      	ldr	r3, [pc, #412]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f023 0207 	bic.w	r2, r3, #7
 80056ba:	4965      	ldr	r1, [pc, #404]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b63      	ldr	r3, [pc, #396]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0b8      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ec:	4b59      	ldr	r3, [pc, #356]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a58      	ldr	r2, [pc, #352]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 80056f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80056f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005704:	4b53      	ldr	r3, [pc, #332]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a52      	ldr	r2, [pc, #328]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 800570a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800570e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b50      	ldr	r3, [pc, #320]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	494d      	ldr	r1, [pc, #308]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d040      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	4b47      	ldr	r3, [pc, #284]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d115      	bne.n	800576e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574e:	4b41      	ldr	r3, [pc, #260]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e073      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575e:	4b3d      	ldr	r3, [pc, #244]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06b      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576e:	4b39      	ldr	r3, [pc, #228]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f023 0203 	bic.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4936      	ldr	r1, [pc, #216]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	4313      	orrs	r3, r2
 800577e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005780:	f7fd f958 	bl	8002a34 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	e00a      	b.n	800579e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005788:	f7fd f954 	bl	8002a34 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e053      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579e:	4b2d      	ldr	r3, [pc, #180]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 020c 	and.w	r2, r3, #12
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d1eb      	bne.n	8005788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057b0:	4b27      	ldr	r3, [pc, #156]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d210      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057be:	4b24      	ldr	r3, [pc, #144]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 0207 	bic.w	r2, r3, #7
 80057c6:	4922      	ldr	r1, [pc, #136]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b20      	ldr	r3, [pc, #128]	@ (8005850 <HAL_RCC_ClockConfig+0x1c0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e032      	b.n	8005846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ec:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4916      	ldr	r1, [pc, #88]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800580a:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	490e      	ldr	r1, [pc, #56]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 800581a:	4313      	orrs	r3, r2
 800581c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800581e:	f000 f821 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490a      	ldr	r1, [pc, #40]	@ (8005858 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	4a09      	ldr	r2, [pc, #36]	@ (800585c <HAL_RCC_ClockConfig+0x1cc>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800583a:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <HAL_RCC_ClockConfig+0x1d0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fd f8b6 	bl	80029b0 <HAL_InitTick>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40022000 	.word	0x40022000
 8005854:	40021000 	.word	0x40021000
 8005858:	0800b334 	.word	0x0800b334
 800585c:	20000074 	.word	0x20000074
 8005860:	20000078 	.word	0x20000078

08005864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800587e:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b04      	cmp	r3, #4
 800588c:	d002      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0x30>
 800588e:	2b08      	cmp	r3, #8
 8005890:	d003      	beq.n	800589a <HAL_RCC_GetSysClockFreq+0x36>
 8005892:	e027      	b.n	80058e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005894:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <HAL_RCC_GetSysClockFreq+0x98>)
 8005896:	613b      	str	r3, [r7, #16]
      break;
 8005898:	e027      	b.n	80058ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	0c9b      	lsrs	r3, r3, #18
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	4a17      	ldr	r2, [pc, #92]	@ (8005900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80058a4:	5cd3      	ldrb	r3, [r2, r3]
 80058a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058b2:	4b11      	ldr	r3, [pc, #68]	@ (80058f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	0c5b      	lsrs	r3, r3, #17
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	4a11      	ldr	r2, [pc, #68]	@ (8005904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80058be:	5cd3      	ldrb	r3, [r2, r3]
 80058c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a0d      	ldr	r2, [pc, #52]	@ (80058fc <HAL_RCC_GetSysClockFreq+0x98>)
 80058c6:	fb03 f202 	mul.w	r2, r3, r2
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e004      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80058d8:	fb02 f303 	mul.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	613b      	str	r3, [r7, #16]
      break;
 80058e2:	e002      	b.n	80058ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <HAL_RCC_GetSysClockFreq+0x98>)
 80058e6:	613b      	str	r3, [r7, #16]
      break;
 80058e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ea:	693b      	ldr	r3, [r7, #16]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000
 80058fc:	007a1200 	.word	0x007a1200
 8005900:	0800b34c 	.word	0x0800b34c
 8005904:	0800b35c 	.word	0x0800b35c
 8005908:	003d0900 	.word	0x003d0900

0800590c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005910:	4b02      	ldr	r3, [pc, #8]	@ (800591c <HAL_RCC_GetHCLKFreq+0x10>)
 8005912:	681b      	ldr	r3, [r3, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	20000074 	.word	0x20000074

08005920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005924:	f7ff fff2 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8005928:	4602      	mov	r2, r0
 800592a:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	4903      	ldr	r1, [pc, #12]	@ (8005944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005936:	5ccb      	ldrb	r3, [r1, r3]
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	0800b344 	.word	0x0800b344

08005948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800594c:	f7ff ffde 	bl	800590c <HAL_RCC_GetHCLKFreq>
 8005950:	4602      	mov	r2, r0
 8005952:	4b05      	ldr	r3, [pc, #20]	@ (8005968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	0adb      	lsrs	r3, r3, #11
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	4903      	ldr	r1, [pc, #12]	@ (800596c <HAL_RCC_GetPCLK2Freq+0x24>)
 800595e:	5ccb      	ldrb	r3, [r1, r3]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40021000 	.word	0x40021000
 800596c:	0800b344 	.word	0x0800b344

08005970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <RCC_Delay+0x34>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <RCC_Delay+0x38>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0a5b      	lsrs	r3, r3, #9
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800598c:	bf00      	nop
  }
  while (Delay --);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	60fa      	str	r2, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f9      	bne.n	800598c <RCC_Delay+0x1c>
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	20000074 	.word	0x20000074
 80059a8:	10624dd3 	.word	0x10624dd3

080059ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d07d      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059cc:	4b4f      	ldr	r3, [pc, #316]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10d      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d8:	4b4c      	ldr	r3, [pc, #304]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	4a4b      	ldr	r2, [pc, #300]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e2:	61d3      	str	r3, [r2, #28]
 80059e4:	4b49      	ldr	r3, [pc, #292]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	4b46      	ldr	r3, [pc, #280]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d118      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a00:	4b43      	ldr	r3, [pc, #268]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a42      	ldr	r2, [pc, #264]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a0c:	f7fd f812 	bl	8002a34 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	e008      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a14:	f7fd f80e 	bl	8002a34 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	@ 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e06d      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a26:	4b3a      	ldr	r3, [pc, #232]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a32:	4b36      	ldr	r3, [pc, #216]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d02e      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d027      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a50:	4b2e      	ldr	r3, [pc, #184]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a60:	4b2c      	ldr	r3, [pc, #176]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a66:	4a29      	ldr	r2, [pc, #164]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d014      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a76:	f7fc ffdd 	bl	8002a34 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fc ffd9 	bl	8002a34 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e036      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	4b1d      	ldr	r3, [pc, #116]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ee      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4917      	ldr	r1, [pc, #92]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab8:	4b14      	ldr	r3, [pc, #80]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	490b      	ldr	r1, [pc, #44]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aee:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	4904      	ldr	r1, [pc, #16]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40007000 	.word	0x40007000
 8005b14:	42420440 	.word	0x42420440

08005b18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e041      	b.n	8005bae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc fd0a 	bl	8002558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f000 f992 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_TIM_PWM_Start+0x24>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e022      	b.n	8005c22 <HAL_TIM_PWM_Start+0x6a>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d109      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0x3e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	e015      	b.n	8005c22 <HAL_TIM_PWM_Start+0x6a>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d109      	bne.n	8005c10 <HAL_TIM_PWM_Start+0x58>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e008      	b.n	8005c22 <HAL_TIM_PWM_Start+0x6a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e05e      	b.n	8005ce8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x82>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c38:	e013      	b.n	8005c62 <HAL_TIM_PWM_Start+0xaa>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Start+0x92>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c48:	e00b      	b.n	8005c62 <HAL_TIM_PWM_Start+0xaa>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c58:	e003      	b.n	8005c62 <HAL_TIM_PWM_Start+0xaa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 faf2 	bl	8006254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf0 <HAL_TIM_PWM_Start+0x138>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	@ (8005cf0 <HAL_TIM_PWM_Start+0x138>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0xfa>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0xfa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a14      	ldr	r2, [pc, #80]	@ (8005cf4 <HAL_TIM_PWM_Start+0x13c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0xfa>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a12      	ldr	r2, [pc, #72]	@ (8005cf8 <HAL_TIM_PWM_Start+0x140>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d111      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b06      	cmp	r3, #6
 8005cc2:	d010      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd4:	e007      	b.n	8005ce6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800

08005cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e0ae      	b.n	8005e78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	f200 809f 	bhi.w	8005e68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005e69 	.word	0x08005e69
 8005d38:	08005e69 	.word	0x08005e69
 8005d3c:	08005e69 	.word	0x08005e69
 8005d40:	08005da5 	.word	0x08005da5
 8005d44:	08005e69 	.word	0x08005e69
 8005d48:	08005e69 	.word	0x08005e69
 8005d4c:	08005e69 	.word	0x08005e69
 8005d50:	08005de7 	.word	0x08005de7
 8005d54:	08005e69 	.word	0x08005e69
 8005d58:	08005e69 	.word	0x08005e69
 8005d5c:	08005e69 	.word	0x08005e69
 8005d60:	08005e27 	.word	0x08005e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f8ea 	bl	8005f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0208 	orr.w	r2, r2, #8
 8005d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0204 	bic.w	r2, r2, #4
 8005d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6999      	ldr	r1, [r3, #24]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	619a      	str	r2, [r3, #24]
      break;
 8005da2:	e064      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f930 	bl	8006010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6999      	ldr	r1, [r3, #24]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	619a      	str	r2, [r3, #24]
      break;
 8005de4:	e043      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f979 	bl	80060e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0208 	orr.w	r2, r2, #8
 8005e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0204 	bic.w	r2, r2, #4
 8005e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69d9      	ldr	r1, [r3, #28]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	61da      	str	r2, [r3, #28]
      break;
 8005e24:	e023      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 f9c3 	bl	80061b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69d9      	ldr	r1, [r3, #28]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	021a      	lsls	r2, r3, #8
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	61da      	str	r2, [r3, #28]
      break;
 8005e66:	e002      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a29      	ldr	r2, [pc, #164]	@ (8005f38 <TIM_Base_SetConfig+0xb8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00b      	beq.n	8005eb0 <TIM_Base_SetConfig+0x30>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9e:	d007      	beq.n	8005eb0 <TIM_Base_SetConfig+0x30>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a26      	ldr	r2, [pc, #152]	@ (8005f3c <TIM_Base_SetConfig+0xbc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0x30>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a25      	ldr	r2, [pc, #148]	@ (8005f40 <TIM_Base_SetConfig+0xc0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <TIM_Base_SetConfig+0xb8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_Base_SetConfig+0x62>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed0:	d007      	beq.n	8005ee2 <TIM_Base_SetConfig+0x62>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <TIM_Base_SetConfig+0xbc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_Base_SetConfig+0x62>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a18      	ldr	r2, [pc, #96]	@ (8005f40 <TIM_Base_SetConfig+0xc0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a07      	ldr	r2, [pc, #28]	@ (8005f38 <TIM_Base_SetConfig+0xb8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d103      	bne.n	8005f28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	615a      	str	r2, [r3, #20]
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800

08005f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f023 0201 	bic.w	r2, r3, #1
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 0302 	bic.w	r3, r3, #2
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <TIM_OC1_SetConfig+0xc8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10c      	bne.n	8005fba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f023 0308 	bic.w	r3, r3, #8
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a13      	ldr	r2, [pc, #76]	@ (800600c <TIM_OC1_SetConfig+0xc8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d111      	bne.n	8005fe6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	621a      	str	r2, [r3, #32]
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40012c00 	.word	0x40012c00

08006010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0320 	bic.w	r3, r3, #32
 800605a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a1d      	ldr	r2, [pc, #116]	@ (80060e0 <TIM_OC2_SetConfig+0xd0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d10d      	bne.n	800608c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <TIM_OC2_SetConfig+0xd0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d113      	bne.n	80060bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800609a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bc80      	pop	{r7}
 80060de:	4770      	bx	lr
 80060e0:	40012c00 	.word	0x40012c00

080060e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800612c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a1d      	ldr	r2, [pc, #116]	@ (80061b4 <TIM_OC3_SetConfig+0xd0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10d      	bne.n	800615e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a14      	ldr	r2, [pc, #80]	@ (80061b4 <TIM_OC3_SetConfig+0xd0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d113      	bne.n	800618e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800616c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bc80      	pop	{r7}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00

080061b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a0f      	ldr	r2, [pc, #60]	@ (8006250 <TIM_OC4_SetConfig+0x98>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d109      	bne.n	800622c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800621e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	019b      	lsls	r3, r3, #6
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00

08006254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2201      	movs	r2, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	43db      	mvns	r3, r3
 8006276:	401a      	ands	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e046      	b.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006300:	d009      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a12      	ldr	r2, [pc, #72]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a10      	ldr	r2, [pc, #64]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10c      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800

08006358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e042      	b.n	80063f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc f966 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2224      	movs	r2, #36	@ 0x24
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800639a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fe03 	bl	8006fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b20      	cmp	r3, #32
 8006416:	d16d      	bne.n	80064f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_UART_Transmit+0x2c>
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e066      	b.n	80064f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2221      	movs	r2, #33	@ 0x21
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006436:	f7fc fafd 	bl	8002a34 <HAL_GetTick>
 800643a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	88fa      	ldrh	r2, [r7, #6]
 8006446:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006450:	d108      	bne.n	8006464 <HAL_UART_Transmit+0x6c>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	e003      	b.n	800646c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800646c:	e02a      	b.n	80064c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	2180      	movs	r1, #128	@ 0x80
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fb8b 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e036      	b.n	80064f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10b      	bne.n	80064a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	3302      	adds	r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
 80064a4:	e007      	b.n	80064b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1cf      	bne.n	800646e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2140      	movs	r1, #64	@ 0x40
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fb5b 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e006      	b.n	80064f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
  }
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b08a      	sub	sp, #40	@ 0x28
 8006502:	af02      	add	r7, sp, #8
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	d17c      	bne.n	8006618 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_UART_Receive+0x2c>
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e075      	b.n	800661a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2222      	movs	r2, #34	@ 0x22
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006542:	f7fc fa77 	bl	8002a34 <HAL_GetTick>
 8006546:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	88fa      	ldrh	r2, [r7, #6]
 8006552:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655c:	d108      	bne.n	8006570 <HAL_UART_Receive+0x72>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e003      	b.n	8006578 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006574:	2300      	movs	r3, #0
 8006576:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006578:	e043      	b.n	8006602 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	2120      	movs	r1, #32
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fb05 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e042      	b.n	800661a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10c      	bne.n	80065b4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	3302      	adds	r3, #2
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	e01f      	b.n	80065f4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065bc:	d007      	beq.n	80065ce <HAL_UART_Receive+0xd0>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <HAL_UART_Receive+0xde>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e008      	b.n	80065ee <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3301      	adds	r3, #1
 80065f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1b6      	bne.n	800657a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b0ba      	sub	sp, #232	@ 0xe8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800664a:	2300      	movs	r3, #0
 800664c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_UART_IRQHandler+0x66>
 8006676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fbd1 	bl	8006e2a <UART_Receive_IT>
      return;
 8006688:	e25b      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800668a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80de 	beq.w	8006850 <HAL_UART_IRQHandler+0x22c>
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80d1 	beq.w	8006850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_UART_IRQHandler+0xae>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xd2>
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ee:	f043 0202 	orr.w	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <HAL_UART_IRQHandler+0xf6>
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f043 0204 	orr.w	r2, r3, #4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800671a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <HAL_UART_IRQHandler+0x126>
 8006726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d105      	bne.n	800673e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 81f2 	beq.w	8006b38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x14e>
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fb5c 	bl	8006e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_UART_IRQHandler+0x17a>
 8006796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d04f      	beq.n	800683e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa66 	bl	8006c70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d041      	beq.n	8006836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3314      	adds	r3, #20
 80067da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1d9      	bne.n	80067b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680a:	4a7e      	ldr	r2, [pc, #504]	@ (8006a04 <HAL_UART_IRQHandler+0x3e0>)
 800680c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006812:	4618      	mov	r0, r3
 8006814:	f7fc ffd2 	bl	80037bc <HAL_DMA_Abort_IT>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e00e      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f99c 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	e00a      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f998 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	e006      	b.n	800684c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f994 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800684a:	e175      	b.n	8006b38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	bf00      	nop
    return;
 800684e:	e173      	b.n	8006b38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 814f 	bne.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685e:	f003 0310 	and.w	r3, r3, #16
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8148 	beq.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8141 	beq.w	8006af8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006876:	2300      	movs	r3, #0
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80b6 	beq.w	8006a08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8145 	beq.w	8006b3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ba:	429a      	cmp	r2, r3
 80068bc:	f080 813e 	bcs.w	8006b3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	f000 8088 	beq.w	80069e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006900:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006904:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800690c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1d9      	bne.n	80068d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006930:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006944:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006948:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800694c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e1      	bne.n	8006920 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3314      	adds	r3, #20
 8006962:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800696c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800696e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3314      	adds	r3, #20
 800697c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006980:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006982:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006986:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800698e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e3      	bne.n	800695c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069b4:	f023 0310 	bic.w	r3, r3, #16
 80069b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e3      	bne.n	80069a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fc feb0 	bl	8003744 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8bf 	bl	8006b7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a00:	e09c      	b.n	8006b3c <HAL_UART_IRQHandler+0x518>
 8006a02:	bf00      	nop
 8006a04:	08006d35 	.word	0x08006d35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 808e 	beq.w	8006b40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8089 	beq.w	8006b40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a52:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e3      	bne.n	8006a2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	623b      	str	r3, [r7, #32]
   return(result);
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0310 	bic.w	r3, r3, #16
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f844 	bl	8006b7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af6:	e023      	b.n	8006b40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <HAL_UART_IRQHandler+0x4f4>
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f923 	bl	8006d5c <UART_Transmit_IT>
    return;
 8006b16:	e014      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00e      	beq.n	8006b42 <HAL_UART_IRQHandler+0x51e>
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f962 	bl	8006dfa <UART_EndTransmit_IT>
    return;
 8006b36:	e004      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b38:	bf00      	nop
 8006b3a:	e002      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b40:	bf00      	nop
  }
}
 8006b42:	37e8      	adds	r7, #232	@ 0xe8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr

08006b7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b090      	sub	sp, #64	@ 0x40
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba4:	e050      	b.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d04c      	beq.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb4:	f7fb ff3e 	bl	8002a34 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d241      	bcs.n	8006c48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	330c      	adds	r3, #12
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006be4:	637a      	str	r2, [r7, #52]	@ 0x34
 8006be6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	613b      	str	r3, [r7, #16]
   return(result);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f023 0301 	bic.w	r3, r3, #1
 8006c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c18:	623a      	str	r2, [r7, #32]
 8006c1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	69f9      	ldr	r1, [r7, #28]
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e5      	bne.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e00f      	b.n	8006c68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4013      	ands	r3, r2
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	bf0c      	ite	eq
 8006c58:	2301      	moveq	r3, #1
 8006c5a:	2300      	movne	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d09f      	beq.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3740      	adds	r7, #64	@ 0x40
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b095      	sub	sp, #84	@ 0x54
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c98:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3314      	adds	r3, #20
 8006cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d119      	bne.n	8006d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d08:	61ba      	str	r2, [r7, #24]
 8006d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6979      	ldr	r1, [r7, #20]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	613b      	str	r3, [r7, #16]
   return(result);
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e5      	bne.n	8006ce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d2a:	bf00      	nop
 8006d2c:	3754      	adds	r7, #84	@ 0x54
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ff0c 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b21      	cmp	r3, #33	@ 0x21
 8006d6e:	d13e      	bne.n	8006dee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d78:	d114      	bne.n	8006da4 <UART_Transmit_IT+0x48>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d110      	bne.n	8006da4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	1c9a      	adds	r2, r3, #2
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	621a      	str	r2, [r3, #32]
 8006da2:	e008      	b.n	8006db6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	1c59      	adds	r1, r3, #1
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6211      	str	r1, [r2, #32]
 8006dae:	781a      	ldrb	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10f      	bne.n	8006dea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006de8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e000      	b.n	8006df0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fe94 	bl	8006b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b08c      	sub	sp, #48	@ 0x30
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b22      	cmp	r3, #34	@ 0x22
 8006e3c:	f040 80ae 	bne.w	8006f9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e48:	d117      	bne.n	8006e7a <UART_Receive_IT+0x50>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d113      	bne.n	8006e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	1c9a      	adds	r2, r3, #2
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e78:	e026      	b.n	8006ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8c:	d007      	beq.n	8006e9e <UART_Receive_IT+0x74>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <UART_Receive_IT+0x82>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e008      	b.n	8006ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d15d      	bne.n	8006f98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0220 	bic.w	r2, r2, #32
 8006eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d135      	bne.n	8006f8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	613b      	str	r3, [r7, #16]
   return(result);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f023 0310 	bic.w	r3, r3, #16
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f48:	623a      	str	r2, [r7, #32]
 8006f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	69f9      	ldr	r1, [r7, #28]
 8006f4e:	6a3a      	ldr	r2, [r7, #32]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e5      	bne.n	8006f28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d10a      	bne.n	8006f80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff fdf9 	bl	8006b7e <HAL_UARTEx_RxEventCallback>
 8006f8c:	e002      	b.n	8006f94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fde3 	bl	8006b5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	e002      	b.n	8006f9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e000      	b.n	8006f9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f9c:	2302      	movs	r3, #2
  }
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3730      	adds	r7, #48	@ 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006fe2:	f023 030c 	bic.w	r3, r3, #12
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a2c      	ldr	r2, [pc, #176]	@ (80070bc <UART_SetConfig+0x114>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d103      	bne.n	8007018 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fe fc9a 	bl	8005948 <HAL_RCC_GetPCLK2Freq>
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	e002      	b.n	800701e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007018:	f7fe fc82 	bl	8005920 <HAL_RCC_GetPCLK1Freq>
 800701c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009a      	lsls	r2, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	fbb2 f3f3 	udiv	r3, r2, r3
 8007034:	4a22      	ldr	r2, [pc, #136]	@ (80070c0 <UART_SetConfig+0x118>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	0119      	lsls	r1, r3, #4
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009a      	lsls	r2, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	fbb2 f2f3 	udiv	r2, r2, r3
 8007054:	4b1a      	ldr	r3, [pc, #104]	@ (80070c0 <UART_SetConfig+0x118>)
 8007056:	fba3 0302 	umull	r0, r3, r3, r2
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	2064      	movs	r0, #100	@ 0x64
 800705e:	fb00 f303 	mul.w	r3, r0, r3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	3332      	adds	r3, #50	@ 0x32
 8007068:	4a15      	ldr	r2, [pc, #84]	@ (80070c0 <UART_SetConfig+0x118>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007074:	4419      	add	r1, r3
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009a      	lsls	r2, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	fbb2 f2f3 	udiv	r2, r2, r3
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <UART_SetConfig+0x118>)
 800708e:	fba3 0302 	umull	r0, r3, r3, r2
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	2064      	movs	r0, #100	@ 0x64
 8007096:	fb00 f303 	mul.w	r3, r0, r3
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	3332      	adds	r3, #50	@ 0x32
 80070a0:	4a07      	ldr	r2, [pc, #28]	@ (80070c0 <UART_SetConfig+0x118>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	440a      	add	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40013800 	.word	0x40013800
 80070c0:	51eb851f 	.word	0x51eb851f

080070c4 <sulp>:
 80070c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	460f      	mov	r7, r1
 80070ca:	4690      	mov	r8, r2
 80070cc:	f001 ffcc 	bl	8009068 <__ulp>
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	f1b8 0f00 	cmp.w	r8, #0
 80070d8:	d011      	beq.n	80070fe <sulp+0x3a>
 80070da:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80070de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dd0b      	ble.n	80070fe <sulp+0x3a>
 80070e6:	2400      	movs	r4, #0
 80070e8:	051b      	lsls	r3, r3, #20
 80070ea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80070ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	f7f9 f9ef 	bl	80004d8 <__aeabi_dmul>
 80070fa:	4604      	mov	r4, r0
 80070fc:	460d      	mov	r5, r1
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007108 <_strtod_l>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	b09f      	sub	sp, #124	@ 0x7c
 800710e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007110:	2200      	movs	r2, #0
 8007112:	460c      	mov	r4, r1
 8007114:	921a      	str	r2, [sp, #104]	@ 0x68
 8007116:	f04f 0a00 	mov.w	sl, #0
 800711a:	f04f 0b00 	mov.w	fp, #0
 800711e:	460a      	mov	r2, r1
 8007120:	9005      	str	r0, [sp, #20]
 8007122:	9219      	str	r2, [sp, #100]	@ 0x64
 8007124:	7811      	ldrb	r1, [r2, #0]
 8007126:	292b      	cmp	r1, #43	@ 0x2b
 8007128:	d048      	beq.n	80071bc <_strtod_l+0xb4>
 800712a:	d836      	bhi.n	800719a <_strtod_l+0x92>
 800712c:	290d      	cmp	r1, #13
 800712e:	d830      	bhi.n	8007192 <_strtod_l+0x8a>
 8007130:	2908      	cmp	r1, #8
 8007132:	d830      	bhi.n	8007196 <_strtod_l+0x8e>
 8007134:	2900      	cmp	r1, #0
 8007136:	d039      	beq.n	80071ac <_strtod_l+0xa4>
 8007138:	2200      	movs	r2, #0
 800713a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800713c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800713e:	782a      	ldrb	r2, [r5, #0]
 8007140:	2a30      	cmp	r2, #48	@ 0x30
 8007142:	f040 80b1 	bne.w	80072a8 <_strtod_l+0x1a0>
 8007146:	786a      	ldrb	r2, [r5, #1]
 8007148:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800714c:	2a58      	cmp	r2, #88	@ 0x58
 800714e:	d16c      	bne.n	800722a <_strtod_l+0x122>
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007154:	4a8e      	ldr	r2, [pc, #568]	@ (8007390 <_strtod_l+0x288>)
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	ab1a      	add	r3, sp, #104	@ 0x68
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	9805      	ldr	r0, [sp, #20]
 800715e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007160:	a919      	add	r1, sp, #100	@ 0x64
 8007162:	f001 f87d 	bl	8008260 <__gethex>
 8007166:	f010 060f 	ands.w	r6, r0, #15
 800716a:	4604      	mov	r4, r0
 800716c:	d005      	beq.n	800717a <_strtod_l+0x72>
 800716e:	2e06      	cmp	r6, #6
 8007170:	d126      	bne.n	80071c0 <_strtod_l+0xb8>
 8007172:	2300      	movs	r3, #0
 8007174:	3501      	adds	r5, #1
 8007176:	9519      	str	r5, [sp, #100]	@ 0x64
 8007178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800717a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 8584 	bne.w	8007c8a <_strtod_l+0xb82>
 8007182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007184:	b1bb      	cbz	r3, 80071b6 <_strtod_l+0xae>
 8007186:	4650      	mov	r0, sl
 8007188:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800718c:	b01f      	add	sp, #124	@ 0x7c
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	2920      	cmp	r1, #32
 8007194:	d1d0      	bne.n	8007138 <_strtod_l+0x30>
 8007196:	3201      	adds	r2, #1
 8007198:	e7c3      	b.n	8007122 <_strtod_l+0x1a>
 800719a:	292d      	cmp	r1, #45	@ 0x2d
 800719c:	d1cc      	bne.n	8007138 <_strtod_l+0x30>
 800719e:	2101      	movs	r1, #1
 80071a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80071a2:	1c51      	adds	r1, r2, #1
 80071a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80071a6:	7852      	ldrb	r2, [r2, #1]
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	d1c7      	bne.n	800713c <_strtod_l+0x34>
 80071ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f040 8568 	bne.w	8007c86 <_strtod_l+0xb7e>
 80071b6:	4650      	mov	r0, sl
 80071b8:	4659      	mov	r1, fp
 80071ba:	e7e7      	b.n	800718c <_strtod_l+0x84>
 80071bc:	2100      	movs	r1, #0
 80071be:	e7ef      	b.n	80071a0 <_strtod_l+0x98>
 80071c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071c2:	b13a      	cbz	r2, 80071d4 <_strtod_l+0xcc>
 80071c4:	2135      	movs	r1, #53	@ 0x35
 80071c6:	a81c      	add	r0, sp, #112	@ 0x70
 80071c8:	f002 f83e 	bl	8009248 <__copybits>
 80071cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ce:	9805      	ldr	r0, [sp, #20]
 80071d0:	f001 fc18 	bl	8008a04 <_Bfree>
 80071d4:	3e01      	subs	r6, #1
 80071d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80071d8:	2e04      	cmp	r6, #4
 80071da:	d806      	bhi.n	80071ea <_strtod_l+0xe2>
 80071dc:	e8df f006 	tbb	[pc, r6]
 80071e0:	201d0314 	.word	0x201d0314
 80071e4:	14          	.byte	0x14
 80071e5:	00          	.byte	0x00
 80071e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80071ea:	05e1      	lsls	r1, r4, #23
 80071ec:	bf48      	it	mi
 80071ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80071f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071f6:	0d1b      	lsrs	r3, r3, #20
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1bd      	bne.n	800717a <_strtod_l+0x72>
 80071fe:	f000 ff39 	bl	8008074 <__errno>
 8007202:	2322      	movs	r3, #34	@ 0x22
 8007204:	6003      	str	r3, [r0, #0]
 8007206:	e7b8      	b.n	800717a <_strtod_l+0x72>
 8007208:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800720c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007210:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007214:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007218:	e7e7      	b.n	80071ea <_strtod_l+0xe2>
 800721a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007394 <_strtod_l+0x28c>
 800721e:	e7e4      	b.n	80071ea <_strtod_l+0xe2>
 8007220:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007224:	f04f 3aff 	mov.w	sl, #4294967295
 8007228:	e7df      	b.n	80071ea <_strtod_l+0xe2>
 800722a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b30      	cmp	r3, #48	@ 0x30
 8007234:	d0f9      	beq.n	800722a <_strtod_l+0x122>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d09f      	beq.n	800717a <_strtod_l+0x72>
 800723a:	2301      	movs	r3, #1
 800723c:	9309      	str	r3, [sp, #36]	@ 0x24
 800723e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007240:	220a      	movs	r2, #10
 8007242:	930c      	str	r3, [sp, #48]	@ 0x30
 8007244:	2300      	movs	r3, #0
 8007246:	461f      	mov	r7, r3
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	930a      	str	r3, [sp, #40]	@ 0x28
 800724c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800724e:	7805      	ldrb	r5, [r0, #0]
 8007250:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007254:	b2d9      	uxtb	r1, r3
 8007256:	2909      	cmp	r1, #9
 8007258:	d928      	bls.n	80072ac <_strtod_l+0x1a4>
 800725a:	2201      	movs	r2, #1
 800725c:	494e      	ldr	r1, [pc, #312]	@ (8007398 <_strtod_l+0x290>)
 800725e:	f000 feb0 	bl	8007fc2 <strncmp>
 8007262:	2800      	cmp	r0, #0
 8007264:	d032      	beq.n	80072cc <_strtod_l+0x1c4>
 8007266:	2000      	movs	r0, #0
 8007268:	462a      	mov	r2, r5
 800726a:	4681      	mov	r9, r0
 800726c:	463d      	mov	r5, r7
 800726e:	4603      	mov	r3, r0
 8007270:	2a65      	cmp	r2, #101	@ 0x65
 8007272:	d001      	beq.n	8007278 <_strtod_l+0x170>
 8007274:	2a45      	cmp	r2, #69	@ 0x45
 8007276:	d114      	bne.n	80072a2 <_strtod_l+0x19a>
 8007278:	b91d      	cbnz	r5, 8007282 <_strtod_l+0x17a>
 800727a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800727c:	4302      	orrs	r2, r0
 800727e:	d095      	beq.n	80071ac <_strtod_l+0xa4>
 8007280:	2500      	movs	r5, #0
 8007282:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007284:	1c62      	adds	r2, r4, #1
 8007286:	9219      	str	r2, [sp, #100]	@ 0x64
 8007288:	7862      	ldrb	r2, [r4, #1]
 800728a:	2a2b      	cmp	r2, #43	@ 0x2b
 800728c:	d077      	beq.n	800737e <_strtod_l+0x276>
 800728e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007290:	d07b      	beq.n	800738a <_strtod_l+0x282>
 8007292:	f04f 0c00 	mov.w	ip, #0
 8007296:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800729a:	2909      	cmp	r1, #9
 800729c:	f240 8082 	bls.w	80073a4 <_strtod_l+0x29c>
 80072a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	e0a2      	b.n	80073ee <_strtod_l+0x2e6>
 80072a8:	2300      	movs	r3, #0
 80072aa:	e7c7      	b.n	800723c <_strtod_l+0x134>
 80072ac:	2f08      	cmp	r7, #8
 80072ae:	bfd5      	itete	le
 80072b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80072b2:	9908      	ldrgt	r1, [sp, #32]
 80072b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80072b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072bc:	f100 0001 	add.w	r0, r0, #1
 80072c0:	bfd4      	ite	le
 80072c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80072c4:	9308      	strgt	r3, [sp, #32]
 80072c6:	3701      	adds	r7, #1
 80072c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80072ca:	e7bf      	b.n	800724c <_strtod_l+0x144>
 80072cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80072d2:	785a      	ldrb	r2, [r3, #1]
 80072d4:	b37f      	cbz	r7, 8007336 <_strtod_l+0x22e>
 80072d6:	4681      	mov	r9, r0
 80072d8:	463d      	mov	r5, r7
 80072da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80072de:	2b09      	cmp	r3, #9
 80072e0:	d912      	bls.n	8007308 <_strtod_l+0x200>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e7c4      	b.n	8007270 <_strtod_l+0x168>
 80072e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072e8:	3001      	adds	r0, #1
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80072ee:	785a      	ldrb	r2, [r3, #1]
 80072f0:	2a30      	cmp	r2, #48	@ 0x30
 80072f2:	d0f8      	beq.n	80072e6 <_strtod_l+0x1de>
 80072f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	f200 84cb 	bhi.w	8007c94 <_strtod_l+0xb8c>
 80072fe:	4681      	mov	r9, r0
 8007300:	2000      	movs	r0, #0
 8007302:	4605      	mov	r5, r0
 8007304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007306:	930c      	str	r3, [sp, #48]	@ 0x30
 8007308:	3a30      	subs	r2, #48	@ 0x30
 800730a:	f100 0301 	add.w	r3, r0, #1
 800730e:	d02a      	beq.n	8007366 <_strtod_l+0x25e>
 8007310:	4499      	add	r9, r3
 8007312:	210a      	movs	r1, #10
 8007314:	462b      	mov	r3, r5
 8007316:	eb00 0c05 	add.w	ip, r0, r5
 800731a:	4563      	cmp	r3, ip
 800731c:	d10d      	bne.n	800733a <_strtod_l+0x232>
 800731e:	1c69      	adds	r1, r5, #1
 8007320:	4401      	add	r1, r0
 8007322:	4428      	add	r0, r5
 8007324:	2808      	cmp	r0, #8
 8007326:	dc16      	bgt.n	8007356 <_strtod_l+0x24e>
 8007328:	230a      	movs	r3, #10
 800732a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800732c:	fb03 2300 	mla	r3, r3, r0, r2
 8007330:	930a      	str	r3, [sp, #40]	@ 0x28
 8007332:	2300      	movs	r3, #0
 8007334:	e018      	b.n	8007368 <_strtod_l+0x260>
 8007336:	4638      	mov	r0, r7
 8007338:	e7da      	b.n	80072f0 <_strtod_l+0x1e8>
 800733a:	2b08      	cmp	r3, #8
 800733c:	f103 0301 	add.w	r3, r3, #1
 8007340:	dc03      	bgt.n	800734a <_strtod_l+0x242>
 8007342:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007344:	434e      	muls	r6, r1
 8007346:	960a      	str	r6, [sp, #40]	@ 0x28
 8007348:	e7e7      	b.n	800731a <_strtod_l+0x212>
 800734a:	2b10      	cmp	r3, #16
 800734c:	bfde      	ittt	le
 800734e:	9e08      	ldrle	r6, [sp, #32]
 8007350:	434e      	mulle	r6, r1
 8007352:	9608      	strle	r6, [sp, #32]
 8007354:	e7e1      	b.n	800731a <_strtod_l+0x212>
 8007356:	280f      	cmp	r0, #15
 8007358:	dceb      	bgt.n	8007332 <_strtod_l+0x22a>
 800735a:	230a      	movs	r3, #10
 800735c:	9808      	ldr	r0, [sp, #32]
 800735e:	fb03 2300 	mla	r3, r3, r0, r2
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	e7e5      	b.n	8007332 <_strtod_l+0x22a>
 8007366:	4629      	mov	r1, r5
 8007368:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800736a:	460d      	mov	r5, r1
 800736c:	1c50      	adds	r0, r2, #1
 800736e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007370:	7852      	ldrb	r2, [r2, #1]
 8007372:	4618      	mov	r0, r3
 8007374:	e7b1      	b.n	80072da <_strtod_l+0x1d2>
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	2301      	movs	r3, #1
 800737c:	e77d      	b.n	800727a <_strtod_l+0x172>
 800737e:	f04f 0c00 	mov.w	ip, #0
 8007382:	1ca2      	adds	r2, r4, #2
 8007384:	9219      	str	r2, [sp, #100]	@ 0x64
 8007386:	78a2      	ldrb	r2, [r4, #2]
 8007388:	e785      	b.n	8007296 <_strtod_l+0x18e>
 800738a:	f04f 0c01 	mov.w	ip, #1
 800738e:	e7f8      	b.n	8007382 <_strtod_l+0x27a>
 8007390:	0800b380 	.word	0x0800b380
 8007394:	7ff00000 	.word	0x7ff00000
 8007398:	0800b35e 	.word	0x0800b35e
 800739c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800739e:	1c51      	adds	r1, r2, #1
 80073a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80073a2:	7852      	ldrb	r2, [r2, #1]
 80073a4:	2a30      	cmp	r2, #48	@ 0x30
 80073a6:	d0f9      	beq.n	800739c <_strtod_l+0x294>
 80073a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80073ac:	2908      	cmp	r1, #8
 80073ae:	f63f af78 	bhi.w	80072a2 <_strtod_l+0x19a>
 80073b2:	f04f 080a 	mov.w	r8, #10
 80073b6:	3a30      	subs	r2, #48	@ 0x30
 80073b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80073be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073c0:	1c56      	adds	r6, r2, #1
 80073c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80073c4:	7852      	ldrb	r2, [r2, #1]
 80073c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80073ca:	f1be 0f09 	cmp.w	lr, #9
 80073ce:	d939      	bls.n	8007444 <_strtod_l+0x33c>
 80073d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80073d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80073d6:	1a76      	subs	r6, r6, r1
 80073d8:	2e08      	cmp	r6, #8
 80073da:	dc03      	bgt.n	80073e4 <_strtod_l+0x2dc>
 80073dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073de:	4588      	cmp	r8, r1
 80073e0:	bfa8      	it	ge
 80073e2:	4688      	movge	r8, r1
 80073e4:	f1bc 0f00 	cmp.w	ip, #0
 80073e8:	d001      	beq.n	80073ee <_strtod_l+0x2e6>
 80073ea:	f1c8 0800 	rsb	r8, r8, #0
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	d14e      	bne.n	8007490 <_strtod_l+0x388>
 80073f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073f4:	4308      	orrs	r0, r1
 80073f6:	f47f aec0 	bne.w	800717a <_strtod_l+0x72>
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f47f aed6 	bne.w	80071ac <_strtod_l+0xa4>
 8007400:	2a69      	cmp	r2, #105	@ 0x69
 8007402:	d028      	beq.n	8007456 <_strtod_l+0x34e>
 8007404:	dc25      	bgt.n	8007452 <_strtod_l+0x34a>
 8007406:	2a49      	cmp	r2, #73	@ 0x49
 8007408:	d025      	beq.n	8007456 <_strtod_l+0x34e>
 800740a:	2a4e      	cmp	r2, #78	@ 0x4e
 800740c:	f47f aece 	bne.w	80071ac <_strtod_l+0xa4>
 8007410:	499a      	ldr	r1, [pc, #616]	@ (800767c <_strtod_l+0x574>)
 8007412:	a819      	add	r0, sp, #100	@ 0x64
 8007414:	f001 f946 	bl	80086a4 <__match>
 8007418:	2800      	cmp	r0, #0
 800741a:	f43f aec7 	beq.w	80071ac <_strtod_l+0xa4>
 800741e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b28      	cmp	r3, #40	@ 0x28
 8007424:	d12e      	bne.n	8007484 <_strtod_l+0x37c>
 8007426:	4996      	ldr	r1, [pc, #600]	@ (8007680 <_strtod_l+0x578>)
 8007428:	aa1c      	add	r2, sp, #112	@ 0x70
 800742a:	a819      	add	r0, sp, #100	@ 0x64
 800742c:	f001 f94e 	bl	80086cc <__hexnan>
 8007430:	2805      	cmp	r0, #5
 8007432:	d127      	bne.n	8007484 <_strtod_l+0x37c>
 8007434:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007436:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800743a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800743e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007442:	e69a      	b.n	800717a <_strtod_l+0x72>
 8007444:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007446:	fb08 2101 	mla	r1, r8, r1, r2
 800744a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800744e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007450:	e7b5      	b.n	80073be <_strtod_l+0x2b6>
 8007452:	2a6e      	cmp	r2, #110	@ 0x6e
 8007454:	e7da      	b.n	800740c <_strtod_l+0x304>
 8007456:	498b      	ldr	r1, [pc, #556]	@ (8007684 <_strtod_l+0x57c>)
 8007458:	a819      	add	r0, sp, #100	@ 0x64
 800745a:	f001 f923 	bl	80086a4 <__match>
 800745e:	2800      	cmp	r0, #0
 8007460:	f43f aea4 	beq.w	80071ac <_strtod_l+0xa4>
 8007464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007466:	4988      	ldr	r1, [pc, #544]	@ (8007688 <_strtod_l+0x580>)
 8007468:	3b01      	subs	r3, #1
 800746a:	a819      	add	r0, sp, #100	@ 0x64
 800746c:	9319      	str	r3, [sp, #100]	@ 0x64
 800746e:	f001 f919 	bl	80086a4 <__match>
 8007472:	b910      	cbnz	r0, 800747a <_strtod_l+0x372>
 8007474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007476:	3301      	adds	r3, #1
 8007478:	9319      	str	r3, [sp, #100]	@ 0x64
 800747a:	f04f 0a00 	mov.w	sl, #0
 800747e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800768c <_strtod_l+0x584>
 8007482:	e67a      	b.n	800717a <_strtod_l+0x72>
 8007484:	4882      	ldr	r0, [pc, #520]	@ (8007690 <_strtod_l+0x588>)
 8007486:	f000 fe31 	bl	80080ec <nan>
 800748a:	4682      	mov	sl, r0
 800748c:	468b      	mov	fp, r1
 800748e:	e674      	b.n	800717a <_strtod_l+0x72>
 8007490:	eba8 0309 	sub.w	r3, r8, r9
 8007494:	2f00      	cmp	r7, #0
 8007496:	bf08      	it	eq
 8007498:	462f      	moveq	r7, r5
 800749a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800749c:	2d10      	cmp	r5, #16
 800749e:	462c      	mov	r4, r5
 80074a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a2:	bfa8      	it	ge
 80074a4:	2410      	movge	r4, #16
 80074a6:	f7f8 ff9d 	bl	80003e4 <__aeabi_ui2d>
 80074aa:	2d09      	cmp	r5, #9
 80074ac:	4682      	mov	sl, r0
 80074ae:	468b      	mov	fp, r1
 80074b0:	dc11      	bgt.n	80074d6 <_strtod_l+0x3ce>
 80074b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f43f ae60 	beq.w	800717a <_strtod_l+0x72>
 80074ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074bc:	dd76      	ble.n	80075ac <_strtod_l+0x4a4>
 80074be:	2b16      	cmp	r3, #22
 80074c0:	dc5d      	bgt.n	800757e <_strtod_l+0x476>
 80074c2:	4974      	ldr	r1, [pc, #464]	@ (8007694 <_strtod_l+0x58c>)
 80074c4:	4652      	mov	r2, sl
 80074c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ca:	465b      	mov	r3, fp
 80074cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d0:	f7f9 f802 	bl	80004d8 <__aeabi_dmul>
 80074d4:	e7d9      	b.n	800748a <_strtod_l+0x382>
 80074d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007694 <_strtod_l+0x58c>)
 80074d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80074e0:	f7f8 fffa 	bl	80004d8 <__aeabi_dmul>
 80074e4:	4682      	mov	sl, r0
 80074e6:	9808      	ldr	r0, [sp, #32]
 80074e8:	468b      	mov	fp, r1
 80074ea:	f7f8 ff7b 	bl	80003e4 <__aeabi_ui2d>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4650      	mov	r0, sl
 80074f4:	4659      	mov	r1, fp
 80074f6:	f7f8 fe39 	bl	800016c <__adddf3>
 80074fa:	2d0f      	cmp	r5, #15
 80074fc:	4682      	mov	sl, r0
 80074fe:	468b      	mov	fp, r1
 8007500:	ddd7      	ble.n	80074b2 <_strtod_l+0x3aa>
 8007502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007504:	1b2c      	subs	r4, r5, r4
 8007506:	441c      	add	r4, r3
 8007508:	2c00      	cmp	r4, #0
 800750a:	f340 8096 	ble.w	800763a <_strtod_l+0x532>
 800750e:	f014 030f 	ands.w	r3, r4, #15
 8007512:	d00a      	beq.n	800752a <_strtod_l+0x422>
 8007514:	495f      	ldr	r1, [pc, #380]	@ (8007694 <_strtod_l+0x58c>)
 8007516:	4652      	mov	r2, sl
 8007518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800751c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007520:	465b      	mov	r3, fp
 8007522:	f7f8 ffd9 	bl	80004d8 <__aeabi_dmul>
 8007526:	4682      	mov	sl, r0
 8007528:	468b      	mov	fp, r1
 800752a:	f034 040f 	bics.w	r4, r4, #15
 800752e:	d073      	beq.n	8007618 <_strtod_l+0x510>
 8007530:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007534:	dd48      	ble.n	80075c8 <_strtod_l+0x4c0>
 8007536:	2400      	movs	r4, #0
 8007538:	46a0      	mov	r8, r4
 800753a:	46a1      	mov	r9, r4
 800753c:	940a      	str	r4, [sp, #40]	@ 0x28
 800753e:	2322      	movs	r3, #34	@ 0x22
 8007540:	f04f 0a00 	mov.w	sl, #0
 8007544:	9a05      	ldr	r2, [sp, #20]
 8007546:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800768c <_strtod_l+0x584>
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	f43f ae13 	beq.w	800717a <_strtod_l+0x72>
 8007554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007556:	9805      	ldr	r0, [sp, #20]
 8007558:	f001 fa54 	bl	8008a04 <_Bfree>
 800755c:	4649      	mov	r1, r9
 800755e:	9805      	ldr	r0, [sp, #20]
 8007560:	f001 fa50 	bl	8008a04 <_Bfree>
 8007564:	4641      	mov	r1, r8
 8007566:	9805      	ldr	r0, [sp, #20]
 8007568:	f001 fa4c 	bl	8008a04 <_Bfree>
 800756c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800756e:	9805      	ldr	r0, [sp, #20]
 8007570:	f001 fa48 	bl	8008a04 <_Bfree>
 8007574:	4621      	mov	r1, r4
 8007576:	9805      	ldr	r0, [sp, #20]
 8007578:	f001 fa44 	bl	8008a04 <_Bfree>
 800757c:	e5fd      	b.n	800717a <_strtod_l+0x72>
 800757e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007580:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007584:	4293      	cmp	r3, r2
 8007586:	dbbc      	blt.n	8007502 <_strtod_l+0x3fa>
 8007588:	4c42      	ldr	r4, [pc, #264]	@ (8007694 <_strtod_l+0x58c>)
 800758a:	f1c5 050f 	rsb	r5, r5, #15
 800758e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007592:	4652      	mov	r2, sl
 8007594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007598:	465b      	mov	r3, fp
 800759a:	f7f8 ff9d 	bl	80004d8 <__aeabi_dmul>
 800759e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a0:	1b5d      	subs	r5, r3, r5
 80075a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075aa:	e791      	b.n	80074d0 <_strtod_l+0x3c8>
 80075ac:	3316      	adds	r3, #22
 80075ae:	dba8      	blt.n	8007502 <_strtod_l+0x3fa>
 80075b0:	4b38      	ldr	r3, [pc, #224]	@ (8007694 <_strtod_l+0x58c>)
 80075b2:	eba9 0808 	sub.w	r8, r9, r8
 80075b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80075ba:	4650      	mov	r0, sl
 80075bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80075c0:	4659      	mov	r1, fp
 80075c2:	f7f9 f8b3 	bl	800072c <__aeabi_ddiv>
 80075c6:	e760      	b.n	800748a <_strtod_l+0x382>
 80075c8:	4b33      	ldr	r3, [pc, #204]	@ (8007698 <_strtod_l+0x590>)
 80075ca:	4650      	mov	r0, sl
 80075cc:	9308      	str	r3, [sp, #32]
 80075ce:	2300      	movs	r3, #0
 80075d0:	4659      	mov	r1, fp
 80075d2:	461e      	mov	r6, r3
 80075d4:	1124      	asrs	r4, r4, #4
 80075d6:	2c01      	cmp	r4, #1
 80075d8:	dc21      	bgt.n	800761e <_strtod_l+0x516>
 80075da:	b10b      	cbz	r3, 80075e0 <_strtod_l+0x4d8>
 80075dc:	4682      	mov	sl, r0
 80075de:	468b      	mov	fp, r1
 80075e0:	492d      	ldr	r1, [pc, #180]	@ (8007698 <_strtod_l+0x590>)
 80075e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80075e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80075ea:	4652      	mov	r2, sl
 80075ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f0:	465b      	mov	r3, fp
 80075f2:	f7f8 ff71 	bl	80004d8 <__aeabi_dmul>
 80075f6:	4b25      	ldr	r3, [pc, #148]	@ (800768c <_strtod_l+0x584>)
 80075f8:	460a      	mov	r2, r1
 80075fa:	400b      	ands	r3, r1
 80075fc:	4927      	ldr	r1, [pc, #156]	@ (800769c <_strtod_l+0x594>)
 80075fe:	4682      	mov	sl, r0
 8007600:	428b      	cmp	r3, r1
 8007602:	d898      	bhi.n	8007536 <_strtod_l+0x42e>
 8007604:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007608:	428b      	cmp	r3, r1
 800760a:	bf86      	itte	hi
 800760c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007610:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80076a0 <_strtod_l+0x598>
 8007614:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007618:	2300      	movs	r3, #0
 800761a:	9308      	str	r3, [sp, #32]
 800761c:	e07a      	b.n	8007714 <_strtod_l+0x60c>
 800761e:	07e2      	lsls	r2, r4, #31
 8007620:	d505      	bpl.n	800762e <_strtod_l+0x526>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 ff56 	bl	80004d8 <__aeabi_dmul>
 800762c:	2301      	movs	r3, #1
 800762e:	9a08      	ldr	r2, [sp, #32]
 8007630:	3601      	adds	r6, #1
 8007632:	3208      	adds	r2, #8
 8007634:	1064      	asrs	r4, r4, #1
 8007636:	9208      	str	r2, [sp, #32]
 8007638:	e7cd      	b.n	80075d6 <_strtod_l+0x4ce>
 800763a:	d0ed      	beq.n	8007618 <_strtod_l+0x510>
 800763c:	4264      	negs	r4, r4
 800763e:	f014 020f 	ands.w	r2, r4, #15
 8007642:	d00a      	beq.n	800765a <_strtod_l+0x552>
 8007644:	4b13      	ldr	r3, [pc, #76]	@ (8007694 <_strtod_l+0x58c>)
 8007646:	4650      	mov	r0, sl
 8007648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800764c:	4659      	mov	r1, fp
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f9 f86b 	bl	800072c <__aeabi_ddiv>
 8007656:	4682      	mov	sl, r0
 8007658:	468b      	mov	fp, r1
 800765a:	1124      	asrs	r4, r4, #4
 800765c:	d0dc      	beq.n	8007618 <_strtod_l+0x510>
 800765e:	2c1f      	cmp	r4, #31
 8007660:	dd20      	ble.n	80076a4 <_strtod_l+0x59c>
 8007662:	2400      	movs	r4, #0
 8007664:	46a0      	mov	r8, r4
 8007666:	46a1      	mov	r9, r4
 8007668:	940a      	str	r4, [sp, #40]	@ 0x28
 800766a:	2322      	movs	r3, #34	@ 0x22
 800766c:	9a05      	ldr	r2, [sp, #20]
 800766e:	f04f 0a00 	mov.w	sl, #0
 8007672:	f04f 0b00 	mov.w	fp, #0
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e768      	b.n	800754c <_strtod_l+0x444>
 800767a:	bf00      	nop
 800767c:	0800b369 	.word	0x0800b369
 8007680:	0800b36c 	.word	0x0800b36c
 8007684:	0800b360 	.word	0x0800b360
 8007688:	0800b363 	.word	0x0800b363
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	0800b717 	.word	0x0800b717
 8007694:	0800b4e0 	.word	0x0800b4e0
 8007698:	0800b4b8 	.word	0x0800b4b8
 800769c:	7ca00000 	.word	0x7ca00000
 80076a0:	7fefffff 	.word	0x7fefffff
 80076a4:	f014 0310 	ands.w	r3, r4, #16
 80076a8:	bf18      	it	ne
 80076aa:	236a      	movne	r3, #106	@ 0x6a
 80076ac:	4650      	mov	r0, sl
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	4659      	mov	r1, fp
 80076b2:	2300      	movs	r3, #0
 80076b4:	4ea9      	ldr	r6, [pc, #676]	@ (800795c <_strtod_l+0x854>)
 80076b6:	07e2      	lsls	r2, r4, #31
 80076b8:	d504      	bpl.n	80076c4 <_strtod_l+0x5bc>
 80076ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076be:	f7f8 ff0b 	bl	80004d8 <__aeabi_dmul>
 80076c2:	2301      	movs	r3, #1
 80076c4:	1064      	asrs	r4, r4, #1
 80076c6:	f106 0608 	add.w	r6, r6, #8
 80076ca:	d1f4      	bne.n	80076b6 <_strtod_l+0x5ae>
 80076cc:	b10b      	cbz	r3, 80076d2 <_strtod_l+0x5ca>
 80076ce:	4682      	mov	sl, r0
 80076d0:	468b      	mov	fp, r1
 80076d2:	9b08      	ldr	r3, [sp, #32]
 80076d4:	b1b3      	cbz	r3, 8007704 <_strtod_l+0x5fc>
 80076d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80076de:	2b00      	cmp	r3, #0
 80076e0:	4659      	mov	r1, fp
 80076e2:	dd0f      	ble.n	8007704 <_strtod_l+0x5fc>
 80076e4:	2b1f      	cmp	r3, #31
 80076e6:	dd57      	ble.n	8007798 <_strtod_l+0x690>
 80076e8:	2b34      	cmp	r3, #52	@ 0x34
 80076ea:	bfd8      	it	le
 80076ec:	f04f 33ff 	movle.w	r3, #4294967295
 80076f0:	f04f 0a00 	mov.w	sl, #0
 80076f4:	bfcf      	iteee	gt
 80076f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80076fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80076fe:	4093      	lslle	r3, r2
 8007700:	ea03 0b01 	andle.w	fp, r3, r1
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	f7f9 f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8007710:	2800      	cmp	r0, #0
 8007712:	d1a6      	bne.n	8007662 <_strtod_l+0x55a>
 8007714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007716:	463a      	mov	r2, r7
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800771c:	462b      	mov	r3, r5
 800771e:	9805      	ldr	r0, [sp, #20]
 8007720:	f001 f9d8 	bl	8008ad4 <__s2b>
 8007724:	900a      	str	r0, [sp, #40]	@ 0x28
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f af05 	beq.w	8007536 <_strtod_l+0x42e>
 800772c:	2400      	movs	r4, #0
 800772e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007730:	eba9 0308 	sub.w	r3, r9, r8
 8007734:	2a00      	cmp	r2, #0
 8007736:	bfa8      	it	ge
 8007738:	2300      	movge	r3, #0
 800773a:	46a0      	mov	r8, r4
 800773c:	9312      	str	r3, [sp, #72]	@ 0x48
 800773e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007742:	9316      	str	r3, [sp, #88]	@ 0x58
 8007744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	f001 f91b 	bl	8008984 <_Balloc>
 800774e:	4681      	mov	r9, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	f43f aef4 	beq.w	800753e <_strtod_l+0x436>
 8007756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007758:	300c      	adds	r0, #12
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	f103 010c 	add.w	r1, r3, #12
 8007760:	3202      	adds	r2, #2
 8007762:	0092      	lsls	r2, r2, #2
 8007764:	f000 fcb3 	bl	80080ce <memcpy>
 8007768:	ab1c      	add	r3, sp, #112	@ 0x70
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	4652      	mov	r2, sl
 8007772:	465b      	mov	r3, fp
 8007774:	9805      	ldr	r0, [sp, #20]
 8007776:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800777a:	f001 fcdd 	bl	8009138 <__d2b>
 800777e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007780:	2800      	cmp	r0, #0
 8007782:	f43f aedc 	beq.w	800753e <_strtod_l+0x436>
 8007786:	2101      	movs	r1, #1
 8007788:	9805      	ldr	r0, [sp, #20]
 800778a:	f001 fa39 	bl	8008c00 <__i2b>
 800778e:	4680      	mov	r8, r0
 8007790:	b948      	cbnz	r0, 80077a6 <_strtod_l+0x69e>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	e6d2      	b.n	800753e <_strtod_l+0x436>
 8007798:	f04f 32ff 	mov.w	r2, #4294967295
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	ea03 0a0a 	and.w	sl, r3, sl
 80077a4:	e7ae      	b.n	8007704 <_strtod_l+0x5fc>
 80077a6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80077a8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	bfab      	itete	ge
 80077ae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80077b0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80077b2:	18ef      	addge	r7, r5, r3
 80077b4:	1b5e      	sublt	r6, r3, r5
 80077b6:	9b08      	ldr	r3, [sp, #32]
 80077b8:	bfa8      	it	ge
 80077ba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80077bc:	eba5 0503 	sub.w	r5, r5, r3
 80077c0:	4415      	add	r5, r2
 80077c2:	4b67      	ldr	r3, [pc, #412]	@ (8007960 <_strtod_l+0x858>)
 80077c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80077c8:	bfb8      	it	lt
 80077ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80077cc:	429d      	cmp	r5, r3
 80077ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80077d2:	da50      	bge.n	8007876 <_strtod_l+0x76e>
 80077d4:	1b5b      	subs	r3, r3, r5
 80077d6:	2b1f      	cmp	r3, #31
 80077d8:	f04f 0101 	mov.w	r1, #1
 80077dc:	eba2 0203 	sub.w	r2, r2, r3
 80077e0:	dc3d      	bgt.n	800785e <_strtod_l+0x756>
 80077e2:	fa01 f303 	lsl.w	r3, r1, r3
 80077e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077e8:	2300      	movs	r3, #0
 80077ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80077ec:	18bd      	adds	r5, r7, r2
 80077ee:	9b08      	ldr	r3, [sp, #32]
 80077f0:	42af      	cmp	r7, r5
 80077f2:	4416      	add	r6, r2
 80077f4:	441e      	add	r6, r3
 80077f6:	463b      	mov	r3, r7
 80077f8:	bfa8      	it	ge
 80077fa:	462b      	movge	r3, r5
 80077fc:	42b3      	cmp	r3, r6
 80077fe:	bfa8      	it	ge
 8007800:	4633      	movge	r3, r6
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfc2      	ittt	gt
 8007806:	1aed      	subgt	r5, r5, r3
 8007808:	1af6      	subgt	r6, r6, r3
 800780a:	1aff      	subgt	r7, r7, r3
 800780c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd16      	ble.n	8007840 <_strtod_l+0x738>
 8007812:	4641      	mov	r1, r8
 8007814:	461a      	mov	r2, r3
 8007816:	9805      	ldr	r0, [sp, #20]
 8007818:	f001 fab0 	bl	8008d7c <__pow5mult>
 800781c:	4680      	mov	r8, r0
 800781e:	2800      	cmp	r0, #0
 8007820:	d0b7      	beq.n	8007792 <_strtod_l+0x68a>
 8007822:	4601      	mov	r1, r0
 8007824:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007826:	9805      	ldr	r0, [sp, #20]
 8007828:	f001 fa00 	bl	8008c2c <__multiply>
 800782c:	900e      	str	r0, [sp, #56]	@ 0x38
 800782e:	2800      	cmp	r0, #0
 8007830:	f43f ae85 	beq.w	800753e <_strtod_l+0x436>
 8007834:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007836:	9805      	ldr	r0, [sp, #20]
 8007838:	f001 f8e4 	bl	8008a04 <_Bfree>
 800783c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007840:	2d00      	cmp	r5, #0
 8007842:	dc1d      	bgt.n	8007880 <_strtod_l+0x778>
 8007844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007846:	2b00      	cmp	r3, #0
 8007848:	dd23      	ble.n	8007892 <_strtod_l+0x78a>
 800784a:	4649      	mov	r1, r9
 800784c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800784e:	9805      	ldr	r0, [sp, #20]
 8007850:	f001 fa94 	bl	8008d7c <__pow5mult>
 8007854:	4681      	mov	r9, r0
 8007856:	b9e0      	cbnz	r0, 8007892 <_strtod_l+0x78a>
 8007858:	f04f 0900 	mov.w	r9, #0
 800785c:	e66f      	b.n	800753e <_strtod_l+0x436>
 800785e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007862:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007866:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800786a:	35e2      	adds	r5, #226	@ 0xe2
 800786c:	fa01 f305 	lsl.w	r3, r1, r5
 8007870:	9310      	str	r3, [sp, #64]	@ 0x40
 8007872:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007874:	e7ba      	b.n	80077ec <_strtod_l+0x6e4>
 8007876:	2300      	movs	r3, #0
 8007878:	9310      	str	r3, [sp, #64]	@ 0x40
 800787a:	2301      	movs	r3, #1
 800787c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800787e:	e7b5      	b.n	80077ec <_strtod_l+0x6e4>
 8007880:	462a      	mov	r2, r5
 8007882:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007884:	9805      	ldr	r0, [sp, #20]
 8007886:	f001 fad3 	bl	8008e30 <__lshift>
 800788a:	901a      	str	r0, [sp, #104]	@ 0x68
 800788c:	2800      	cmp	r0, #0
 800788e:	d1d9      	bne.n	8007844 <_strtod_l+0x73c>
 8007890:	e655      	b.n	800753e <_strtod_l+0x436>
 8007892:	2e00      	cmp	r6, #0
 8007894:	dd07      	ble.n	80078a6 <_strtod_l+0x79e>
 8007896:	4649      	mov	r1, r9
 8007898:	4632      	mov	r2, r6
 800789a:	9805      	ldr	r0, [sp, #20]
 800789c:	f001 fac8 	bl	8008e30 <__lshift>
 80078a0:	4681      	mov	r9, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d0d8      	beq.n	8007858 <_strtod_l+0x750>
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	dd08      	ble.n	80078bc <_strtod_l+0x7b4>
 80078aa:	4641      	mov	r1, r8
 80078ac:	463a      	mov	r2, r7
 80078ae:	9805      	ldr	r0, [sp, #20]
 80078b0:	f001 fabe 	bl	8008e30 <__lshift>
 80078b4:	4680      	mov	r8, r0
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f43f ae41 	beq.w	800753e <_strtod_l+0x436>
 80078bc:	464a      	mov	r2, r9
 80078be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078c0:	9805      	ldr	r0, [sp, #20]
 80078c2:	f001 fb3d 	bl	8008f40 <__mdiff>
 80078c6:	4604      	mov	r4, r0
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f43f ae38 	beq.w	800753e <_strtod_l+0x436>
 80078ce:	68c3      	ldr	r3, [r0, #12]
 80078d0:	4641      	mov	r1, r8
 80078d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078d4:	2300      	movs	r3, #0
 80078d6:	60c3      	str	r3, [r0, #12]
 80078d8:	f001 fb16 	bl	8008f08 <__mcmp>
 80078dc:	2800      	cmp	r0, #0
 80078de:	da45      	bge.n	800796c <_strtod_l+0x864>
 80078e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078e2:	ea53 030a 	orrs.w	r3, r3, sl
 80078e6:	d16b      	bne.n	80079c0 <_strtod_l+0x8b8>
 80078e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d167      	bne.n	80079c0 <_strtod_l+0x8b8>
 80078f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078f4:	0d1b      	lsrs	r3, r3, #20
 80078f6:	051b      	lsls	r3, r3, #20
 80078f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078fc:	d960      	bls.n	80079c0 <_strtod_l+0x8b8>
 80078fe:	6963      	ldr	r3, [r4, #20]
 8007900:	b913      	cbnz	r3, 8007908 <_strtod_l+0x800>
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	2b01      	cmp	r3, #1
 8007906:	dd5b      	ble.n	80079c0 <_strtod_l+0x8b8>
 8007908:	4621      	mov	r1, r4
 800790a:	2201      	movs	r2, #1
 800790c:	9805      	ldr	r0, [sp, #20]
 800790e:	f001 fa8f 	bl	8008e30 <__lshift>
 8007912:	4641      	mov	r1, r8
 8007914:	4604      	mov	r4, r0
 8007916:	f001 faf7 	bl	8008f08 <__mcmp>
 800791a:	2800      	cmp	r0, #0
 800791c:	dd50      	ble.n	80079c0 <_strtod_l+0x8b8>
 800791e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007922:	9a08      	ldr	r2, [sp, #32]
 8007924:	0d1b      	lsrs	r3, r3, #20
 8007926:	051b      	lsls	r3, r3, #20
 8007928:	2a00      	cmp	r2, #0
 800792a:	d06a      	beq.n	8007a02 <_strtod_l+0x8fa>
 800792c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007930:	d867      	bhi.n	8007a02 <_strtod_l+0x8fa>
 8007932:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007936:	f67f ae98 	bls.w	800766a <_strtod_l+0x562>
 800793a:	4650      	mov	r0, sl
 800793c:	4659      	mov	r1, fp
 800793e:	4b09      	ldr	r3, [pc, #36]	@ (8007964 <_strtod_l+0x85c>)
 8007940:	2200      	movs	r2, #0
 8007942:	f7f8 fdc9 	bl	80004d8 <__aeabi_dmul>
 8007946:	4b08      	ldr	r3, [pc, #32]	@ (8007968 <_strtod_l+0x860>)
 8007948:	4682      	mov	sl, r0
 800794a:	400b      	ands	r3, r1
 800794c:	468b      	mov	fp, r1
 800794e:	2b00      	cmp	r3, #0
 8007950:	f47f ae00 	bne.w	8007554 <_strtod_l+0x44c>
 8007954:	2322      	movs	r3, #34	@ 0x22
 8007956:	9a05      	ldr	r2, [sp, #20]
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e5fb      	b.n	8007554 <_strtod_l+0x44c>
 800795c:	0800b398 	.word	0x0800b398
 8007960:	fffffc02 	.word	0xfffffc02
 8007964:	39500000 	.word	0x39500000
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007970:	d165      	bne.n	8007a3e <_strtod_l+0x936>
 8007972:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007978:	b35a      	cbz	r2, 80079d2 <_strtod_l+0x8ca>
 800797a:	4a99      	ldr	r2, [pc, #612]	@ (8007be0 <_strtod_l+0xad8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d12b      	bne.n	80079d8 <_strtod_l+0x8d0>
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	4651      	mov	r1, sl
 8007984:	b303      	cbz	r3, 80079c8 <_strtod_l+0x8c0>
 8007986:	465a      	mov	r2, fp
 8007988:	4b96      	ldr	r3, [pc, #600]	@ (8007be4 <_strtod_l+0xadc>)
 800798a:	4013      	ands	r3, r2
 800798c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007990:	f04f 32ff 	mov.w	r2, #4294967295
 8007994:	d81b      	bhi.n	80079ce <_strtod_l+0x8c6>
 8007996:	0d1b      	lsrs	r3, r3, #20
 8007998:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	4299      	cmp	r1, r3
 80079a2:	d119      	bne.n	80079d8 <_strtod_l+0x8d0>
 80079a4:	4b90      	ldr	r3, [pc, #576]	@ (8007be8 <_strtod_l+0xae0>)
 80079a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d102      	bne.n	80079b2 <_strtod_l+0x8aa>
 80079ac:	3101      	adds	r1, #1
 80079ae:	f43f adc6 	beq.w	800753e <_strtod_l+0x436>
 80079b2:	f04f 0a00 	mov.w	sl, #0
 80079b6:	4b8b      	ldr	r3, [pc, #556]	@ (8007be4 <_strtod_l+0xadc>)
 80079b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ba:	401a      	ands	r2, r3
 80079bc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1b9      	bne.n	800793a <_strtod_l+0x832>
 80079c6:	e5c5      	b.n	8007554 <_strtod_l+0x44c>
 80079c8:	f04f 33ff 	mov.w	r3, #4294967295
 80079cc:	e7e8      	b.n	80079a0 <_strtod_l+0x898>
 80079ce:	4613      	mov	r3, r2
 80079d0:	e7e6      	b.n	80079a0 <_strtod_l+0x898>
 80079d2:	ea53 030a 	orrs.w	r3, r3, sl
 80079d6:	d0a2      	beq.n	800791e <_strtod_l+0x816>
 80079d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079da:	b1db      	cbz	r3, 8007a14 <_strtod_l+0x90c>
 80079dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079de:	4213      	tst	r3, r2
 80079e0:	d0ee      	beq.n	80079c0 <_strtod_l+0x8b8>
 80079e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e4:	4650      	mov	r0, sl
 80079e6:	4659      	mov	r1, fp
 80079e8:	9a08      	ldr	r2, [sp, #32]
 80079ea:	b1bb      	cbz	r3, 8007a1c <_strtod_l+0x914>
 80079ec:	f7ff fb6a 	bl	80070c4 <sulp>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079f8:	f7f8 fbb8 	bl	800016c <__adddf3>
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	e7de      	b.n	80079c0 <_strtod_l+0x8b8>
 8007a02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a0a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a12:	e7d5      	b.n	80079c0 <_strtod_l+0x8b8>
 8007a14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a16:	ea13 0f0a 	tst.w	r3, sl
 8007a1a:	e7e1      	b.n	80079e0 <_strtod_l+0x8d8>
 8007a1c:	f7ff fb52 	bl	80070c4 <sulp>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a28:	f7f8 fb9e 	bl	8000168 <__aeabi_dsub>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2300      	movs	r3, #0
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	f7f8 ffb8 	bl	80009a8 <__aeabi_dcmpeq>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d0c1      	beq.n	80079c0 <_strtod_l+0x8b8>
 8007a3c:	e615      	b.n	800766a <_strtod_l+0x562>
 8007a3e:	4641      	mov	r1, r8
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 fbd1 	bl	80091e8 <__ratio>
 8007a46:	2200      	movs	r2, #0
 8007a48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	f7f8 ffbe 	bl	80009d0 <__aeabi_dcmple>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d06d      	beq.n	8007b34 <_strtod_l+0xa2c>
 8007a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d178      	bne.n	8007b50 <_strtod_l+0xa48>
 8007a5e:	f1ba 0f00 	cmp.w	sl, #0
 8007a62:	d156      	bne.n	8007b12 <_strtod_l+0xa0a>
 8007a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d158      	bne.n	8007b20 <_strtod_l+0xa18>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4630      	mov	r0, r6
 8007a72:	4639      	mov	r1, r7
 8007a74:	4b5d      	ldr	r3, [pc, #372]	@ (8007bec <_strtod_l+0xae4>)
 8007a76:	f7f8 ffa1 	bl	80009bc <__aeabi_dcmplt>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d157      	bne.n	8007b2e <_strtod_l+0xa26>
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	2200      	movs	r2, #0
 8007a84:	4b5a      	ldr	r3, [pc, #360]	@ (8007bf0 <_strtod_l+0xae8>)
 8007a86:	f7f8 fd27 	bl	80004d8 <__aeabi_dmul>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460f      	mov	r7, r1
 8007a8e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a92:	9606      	str	r6, [sp, #24]
 8007a94:	9307      	str	r3, [sp, #28]
 8007a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9a:	4d52      	ldr	r5, [pc, #328]	@ (8007be4 <_strtod_l+0xadc>)
 8007a9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa2:	401d      	ands	r5, r3
 8007aa4:	4b53      	ldr	r3, [pc, #332]	@ (8007bf4 <_strtod_l+0xaec>)
 8007aa6:	429d      	cmp	r5, r3
 8007aa8:	f040 80aa 	bne.w	8007c00 <_strtod_l+0xaf8>
 8007aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aae:	4650      	mov	r0, sl
 8007ab0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	f001 fad7 	bl	8009068 <__ulp>
 8007aba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007abe:	f7f8 fd0b 	bl	80004d8 <__aeabi_dmul>
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	465b      	mov	r3, fp
 8007ac6:	f7f8 fb51 	bl	800016c <__adddf3>
 8007aca:	460b      	mov	r3, r1
 8007acc:	4945      	ldr	r1, [pc, #276]	@ (8007be4 <_strtod_l+0xadc>)
 8007ace:	4a4a      	ldr	r2, [pc, #296]	@ (8007bf8 <_strtod_l+0xaf0>)
 8007ad0:	4019      	ands	r1, r3
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	d942      	bls.n	8007b5e <_strtod_l+0xa56>
 8007ad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ada:	4b43      	ldr	r3, [pc, #268]	@ (8007be8 <_strtod_l+0xae0>)
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d103      	bne.n	8007ae8 <_strtod_l+0x9e0>
 8007ae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	f43f ad2b 	beq.w	800753e <_strtod_l+0x436>
 8007ae8:	f04f 3aff 	mov.w	sl, #4294967295
 8007aec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007be8 <_strtod_l+0xae0>
 8007af0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007af2:	9805      	ldr	r0, [sp, #20]
 8007af4:	f000 ff86 	bl	8008a04 <_Bfree>
 8007af8:	4649      	mov	r1, r9
 8007afa:	9805      	ldr	r0, [sp, #20]
 8007afc:	f000 ff82 	bl	8008a04 <_Bfree>
 8007b00:	4641      	mov	r1, r8
 8007b02:	9805      	ldr	r0, [sp, #20]
 8007b04:	f000 ff7e 	bl	8008a04 <_Bfree>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	9805      	ldr	r0, [sp, #20]
 8007b0c:	f000 ff7a 	bl	8008a04 <_Bfree>
 8007b10:	e618      	b.n	8007744 <_strtod_l+0x63c>
 8007b12:	f1ba 0f01 	cmp.w	sl, #1
 8007b16:	d103      	bne.n	8007b20 <_strtod_l+0xa18>
 8007b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f43f ada5 	beq.w	800766a <_strtod_l+0x562>
 8007b20:	2200      	movs	r2, #0
 8007b22:	4b36      	ldr	r3, [pc, #216]	@ (8007bfc <_strtod_l+0xaf4>)
 8007b24:	2600      	movs	r6, #0
 8007b26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b2a:	4f30      	ldr	r7, [pc, #192]	@ (8007bec <_strtod_l+0xae4>)
 8007b2c:	e7b3      	b.n	8007a96 <_strtod_l+0x98e>
 8007b2e:	2600      	movs	r6, #0
 8007b30:	4f2f      	ldr	r7, [pc, #188]	@ (8007bf0 <_strtod_l+0xae8>)
 8007b32:	e7ac      	b.n	8007a8e <_strtod_l+0x986>
 8007b34:	4630      	mov	r0, r6
 8007b36:	4639      	mov	r1, r7
 8007b38:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf0 <_strtod_l+0xae8>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f7f8 fccc 	bl	80004d8 <__aeabi_dmul>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0a1      	beq.n	8007a8e <_strtod_l+0x986>
 8007b4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b4e:	e7a2      	b.n	8007a96 <_strtod_l+0x98e>
 8007b50:	2200      	movs	r2, #0
 8007b52:	4b26      	ldr	r3, [pc, #152]	@ (8007bec <_strtod_l+0xae4>)
 8007b54:	4616      	mov	r6, r2
 8007b56:	461f      	mov	r7, r3
 8007b58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b5c:	e79b      	b.n	8007a96 <_strtod_l+0x98e>
 8007b5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007b62:	9b08      	ldr	r3, [sp, #32]
 8007b64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1c1      	bne.n	8007af0 <_strtod_l+0x9e8>
 8007b6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b70:	0d1b      	lsrs	r3, r3, #20
 8007b72:	051b      	lsls	r3, r3, #20
 8007b74:	429d      	cmp	r5, r3
 8007b76:	d1bb      	bne.n	8007af0 <_strtod_l+0x9e8>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f7f9 fadc 	bl	8001138 <__aeabi_d2lz>
 8007b80:	f7f8 fc7c 	bl	800047c <__aeabi_l2d>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 faec 	bl	8000168 <__aeabi_dsub>
 8007b90:	460b      	mov	r3, r1
 8007b92:	4602      	mov	r2, r0
 8007b94:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b98:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b9e:	ea46 060a 	orr.w	r6, r6, sl
 8007ba2:	431e      	orrs	r6, r3
 8007ba4:	d069      	beq.n	8007c7a <_strtod_l+0xb72>
 8007ba6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007bd0 <_strtod_l+0xac8>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 ff06 	bl	80009bc <__aeabi_dcmplt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f47f accf 	bne.w	8007554 <_strtod_l+0x44c>
 8007bb6:	a308      	add	r3, pc, #32	@ (adr r3, 8007bd8 <_strtod_l+0xad0>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bc0:	f7f8 ff1a 	bl	80009f8 <__aeabi_dcmpgt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d093      	beq.n	8007af0 <_strtod_l+0x9e8>
 8007bc8:	e4c4      	b.n	8007554 <_strtod_l+0x44c>
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	94a03595 	.word	0x94a03595
 8007bd4:	3fdfffff 	.word	0x3fdfffff
 8007bd8:	35afe535 	.word	0x35afe535
 8007bdc:	3fe00000 	.word	0x3fe00000
 8007be0:	000fffff 	.word	0x000fffff
 8007be4:	7ff00000 	.word	0x7ff00000
 8007be8:	7fefffff 	.word	0x7fefffff
 8007bec:	3ff00000 	.word	0x3ff00000
 8007bf0:	3fe00000 	.word	0x3fe00000
 8007bf4:	7fe00000 	.word	0x7fe00000
 8007bf8:	7c9fffff 	.word	0x7c9fffff
 8007bfc:	bff00000 	.word	0xbff00000
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	b323      	cbz	r3, 8007c4e <_strtod_l+0xb46>
 8007c04:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c08:	d821      	bhi.n	8007c4e <_strtod_l+0xb46>
 8007c0a:	a327      	add	r3, pc, #156	@ (adr r3, 8007ca8 <_strtod_l+0xba0>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fedc 	bl	80009d0 <__aeabi_dcmple>
 8007c18:	b1a0      	cbz	r0, 8007c44 <_strtod_l+0xb3c>
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7f8 ff0b 	bl	8000a38 <__aeabi_d2uiz>
 8007c22:	2801      	cmp	r0, #1
 8007c24:	bf38      	it	cc
 8007c26:	2001      	movcc	r0, #1
 8007c28:	f7f8 fbdc 	bl	80003e4 <__aeabi_ui2d>
 8007c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	b9fb      	cbnz	r3, 8007c74 <_strtod_l+0xb6c>
 8007c34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c38:	9014      	str	r0, [sp, #80]	@ 0x50
 8007c3a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007c40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c46:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c4a:	1b5b      	subs	r3, r3, r5
 8007c4c:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007c56:	f001 fa07 	bl	8009068 <__ulp>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4650      	mov	r0, sl
 8007c60:	4659      	mov	r1, fp
 8007c62:	f7f8 fc39 	bl	80004d8 <__aeabi_dmul>
 8007c66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c6a:	f7f8 fa7f 	bl	800016c <__adddf3>
 8007c6e:	4682      	mov	sl, r0
 8007c70:	468b      	mov	fp, r1
 8007c72:	e776      	b.n	8007b62 <_strtod_l+0xa5a>
 8007c74:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c78:	e7e0      	b.n	8007c3c <_strtod_l+0xb34>
 8007c7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007cb0 <_strtod_l+0xba8>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fe9c 	bl	80009bc <__aeabi_dcmplt>
 8007c84:	e79e      	b.n	8007bc4 <_strtod_l+0xabc>
 8007c86:	2300      	movs	r3, #0
 8007c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	f7ff ba77 	b.w	8007182 <_strtod_l+0x7a>
 8007c94:	2a65      	cmp	r2, #101	@ 0x65
 8007c96:	f43f ab6e 	beq.w	8007376 <_strtod_l+0x26e>
 8007c9a:	2a45      	cmp	r2, #69	@ 0x45
 8007c9c:	f43f ab6b 	beq.w	8007376 <_strtod_l+0x26e>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f7ff bba6 	b.w	80073f2 <_strtod_l+0x2ea>
 8007ca6:	bf00      	nop
 8007ca8:	ffc00000 	.word	0xffc00000
 8007cac:	41dfffff 	.word	0x41dfffff
 8007cb0:	94a03595 	.word	0x94a03595
 8007cb4:	3fcfffff 	.word	0x3fcfffff

08007cb8 <strtof>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	4d24      	ldr	r5, [pc, #144]	@ (8007d50 <strtof+0x98>)
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	4b24      	ldr	r3, [pc, #144]	@ (8007d54 <strtof+0x9c>)
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	6828      	ldr	r0, [r5, #0]
 8007cc6:	f7ff fa1f 	bl	8007108 <_strtod_l>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	f7f8 fe9b 	bl	8000a0c <__aeabi_dcmpun>
 8007cd6:	b168      	cbz	r0, 8007cf4 <strtof+0x3c>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	481f      	ldr	r0, [pc, #124]	@ (8007d58 <strtof+0xa0>)
 8007cdc:	da06      	bge.n	8007cec <strtof+0x34>
 8007cde:	f000 fa0b 	bl	80080f8 <nanf>
 8007ce2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	f000 ba02 	b.w	80080f8 <nanf>
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7f8 febe 	bl	8000a78 <__aeabi_d2f>
 8007cfc:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8007d00:	4604      	mov	r4, r0
 8007d02:	4916      	ldr	r1, [pc, #88]	@ (8007d5c <strtof+0xa4>)
 8007d04:	4640      	mov	r0, r8
 8007d06:	f7f9 f9db 	bl	80010c0 <__aeabi_fcmpun>
 8007d0a:	b9b0      	cbnz	r0, 8007d3a <strtof+0x82>
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4913      	ldr	r1, [pc, #76]	@ (8007d5c <strtof+0xa4>)
 8007d10:	f7f9 f9b8 	bl	8001084 <__aeabi_fcmple>
 8007d14:	b988      	cbnz	r0, 8007d3a <strtof+0x82>
 8007d16:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1e:	4630      	mov	r0, r6
 8007d20:	4649      	mov	r1, r9
 8007d22:	4b0f      	ldr	r3, [pc, #60]	@ (8007d60 <strtof+0xa8>)
 8007d24:	f7f8 fe72 	bl	8000a0c <__aeabi_dcmpun>
 8007d28:	b970      	cbnz	r0, 8007d48 <strtof+0x90>
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	4630      	mov	r0, r6
 8007d30:	4649      	mov	r1, r9
 8007d32:	4b0b      	ldr	r3, [pc, #44]	@ (8007d60 <strtof+0xa8>)
 8007d34:	f7f8 fe4c 	bl	80009d0 <__aeabi_dcmple>
 8007d38:	b930      	cbnz	r0, 8007d48 <strtof+0x90>
 8007d3a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8007d3e:	d1d2      	bne.n	8007ce6 <strtof+0x2e>
 8007d40:	4b08      	ldr	r3, [pc, #32]	@ (8007d64 <strtof+0xac>)
 8007d42:	403b      	ands	r3, r7
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ce      	beq.n	8007ce6 <strtof+0x2e>
 8007d48:	2222      	movs	r2, #34	@ 0x22
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e7ca      	b.n	8007ce6 <strtof+0x2e>
 8007d50:	200001f8 	.word	0x200001f8
 8007d54:	2000008c 	.word	0x2000008c
 8007d58:	0800b717 	.word	0x0800b717
 8007d5c:	7f7fffff 	.word	0x7f7fffff
 8007d60:	7fefffff 	.word	0x7fefffff
 8007d64:	7ff00000 	.word	0x7ff00000

08007d68 <std>:
 8007d68:	2300      	movs	r3, #0
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d76:	6083      	str	r3, [r0, #8]
 8007d78:	8181      	strh	r1, [r0, #12]
 8007d7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d7c:	81c2      	strh	r2, [r0, #14]
 8007d7e:	6183      	str	r3, [r0, #24]
 8007d80:	4619      	mov	r1, r3
 8007d82:	2208      	movs	r2, #8
 8007d84:	305c      	adds	r0, #92	@ 0x5c
 8007d86:	f000 f914 	bl	8007fb2 <memset>
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <std+0x58>)
 8007d8c:	6224      	str	r4, [r4, #32]
 8007d8e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d90:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc4 <std+0x5c>)
 8007d92:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d94:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc8 <std+0x60>)
 8007d96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d98:	4b0c      	ldr	r3, [pc, #48]	@ (8007dcc <std+0x64>)
 8007d9a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <std+0x68>)
 8007d9e:	429c      	cmp	r4, r3
 8007da0:	d006      	beq.n	8007db0 <std+0x48>
 8007da2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007da6:	4294      	cmp	r4, r2
 8007da8:	d002      	beq.n	8007db0 <std+0x48>
 8007daa:	33d0      	adds	r3, #208	@ 0xd0
 8007dac:	429c      	cmp	r4, r3
 8007dae:	d105      	bne.n	8007dbc <std+0x54>
 8007db0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db8:	f000 b986 	b.w	80080c8 <__retarget_lock_init_recursive>
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	08007f2d 	.word	0x08007f2d
 8007dc4:	08007f4f 	.word	0x08007f4f
 8007dc8:	08007f87 	.word	0x08007f87
 8007dcc:	08007fab 	.word	0x08007fab
 8007dd0:	2000040c 	.word	0x2000040c

08007dd4 <stdio_exit_handler>:
 8007dd4:	4a02      	ldr	r2, [pc, #8]	@ (8007de0 <stdio_exit_handler+0xc>)
 8007dd6:	4903      	ldr	r1, [pc, #12]	@ (8007de4 <stdio_exit_handler+0x10>)
 8007dd8:	4803      	ldr	r0, [pc, #12]	@ (8007de8 <stdio_exit_handler+0x14>)
 8007dda:	f000 b869 	b.w	8007eb0 <_fwalk_sglue>
 8007dde:	bf00      	nop
 8007de0:	20000080 	.word	0x20000080
 8007de4:	080099bd 	.word	0x080099bd
 8007de8:	200001fc 	.word	0x200001fc

08007dec <cleanup_stdio>:
 8007dec:	6841      	ldr	r1, [r0, #4]
 8007dee:	4b0c      	ldr	r3, [pc, #48]	@ (8007e20 <cleanup_stdio+0x34>)
 8007df0:	b510      	push	{r4, lr}
 8007df2:	4299      	cmp	r1, r3
 8007df4:	4604      	mov	r4, r0
 8007df6:	d001      	beq.n	8007dfc <cleanup_stdio+0x10>
 8007df8:	f001 fde0 	bl	80099bc <_fflush_r>
 8007dfc:	68a1      	ldr	r1, [r4, #8]
 8007dfe:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <cleanup_stdio+0x38>)
 8007e00:	4299      	cmp	r1, r3
 8007e02:	d002      	beq.n	8007e0a <cleanup_stdio+0x1e>
 8007e04:	4620      	mov	r0, r4
 8007e06:	f001 fdd9 	bl	80099bc <_fflush_r>
 8007e0a:	68e1      	ldr	r1, [r4, #12]
 8007e0c:	4b06      	ldr	r3, [pc, #24]	@ (8007e28 <cleanup_stdio+0x3c>)
 8007e0e:	4299      	cmp	r1, r3
 8007e10:	d004      	beq.n	8007e1c <cleanup_stdio+0x30>
 8007e12:	4620      	mov	r0, r4
 8007e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e18:	f001 bdd0 	b.w	80099bc <_fflush_r>
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	bf00      	nop
 8007e20:	2000040c 	.word	0x2000040c
 8007e24:	20000474 	.word	0x20000474
 8007e28:	200004dc 	.word	0x200004dc

08007e2c <global_stdio_init.part.0>:
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <global_stdio_init.part.0+0x30>)
 8007e30:	4c0b      	ldr	r4, [pc, #44]	@ (8007e60 <global_stdio_init.part.0+0x34>)
 8007e32:	4a0c      	ldr	r2, [pc, #48]	@ (8007e64 <global_stdio_init.part.0+0x38>)
 8007e34:	4620      	mov	r0, r4
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	2104      	movs	r1, #4
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f7ff ff94 	bl	8007d68 <std>
 8007e40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e44:	2201      	movs	r2, #1
 8007e46:	2109      	movs	r1, #9
 8007e48:	f7ff ff8e 	bl	8007d68 <std>
 8007e4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e50:	2202      	movs	r2, #2
 8007e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e56:	2112      	movs	r1, #18
 8007e58:	f7ff bf86 	b.w	8007d68 <std>
 8007e5c:	20000544 	.word	0x20000544
 8007e60:	2000040c 	.word	0x2000040c
 8007e64:	08007dd5 	.word	0x08007dd5

08007e68 <__sfp_lock_acquire>:
 8007e68:	4801      	ldr	r0, [pc, #4]	@ (8007e70 <__sfp_lock_acquire+0x8>)
 8007e6a:	f000 b92e 	b.w	80080ca <__retarget_lock_acquire_recursive>
 8007e6e:	bf00      	nop
 8007e70:	2000054d 	.word	0x2000054d

08007e74 <__sfp_lock_release>:
 8007e74:	4801      	ldr	r0, [pc, #4]	@ (8007e7c <__sfp_lock_release+0x8>)
 8007e76:	f000 b929 	b.w	80080cc <__retarget_lock_release_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	2000054d 	.word	0x2000054d

08007e80 <__sinit>:
 8007e80:	b510      	push	{r4, lr}
 8007e82:	4604      	mov	r4, r0
 8007e84:	f7ff fff0 	bl	8007e68 <__sfp_lock_acquire>
 8007e88:	6a23      	ldr	r3, [r4, #32]
 8007e8a:	b11b      	cbz	r3, 8007e94 <__sinit+0x14>
 8007e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e90:	f7ff bff0 	b.w	8007e74 <__sfp_lock_release>
 8007e94:	4b04      	ldr	r3, [pc, #16]	@ (8007ea8 <__sinit+0x28>)
 8007e96:	6223      	str	r3, [r4, #32]
 8007e98:	4b04      	ldr	r3, [pc, #16]	@ (8007eac <__sinit+0x2c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1f5      	bne.n	8007e8c <__sinit+0xc>
 8007ea0:	f7ff ffc4 	bl	8007e2c <global_stdio_init.part.0>
 8007ea4:	e7f2      	b.n	8007e8c <__sinit+0xc>
 8007ea6:	bf00      	nop
 8007ea8:	08007ded 	.word	0x08007ded
 8007eac:	20000544 	.word	0x20000544

08007eb0 <_fwalk_sglue>:
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	4688      	mov	r8, r1
 8007eb8:	4614      	mov	r4, r2
 8007eba:	2600      	movs	r6, #0
 8007ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ec4:	d505      	bpl.n	8007ed2 <_fwalk_sglue+0x22>
 8007ec6:	6824      	ldr	r4, [r4, #0]
 8007ec8:	2c00      	cmp	r4, #0
 8007eca:	d1f7      	bne.n	8007ebc <_fwalk_sglue+0xc>
 8007ecc:	4630      	mov	r0, r6
 8007ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed2:	89ab      	ldrh	r3, [r5, #12]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d907      	bls.n	8007ee8 <_fwalk_sglue+0x38>
 8007ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007edc:	3301      	adds	r3, #1
 8007ede:	d003      	beq.n	8007ee8 <_fwalk_sglue+0x38>
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	47c0      	blx	r8
 8007ee6:	4306      	orrs	r6, r0
 8007ee8:	3568      	adds	r5, #104	@ 0x68
 8007eea:	e7e9      	b.n	8007ec0 <_fwalk_sglue+0x10>

08007eec <siprintf>:
 8007eec:	b40e      	push	{r1, r2, r3}
 8007eee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ef2:	b500      	push	{lr}
 8007ef4:	b09c      	sub	sp, #112	@ 0x70
 8007ef6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ef8:	9002      	str	r0, [sp, #8]
 8007efa:	9006      	str	r0, [sp, #24]
 8007efc:	9107      	str	r1, [sp, #28]
 8007efe:	9104      	str	r1, [sp, #16]
 8007f00:	4808      	ldr	r0, [pc, #32]	@ (8007f24 <siprintf+0x38>)
 8007f02:	4909      	ldr	r1, [pc, #36]	@ (8007f28 <siprintf+0x3c>)
 8007f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f08:	9105      	str	r1, [sp, #20]
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	a902      	add	r1, sp, #8
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	f001 fa46 	bl	80093a0 <_svfiprintf_r>
 8007f14:	2200      	movs	r2, #0
 8007f16:	9b02      	ldr	r3, [sp, #8]
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	b01c      	add	sp, #112	@ 0x70
 8007f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f20:	b003      	add	sp, #12
 8007f22:	4770      	bx	lr
 8007f24:	200001f8 	.word	0x200001f8
 8007f28:	ffff0208 	.word	0xffff0208

08007f2c <__sread>:
 8007f2c:	b510      	push	{r4, lr}
 8007f2e:	460c      	mov	r4, r1
 8007f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f34:	f000 f87a 	bl	800802c <_read_r>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	bfab      	itete	ge
 8007f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f40:	181b      	addge	r3, r3, r0
 8007f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f46:	bfac      	ite	ge
 8007f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f4a:	81a3      	strhlt	r3, [r4, #12]
 8007f4c:	bd10      	pop	{r4, pc}

08007f4e <__swrite>:
 8007f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f52:	461f      	mov	r7, r3
 8007f54:	898b      	ldrh	r3, [r1, #12]
 8007f56:	4605      	mov	r5, r0
 8007f58:	05db      	lsls	r3, r3, #23
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	d505      	bpl.n	8007f6c <__swrite+0x1e>
 8007f60:	2302      	movs	r3, #2
 8007f62:	2200      	movs	r2, #0
 8007f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f68:	f000 f84e 	bl	8008008 <_lseek_r>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	4632      	mov	r2, r6
 8007f70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	4628      	mov	r0, r5
 8007f78:	463b      	mov	r3, r7
 8007f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f82:	f000 b865 	b.w	8008050 <_write_r>

08007f86 <__sseek>:
 8007f86:	b510      	push	{r4, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f8e:	f000 f83b 	bl	8008008 <_lseek_r>
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	bf15      	itete	ne
 8007f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fa2:	81a3      	strheq	r3, [r4, #12]
 8007fa4:	bf18      	it	ne
 8007fa6:	81a3      	strhne	r3, [r4, #12]
 8007fa8:	bd10      	pop	{r4, pc}

08007faa <__sclose>:
 8007faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fae:	f000 b81b 	b.w	8007fe8 <_close_r>

08007fb2 <memset>:
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d100      	bne.n	8007fbc <memset+0xa>
 8007fba:	4770      	bx	lr
 8007fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc0:	e7f9      	b.n	8007fb6 <memset+0x4>

08007fc2 <strncmp>:
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	b16a      	cbz	r2, 8007fe2 <strncmp+0x20>
 8007fc6:	3901      	subs	r1, #1
 8007fc8:	1884      	adds	r4, r0, r2
 8007fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d103      	bne.n	8007fde <strncmp+0x1c>
 8007fd6:	42a0      	cmp	r0, r4
 8007fd8:	d001      	beq.n	8007fde <strncmp+0x1c>
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d1f5      	bne.n	8007fca <strncmp+0x8>
 8007fde:	1ad0      	subs	r0, r2, r3
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	e7fc      	b.n	8007fe0 <strncmp+0x1e>
	...

08007fe8 <_close_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	2300      	movs	r3, #0
 8007fec:	4d05      	ldr	r5, [pc, #20]	@ (8008004 <_close_r+0x1c>)
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7fa fc33 	bl	800285e <_close>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_close_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_close_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	20000548 	.word	0x20000548

08008008 <_lseek_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	2200      	movs	r2, #0
 8008012:	4d05      	ldr	r5, [pc, #20]	@ (8008028 <_lseek_r+0x20>)
 8008014:	602a      	str	r2, [r5, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f7fa fc45 	bl	80028a6 <_lseek>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_lseek_r+0x1e>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_lseek_r+0x1e>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	20000548 	.word	0x20000548

0800802c <_read_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	4611      	mov	r1, r2
 8008034:	2200      	movs	r2, #0
 8008036:	4d05      	ldr	r5, [pc, #20]	@ (800804c <_read_r+0x20>)
 8008038:	602a      	str	r2, [r5, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	f7fa fbd6 	bl	80027ec <_read>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_read_r+0x1e>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_read_r+0x1e>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	20000548 	.word	0x20000548

08008050 <_write_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	4611      	mov	r1, r2
 8008058:	2200      	movs	r2, #0
 800805a:	4d05      	ldr	r5, [pc, #20]	@ (8008070 <_write_r+0x20>)
 800805c:	602a      	str	r2, [r5, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f7fa fbe1 	bl	8002826 <_write>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_write_r+0x1e>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_write_r+0x1e>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	20000548 	.word	0x20000548

08008074 <__errno>:
 8008074:	4b01      	ldr	r3, [pc, #4]	@ (800807c <__errno+0x8>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	200001f8 	.word	0x200001f8

08008080 <__libc_init_array>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	2600      	movs	r6, #0
 8008084:	4d0c      	ldr	r5, [pc, #48]	@ (80080b8 <__libc_init_array+0x38>)
 8008086:	4c0d      	ldr	r4, [pc, #52]	@ (80080bc <__libc_init_array+0x3c>)
 8008088:	1b64      	subs	r4, r4, r5
 800808a:	10a4      	asrs	r4, r4, #2
 800808c:	42a6      	cmp	r6, r4
 800808e:	d109      	bne.n	80080a4 <__libc_init_array+0x24>
 8008090:	f003 f8dc 	bl	800b24c <_init>
 8008094:	2600      	movs	r6, #0
 8008096:	4d0a      	ldr	r5, [pc, #40]	@ (80080c0 <__libc_init_array+0x40>)
 8008098:	4c0a      	ldr	r4, [pc, #40]	@ (80080c4 <__libc_init_array+0x44>)
 800809a:	1b64      	subs	r4, r4, r5
 800809c:	10a4      	asrs	r4, r4, #2
 800809e:	42a6      	cmp	r6, r4
 80080a0:	d105      	bne.n	80080ae <__libc_init_array+0x2e>
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a8:	4798      	blx	r3
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7ee      	b.n	800808c <__libc_init_array+0xc>
 80080ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b2:	4798      	blx	r3
 80080b4:	3601      	adds	r6, #1
 80080b6:	e7f2      	b.n	800809e <__libc_init_array+0x1e>
 80080b8:	0800b790 	.word	0x0800b790
 80080bc:	0800b790 	.word	0x0800b790
 80080c0:	0800b790 	.word	0x0800b790
 80080c4:	0800b794 	.word	0x0800b794

080080c8 <__retarget_lock_init_recursive>:
 80080c8:	4770      	bx	lr

080080ca <__retarget_lock_acquire_recursive>:
 80080ca:	4770      	bx	lr

080080cc <__retarget_lock_release_recursive>:
 80080cc:	4770      	bx	lr

080080ce <memcpy>:
 80080ce:	440a      	add	r2, r1
 80080d0:	4291      	cmp	r1, r2
 80080d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d6:	d100      	bne.n	80080da <memcpy+0xc>
 80080d8:	4770      	bx	lr
 80080da:	b510      	push	{r4, lr}
 80080dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e0:	4291      	cmp	r1, r2
 80080e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e6:	d1f9      	bne.n	80080dc <memcpy+0xe>
 80080e8:	bd10      	pop	{r4, pc}
	...

080080ec <nan>:
 80080ec:	2000      	movs	r0, #0
 80080ee:	4901      	ldr	r1, [pc, #4]	@ (80080f4 <nan+0x8>)
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	7ff80000 	.word	0x7ff80000

080080f8 <nanf>:
 80080f8:	4800      	ldr	r0, [pc, #0]	@ (80080fc <nanf+0x4>)
 80080fa:	4770      	bx	lr
 80080fc:	7fc00000 	.word	0x7fc00000

08008100 <_free_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4605      	mov	r5, r0
 8008104:	2900      	cmp	r1, #0
 8008106:	d040      	beq.n	800818a <_free_r+0x8a>
 8008108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810c:	1f0c      	subs	r4, r1, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfb8      	it	lt
 8008112:	18e4      	addlt	r4, r4, r3
 8008114:	f000 fc2a 	bl	800896c <__malloc_lock>
 8008118:	4a1c      	ldr	r2, [pc, #112]	@ (800818c <_free_r+0x8c>)
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	b933      	cbnz	r3, 800812c <_free_r+0x2c>
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	6014      	str	r4, [r2, #0]
 8008122:	4628      	mov	r0, r5
 8008124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008128:	f000 bc26 	b.w	8008978 <__malloc_unlock>
 800812c:	42a3      	cmp	r3, r4
 800812e:	d908      	bls.n	8008142 <_free_r+0x42>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	1821      	adds	r1, r4, r0
 8008134:	428b      	cmp	r3, r1
 8008136:	bf01      	itttt	eq
 8008138:	6819      	ldreq	r1, [r3, #0]
 800813a:	685b      	ldreq	r3, [r3, #4]
 800813c:	1809      	addeq	r1, r1, r0
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	e7ed      	b.n	800811e <_free_r+0x1e>
 8008142:	461a      	mov	r2, r3
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b10b      	cbz	r3, 800814c <_free_r+0x4c>
 8008148:	42a3      	cmp	r3, r4
 800814a:	d9fa      	bls.n	8008142 <_free_r+0x42>
 800814c:	6811      	ldr	r1, [r2, #0]
 800814e:	1850      	adds	r0, r2, r1
 8008150:	42a0      	cmp	r0, r4
 8008152:	d10b      	bne.n	800816c <_free_r+0x6c>
 8008154:	6820      	ldr	r0, [r4, #0]
 8008156:	4401      	add	r1, r0
 8008158:	1850      	adds	r0, r2, r1
 800815a:	4283      	cmp	r3, r0
 800815c:	6011      	str	r1, [r2, #0]
 800815e:	d1e0      	bne.n	8008122 <_free_r+0x22>
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4408      	add	r0, r1
 8008166:	6010      	str	r0, [r2, #0]
 8008168:	6053      	str	r3, [r2, #4]
 800816a:	e7da      	b.n	8008122 <_free_r+0x22>
 800816c:	d902      	bls.n	8008174 <_free_r+0x74>
 800816e:	230c      	movs	r3, #12
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	e7d6      	b.n	8008122 <_free_r+0x22>
 8008174:	6820      	ldr	r0, [r4, #0]
 8008176:	1821      	adds	r1, r4, r0
 8008178:	428b      	cmp	r3, r1
 800817a:	bf01      	itttt	eq
 800817c:	6819      	ldreq	r1, [r3, #0]
 800817e:	685b      	ldreq	r3, [r3, #4]
 8008180:	1809      	addeq	r1, r1, r0
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	6063      	str	r3, [r4, #4]
 8008186:	6054      	str	r4, [r2, #4]
 8008188:	e7cb      	b.n	8008122 <_free_r+0x22>
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000554 	.word	0x20000554

08008190 <rshift>:
 8008190:	6903      	ldr	r3, [r0, #16]
 8008192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008196:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800819a:	f100 0414 	add.w	r4, r0, #20
 800819e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081a2:	dd46      	ble.n	8008232 <rshift+0xa2>
 80081a4:	f011 011f 	ands.w	r1, r1, #31
 80081a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80081ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081b0:	d10c      	bne.n	80081cc <rshift+0x3c>
 80081b2:	4629      	mov	r1, r5
 80081b4:	f100 0710 	add.w	r7, r0, #16
 80081b8:	42b1      	cmp	r1, r6
 80081ba:	d335      	bcc.n	8008228 <rshift+0x98>
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	1eea      	subs	r2, r5, #3
 80081c2:	4296      	cmp	r6, r2
 80081c4:	bf38      	it	cc
 80081c6:	2300      	movcc	r3, #0
 80081c8:	4423      	add	r3, r4
 80081ca:	e015      	b.n	80081f8 <rshift+0x68>
 80081cc:	46a1      	mov	r9, r4
 80081ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80081d2:	f1c1 0820 	rsb	r8, r1, #32
 80081d6:	40cf      	lsrs	r7, r1
 80081d8:	f105 0e04 	add.w	lr, r5, #4
 80081dc:	4576      	cmp	r6, lr
 80081de:	46f4      	mov	ip, lr
 80081e0:	d816      	bhi.n	8008210 <rshift+0x80>
 80081e2:	1a9a      	subs	r2, r3, r2
 80081e4:	0092      	lsls	r2, r2, #2
 80081e6:	3a04      	subs	r2, #4
 80081e8:	3501      	adds	r5, #1
 80081ea:	42ae      	cmp	r6, r5
 80081ec:	bf38      	it	cc
 80081ee:	2200      	movcc	r2, #0
 80081f0:	18a3      	adds	r3, r4, r2
 80081f2:	50a7      	str	r7, [r4, r2]
 80081f4:	b107      	cbz	r7, 80081f8 <rshift+0x68>
 80081f6:	3304      	adds	r3, #4
 80081f8:	42a3      	cmp	r3, r4
 80081fa:	eba3 0204 	sub.w	r2, r3, r4
 80081fe:	bf08      	it	eq
 8008200:	2300      	moveq	r3, #0
 8008202:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008206:	6102      	str	r2, [r0, #16]
 8008208:	bf08      	it	eq
 800820a:	6143      	streq	r3, [r0, #20]
 800820c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008210:	f8dc c000 	ldr.w	ip, [ip]
 8008214:	fa0c fc08 	lsl.w	ip, ip, r8
 8008218:	ea4c 0707 	orr.w	r7, ip, r7
 800821c:	f849 7b04 	str.w	r7, [r9], #4
 8008220:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008224:	40cf      	lsrs	r7, r1
 8008226:	e7d9      	b.n	80081dc <rshift+0x4c>
 8008228:	f851 cb04 	ldr.w	ip, [r1], #4
 800822c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008230:	e7c2      	b.n	80081b8 <rshift+0x28>
 8008232:	4623      	mov	r3, r4
 8008234:	e7e0      	b.n	80081f8 <rshift+0x68>

08008236 <__hexdig_fun>:
 8008236:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800823a:	2b09      	cmp	r3, #9
 800823c:	d802      	bhi.n	8008244 <__hexdig_fun+0xe>
 800823e:	3820      	subs	r0, #32
 8008240:	b2c0      	uxtb	r0, r0
 8008242:	4770      	bx	lr
 8008244:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008248:	2b05      	cmp	r3, #5
 800824a:	d801      	bhi.n	8008250 <__hexdig_fun+0x1a>
 800824c:	3847      	subs	r0, #71	@ 0x47
 800824e:	e7f7      	b.n	8008240 <__hexdig_fun+0xa>
 8008250:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008254:	2b05      	cmp	r3, #5
 8008256:	d801      	bhi.n	800825c <__hexdig_fun+0x26>
 8008258:	3827      	subs	r0, #39	@ 0x27
 800825a:	e7f1      	b.n	8008240 <__hexdig_fun+0xa>
 800825c:	2000      	movs	r0, #0
 800825e:	4770      	bx	lr

08008260 <__gethex>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	468a      	mov	sl, r1
 8008266:	4690      	mov	r8, r2
 8008268:	b085      	sub	sp, #20
 800826a:	9302      	str	r3, [sp, #8]
 800826c:	680b      	ldr	r3, [r1, #0]
 800826e:	9001      	str	r0, [sp, #4]
 8008270:	1c9c      	adds	r4, r3, #2
 8008272:	46a1      	mov	r9, r4
 8008274:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008278:	2830      	cmp	r0, #48	@ 0x30
 800827a:	d0fa      	beq.n	8008272 <__gethex+0x12>
 800827c:	eba9 0303 	sub.w	r3, r9, r3
 8008280:	f1a3 0b02 	sub.w	fp, r3, #2
 8008284:	f7ff ffd7 	bl	8008236 <__hexdig_fun>
 8008288:	4605      	mov	r5, r0
 800828a:	2800      	cmp	r0, #0
 800828c:	d168      	bne.n	8008360 <__gethex+0x100>
 800828e:	2201      	movs	r2, #1
 8008290:	4648      	mov	r0, r9
 8008292:	499f      	ldr	r1, [pc, #636]	@ (8008510 <__gethex+0x2b0>)
 8008294:	f7ff fe95 	bl	8007fc2 <strncmp>
 8008298:	4607      	mov	r7, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	d167      	bne.n	800836e <__gethex+0x10e>
 800829e:	f899 0001 	ldrb.w	r0, [r9, #1]
 80082a2:	4626      	mov	r6, r4
 80082a4:	f7ff ffc7 	bl	8008236 <__hexdig_fun>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d062      	beq.n	8008372 <__gethex+0x112>
 80082ac:	4623      	mov	r3, r4
 80082ae:	7818      	ldrb	r0, [r3, #0]
 80082b0:	4699      	mov	r9, r3
 80082b2:	2830      	cmp	r0, #48	@ 0x30
 80082b4:	f103 0301 	add.w	r3, r3, #1
 80082b8:	d0f9      	beq.n	80082ae <__gethex+0x4e>
 80082ba:	f7ff ffbc 	bl	8008236 <__hexdig_fun>
 80082be:	fab0 f580 	clz	r5, r0
 80082c2:	f04f 0b01 	mov.w	fp, #1
 80082c6:	096d      	lsrs	r5, r5, #5
 80082c8:	464a      	mov	r2, r9
 80082ca:	4616      	mov	r6, r2
 80082cc:	7830      	ldrb	r0, [r6, #0]
 80082ce:	3201      	adds	r2, #1
 80082d0:	f7ff ffb1 	bl	8008236 <__hexdig_fun>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d1f8      	bne.n	80082ca <__gethex+0x6a>
 80082d8:	2201      	movs	r2, #1
 80082da:	4630      	mov	r0, r6
 80082dc:	498c      	ldr	r1, [pc, #560]	@ (8008510 <__gethex+0x2b0>)
 80082de:	f7ff fe70 	bl	8007fc2 <strncmp>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d13f      	bne.n	8008366 <__gethex+0x106>
 80082e6:	b944      	cbnz	r4, 80082fa <__gethex+0x9a>
 80082e8:	1c74      	adds	r4, r6, #1
 80082ea:	4622      	mov	r2, r4
 80082ec:	4616      	mov	r6, r2
 80082ee:	7830      	ldrb	r0, [r6, #0]
 80082f0:	3201      	adds	r2, #1
 80082f2:	f7ff ffa0 	bl	8008236 <__hexdig_fun>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d1f8      	bne.n	80082ec <__gethex+0x8c>
 80082fa:	1ba4      	subs	r4, r4, r6
 80082fc:	00a7      	lsls	r7, r4, #2
 80082fe:	7833      	ldrb	r3, [r6, #0]
 8008300:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008304:	2b50      	cmp	r3, #80	@ 0x50
 8008306:	d13e      	bne.n	8008386 <__gethex+0x126>
 8008308:	7873      	ldrb	r3, [r6, #1]
 800830a:	2b2b      	cmp	r3, #43	@ 0x2b
 800830c:	d033      	beq.n	8008376 <__gethex+0x116>
 800830e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008310:	d034      	beq.n	800837c <__gethex+0x11c>
 8008312:	2400      	movs	r4, #0
 8008314:	1c71      	adds	r1, r6, #1
 8008316:	7808      	ldrb	r0, [r1, #0]
 8008318:	f7ff ff8d 	bl	8008236 <__hexdig_fun>
 800831c:	1e43      	subs	r3, r0, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b18      	cmp	r3, #24
 8008322:	d830      	bhi.n	8008386 <__gethex+0x126>
 8008324:	f1a0 0210 	sub.w	r2, r0, #16
 8008328:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800832c:	f7ff ff83 	bl	8008236 <__hexdig_fun>
 8008330:	f100 3cff 	add.w	ip, r0, #4294967295
 8008334:	fa5f fc8c 	uxtb.w	ip, ip
 8008338:	f1bc 0f18 	cmp.w	ip, #24
 800833c:	f04f 030a 	mov.w	r3, #10
 8008340:	d91e      	bls.n	8008380 <__gethex+0x120>
 8008342:	b104      	cbz	r4, 8008346 <__gethex+0xe6>
 8008344:	4252      	negs	r2, r2
 8008346:	4417      	add	r7, r2
 8008348:	f8ca 1000 	str.w	r1, [sl]
 800834c:	b1ed      	cbz	r5, 800838a <__gethex+0x12a>
 800834e:	f1bb 0f00 	cmp.w	fp, #0
 8008352:	bf0c      	ite	eq
 8008354:	2506      	moveq	r5, #6
 8008356:	2500      	movne	r5, #0
 8008358:	4628      	mov	r0, r5
 800835a:	b005      	add	sp, #20
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	2500      	movs	r5, #0
 8008362:	462c      	mov	r4, r5
 8008364:	e7b0      	b.n	80082c8 <__gethex+0x68>
 8008366:	2c00      	cmp	r4, #0
 8008368:	d1c7      	bne.n	80082fa <__gethex+0x9a>
 800836a:	4627      	mov	r7, r4
 800836c:	e7c7      	b.n	80082fe <__gethex+0x9e>
 800836e:	464e      	mov	r6, r9
 8008370:	462f      	mov	r7, r5
 8008372:	2501      	movs	r5, #1
 8008374:	e7c3      	b.n	80082fe <__gethex+0x9e>
 8008376:	2400      	movs	r4, #0
 8008378:	1cb1      	adds	r1, r6, #2
 800837a:	e7cc      	b.n	8008316 <__gethex+0xb6>
 800837c:	2401      	movs	r4, #1
 800837e:	e7fb      	b.n	8008378 <__gethex+0x118>
 8008380:	fb03 0002 	mla	r0, r3, r2, r0
 8008384:	e7ce      	b.n	8008324 <__gethex+0xc4>
 8008386:	4631      	mov	r1, r6
 8008388:	e7de      	b.n	8008348 <__gethex+0xe8>
 800838a:	4629      	mov	r1, r5
 800838c:	eba6 0309 	sub.w	r3, r6, r9
 8008390:	3b01      	subs	r3, #1
 8008392:	2b07      	cmp	r3, #7
 8008394:	dc0a      	bgt.n	80083ac <__gethex+0x14c>
 8008396:	9801      	ldr	r0, [sp, #4]
 8008398:	f000 faf4 	bl	8008984 <_Balloc>
 800839c:	4604      	mov	r4, r0
 800839e:	b940      	cbnz	r0, 80083b2 <__gethex+0x152>
 80083a0:	4602      	mov	r2, r0
 80083a2:	21e4      	movs	r1, #228	@ 0xe4
 80083a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008514 <__gethex+0x2b4>)
 80083a6:	485c      	ldr	r0, [pc, #368]	@ (8008518 <__gethex+0x2b8>)
 80083a8:	f001 fb68 	bl	8009a7c <__assert_func>
 80083ac:	3101      	adds	r1, #1
 80083ae:	105b      	asrs	r3, r3, #1
 80083b0:	e7ef      	b.n	8008392 <__gethex+0x132>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f100 0a14 	add.w	sl, r0, #20
 80083b8:	4655      	mov	r5, sl
 80083ba:	469b      	mov	fp, r3
 80083bc:	45b1      	cmp	r9, r6
 80083be:	d337      	bcc.n	8008430 <__gethex+0x1d0>
 80083c0:	f845 bb04 	str.w	fp, [r5], #4
 80083c4:	eba5 050a 	sub.w	r5, r5, sl
 80083c8:	10ad      	asrs	r5, r5, #2
 80083ca:	6125      	str	r5, [r4, #16]
 80083cc:	4658      	mov	r0, fp
 80083ce:	f000 fbcb 	bl	8008b68 <__hi0bits>
 80083d2:	016d      	lsls	r5, r5, #5
 80083d4:	f8d8 6000 	ldr.w	r6, [r8]
 80083d8:	1a2d      	subs	r5, r5, r0
 80083da:	42b5      	cmp	r5, r6
 80083dc:	dd54      	ble.n	8008488 <__gethex+0x228>
 80083de:	1bad      	subs	r5, r5, r6
 80083e0:	4629      	mov	r1, r5
 80083e2:	4620      	mov	r0, r4
 80083e4:	f000 ff53 	bl	800928e <__any_on>
 80083e8:	4681      	mov	r9, r0
 80083ea:	b178      	cbz	r0, 800840c <__gethex+0x1ac>
 80083ec:	f04f 0901 	mov.w	r9, #1
 80083f0:	1e6b      	subs	r3, r5, #1
 80083f2:	1159      	asrs	r1, r3, #5
 80083f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80083f8:	f003 021f 	and.w	r2, r3, #31
 80083fc:	fa09 f202 	lsl.w	r2, r9, r2
 8008400:	420a      	tst	r2, r1
 8008402:	d003      	beq.n	800840c <__gethex+0x1ac>
 8008404:	454b      	cmp	r3, r9
 8008406:	dc36      	bgt.n	8008476 <__gethex+0x216>
 8008408:	f04f 0902 	mov.w	r9, #2
 800840c:	4629      	mov	r1, r5
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff febe 	bl	8008190 <rshift>
 8008414:	442f      	add	r7, r5
 8008416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800841a:	42bb      	cmp	r3, r7
 800841c:	da42      	bge.n	80084a4 <__gethex+0x244>
 800841e:	4621      	mov	r1, r4
 8008420:	9801      	ldr	r0, [sp, #4]
 8008422:	f000 faef 	bl	8008a04 <_Bfree>
 8008426:	2300      	movs	r3, #0
 8008428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800842a:	25a3      	movs	r5, #163	@ 0xa3
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	e793      	b.n	8008358 <__gethex+0xf8>
 8008430:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008434:	2a2e      	cmp	r2, #46	@ 0x2e
 8008436:	d012      	beq.n	800845e <__gethex+0x1fe>
 8008438:	2b20      	cmp	r3, #32
 800843a:	d104      	bne.n	8008446 <__gethex+0x1e6>
 800843c:	f845 bb04 	str.w	fp, [r5], #4
 8008440:	f04f 0b00 	mov.w	fp, #0
 8008444:	465b      	mov	r3, fp
 8008446:	7830      	ldrb	r0, [r6, #0]
 8008448:	9303      	str	r3, [sp, #12]
 800844a:	f7ff fef4 	bl	8008236 <__hexdig_fun>
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	f000 000f 	and.w	r0, r0, #15
 8008454:	4098      	lsls	r0, r3
 8008456:	ea4b 0b00 	orr.w	fp, fp, r0
 800845a:	3304      	adds	r3, #4
 800845c:	e7ae      	b.n	80083bc <__gethex+0x15c>
 800845e:	45b1      	cmp	r9, r6
 8008460:	d8ea      	bhi.n	8008438 <__gethex+0x1d8>
 8008462:	2201      	movs	r2, #1
 8008464:	4630      	mov	r0, r6
 8008466:	492a      	ldr	r1, [pc, #168]	@ (8008510 <__gethex+0x2b0>)
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	f7ff fdaa 	bl	8007fc2 <strncmp>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	2800      	cmp	r0, #0
 8008472:	d1e1      	bne.n	8008438 <__gethex+0x1d8>
 8008474:	e7a2      	b.n	80083bc <__gethex+0x15c>
 8008476:	4620      	mov	r0, r4
 8008478:	1ea9      	subs	r1, r5, #2
 800847a:	f000 ff08 	bl	800928e <__any_on>
 800847e:	2800      	cmp	r0, #0
 8008480:	d0c2      	beq.n	8008408 <__gethex+0x1a8>
 8008482:	f04f 0903 	mov.w	r9, #3
 8008486:	e7c1      	b.n	800840c <__gethex+0x1ac>
 8008488:	da09      	bge.n	800849e <__gethex+0x23e>
 800848a:	1b75      	subs	r5, r6, r5
 800848c:	4621      	mov	r1, r4
 800848e:	462a      	mov	r2, r5
 8008490:	9801      	ldr	r0, [sp, #4]
 8008492:	f000 fccd 	bl	8008e30 <__lshift>
 8008496:	4604      	mov	r4, r0
 8008498:	1b7f      	subs	r7, r7, r5
 800849a:	f100 0a14 	add.w	sl, r0, #20
 800849e:	f04f 0900 	mov.w	r9, #0
 80084a2:	e7b8      	b.n	8008416 <__gethex+0x1b6>
 80084a4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80084a8:	42bd      	cmp	r5, r7
 80084aa:	dd6f      	ble.n	800858c <__gethex+0x32c>
 80084ac:	1bed      	subs	r5, r5, r7
 80084ae:	42ae      	cmp	r6, r5
 80084b0:	dc34      	bgt.n	800851c <__gethex+0x2bc>
 80084b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d022      	beq.n	8008500 <__gethex+0x2a0>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d024      	beq.n	8008508 <__gethex+0x2a8>
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d115      	bne.n	80084ee <__gethex+0x28e>
 80084c2:	42ae      	cmp	r6, r5
 80084c4:	d113      	bne.n	80084ee <__gethex+0x28e>
 80084c6:	2e01      	cmp	r6, #1
 80084c8:	d10b      	bne.n	80084e2 <__gethex+0x282>
 80084ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084ce:	9a02      	ldr	r2, [sp, #8]
 80084d0:	2562      	movs	r5, #98	@ 0x62
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	2301      	movs	r3, #1
 80084d6:	6123      	str	r3, [r4, #16]
 80084d8:	f8ca 3000 	str.w	r3, [sl]
 80084dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084de:	601c      	str	r4, [r3, #0]
 80084e0:	e73a      	b.n	8008358 <__gethex+0xf8>
 80084e2:	4620      	mov	r0, r4
 80084e4:	1e71      	subs	r1, r6, #1
 80084e6:	f000 fed2 	bl	800928e <__any_on>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d1ed      	bne.n	80084ca <__gethex+0x26a>
 80084ee:	4621      	mov	r1, r4
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	f000 fa87 	bl	8008a04 <_Bfree>
 80084f6:	2300      	movs	r3, #0
 80084f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084fa:	2550      	movs	r5, #80	@ 0x50
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	e72b      	b.n	8008358 <__gethex+0xf8>
 8008500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f3      	bne.n	80084ee <__gethex+0x28e>
 8008506:	e7e0      	b.n	80084ca <__gethex+0x26a>
 8008508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1dd      	bne.n	80084ca <__gethex+0x26a>
 800850e:	e7ee      	b.n	80084ee <__gethex+0x28e>
 8008510:	0800b35e 	.word	0x0800b35e
 8008514:	0800b3c8 	.word	0x0800b3c8
 8008518:	0800b3d9 	.word	0x0800b3d9
 800851c:	1e6f      	subs	r7, r5, #1
 800851e:	f1b9 0f00 	cmp.w	r9, #0
 8008522:	d130      	bne.n	8008586 <__gethex+0x326>
 8008524:	b127      	cbz	r7, 8008530 <__gethex+0x2d0>
 8008526:	4639      	mov	r1, r7
 8008528:	4620      	mov	r0, r4
 800852a:	f000 feb0 	bl	800928e <__any_on>
 800852e:	4681      	mov	r9, r0
 8008530:	2301      	movs	r3, #1
 8008532:	4629      	mov	r1, r5
 8008534:	1b76      	subs	r6, r6, r5
 8008536:	2502      	movs	r5, #2
 8008538:	117a      	asrs	r2, r7, #5
 800853a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800853e:	f007 071f 	and.w	r7, r7, #31
 8008542:	40bb      	lsls	r3, r7
 8008544:	4213      	tst	r3, r2
 8008546:	4620      	mov	r0, r4
 8008548:	bf18      	it	ne
 800854a:	f049 0902 	orrne.w	r9, r9, #2
 800854e:	f7ff fe1f 	bl	8008190 <rshift>
 8008552:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008556:	f1b9 0f00 	cmp.w	r9, #0
 800855a:	d047      	beq.n	80085ec <__gethex+0x38c>
 800855c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d015      	beq.n	8008590 <__gethex+0x330>
 8008564:	2b03      	cmp	r3, #3
 8008566:	d017      	beq.n	8008598 <__gethex+0x338>
 8008568:	2b01      	cmp	r3, #1
 800856a:	d109      	bne.n	8008580 <__gethex+0x320>
 800856c:	f019 0f02 	tst.w	r9, #2
 8008570:	d006      	beq.n	8008580 <__gethex+0x320>
 8008572:	f8da 3000 	ldr.w	r3, [sl]
 8008576:	ea49 0903 	orr.w	r9, r9, r3
 800857a:	f019 0f01 	tst.w	r9, #1
 800857e:	d10e      	bne.n	800859e <__gethex+0x33e>
 8008580:	f045 0510 	orr.w	r5, r5, #16
 8008584:	e032      	b.n	80085ec <__gethex+0x38c>
 8008586:	f04f 0901 	mov.w	r9, #1
 800858a:	e7d1      	b.n	8008530 <__gethex+0x2d0>
 800858c:	2501      	movs	r5, #1
 800858e:	e7e2      	b.n	8008556 <__gethex+0x2f6>
 8008590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008592:	f1c3 0301 	rsb	r3, r3, #1
 8008596:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0f0      	beq.n	8008580 <__gethex+0x320>
 800859e:	f04f 0c00 	mov.w	ip, #0
 80085a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80085a6:	f104 0314 	add.w	r3, r4, #20
 80085aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80085ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085bc:	d01b      	beq.n	80085f6 <__gethex+0x396>
 80085be:	3201      	adds	r2, #1
 80085c0:	6002      	str	r2, [r0, #0]
 80085c2:	2d02      	cmp	r5, #2
 80085c4:	f104 0314 	add.w	r3, r4, #20
 80085c8:	d13c      	bne.n	8008644 <__gethex+0x3e4>
 80085ca:	f8d8 2000 	ldr.w	r2, [r8]
 80085ce:	3a01      	subs	r2, #1
 80085d0:	42b2      	cmp	r2, r6
 80085d2:	d109      	bne.n	80085e8 <__gethex+0x388>
 80085d4:	2201      	movs	r2, #1
 80085d6:	1171      	asrs	r1, r6, #5
 80085d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085dc:	f006 061f 	and.w	r6, r6, #31
 80085e0:	fa02 f606 	lsl.w	r6, r2, r6
 80085e4:	421e      	tst	r6, r3
 80085e6:	d13a      	bne.n	800865e <__gethex+0x3fe>
 80085e8:	f045 0520 	orr.w	r5, r5, #32
 80085ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ee:	601c      	str	r4, [r3, #0]
 80085f0:	9b02      	ldr	r3, [sp, #8]
 80085f2:	601f      	str	r7, [r3, #0]
 80085f4:	e6b0      	b.n	8008358 <__gethex+0xf8>
 80085f6:	4299      	cmp	r1, r3
 80085f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80085fc:	d8d9      	bhi.n	80085b2 <__gethex+0x352>
 80085fe:	68a3      	ldr	r3, [r4, #8]
 8008600:	459b      	cmp	fp, r3
 8008602:	db17      	blt.n	8008634 <__gethex+0x3d4>
 8008604:	6861      	ldr	r1, [r4, #4]
 8008606:	9801      	ldr	r0, [sp, #4]
 8008608:	3101      	adds	r1, #1
 800860a:	f000 f9bb 	bl	8008984 <_Balloc>
 800860e:	4681      	mov	r9, r0
 8008610:	b918      	cbnz	r0, 800861a <__gethex+0x3ba>
 8008612:	4602      	mov	r2, r0
 8008614:	2184      	movs	r1, #132	@ 0x84
 8008616:	4b19      	ldr	r3, [pc, #100]	@ (800867c <__gethex+0x41c>)
 8008618:	e6c5      	b.n	80083a6 <__gethex+0x146>
 800861a:	6922      	ldr	r2, [r4, #16]
 800861c:	f104 010c 	add.w	r1, r4, #12
 8008620:	3202      	adds	r2, #2
 8008622:	0092      	lsls	r2, r2, #2
 8008624:	300c      	adds	r0, #12
 8008626:	f7ff fd52 	bl	80080ce <memcpy>
 800862a:	4621      	mov	r1, r4
 800862c:	9801      	ldr	r0, [sp, #4]
 800862e:	f000 f9e9 	bl	8008a04 <_Bfree>
 8008632:	464c      	mov	r4, r9
 8008634:	6923      	ldr	r3, [r4, #16]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	6122      	str	r2, [r4, #16]
 800863a:	2201      	movs	r2, #1
 800863c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008640:	615a      	str	r2, [r3, #20]
 8008642:	e7be      	b.n	80085c2 <__gethex+0x362>
 8008644:	6922      	ldr	r2, [r4, #16]
 8008646:	455a      	cmp	r2, fp
 8008648:	dd0b      	ble.n	8008662 <__gethex+0x402>
 800864a:	2101      	movs	r1, #1
 800864c:	4620      	mov	r0, r4
 800864e:	f7ff fd9f 	bl	8008190 <rshift>
 8008652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008656:	3701      	adds	r7, #1
 8008658:	42bb      	cmp	r3, r7
 800865a:	f6ff aee0 	blt.w	800841e <__gethex+0x1be>
 800865e:	2501      	movs	r5, #1
 8008660:	e7c2      	b.n	80085e8 <__gethex+0x388>
 8008662:	f016 061f 	ands.w	r6, r6, #31
 8008666:	d0fa      	beq.n	800865e <__gethex+0x3fe>
 8008668:	4453      	add	r3, sl
 800866a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800866e:	f000 fa7b 	bl	8008b68 <__hi0bits>
 8008672:	f1c6 0620 	rsb	r6, r6, #32
 8008676:	42b0      	cmp	r0, r6
 8008678:	dbe7      	blt.n	800864a <__gethex+0x3ea>
 800867a:	e7f0      	b.n	800865e <__gethex+0x3fe>
 800867c:	0800b3c8 	.word	0x0800b3c8

08008680 <L_shift>:
 8008680:	f1c2 0208 	rsb	r2, r2, #8
 8008684:	0092      	lsls	r2, r2, #2
 8008686:	b570      	push	{r4, r5, r6, lr}
 8008688:	f1c2 0620 	rsb	r6, r2, #32
 800868c:	6843      	ldr	r3, [r0, #4]
 800868e:	6804      	ldr	r4, [r0, #0]
 8008690:	fa03 f506 	lsl.w	r5, r3, r6
 8008694:	432c      	orrs	r4, r5
 8008696:	40d3      	lsrs	r3, r2
 8008698:	6004      	str	r4, [r0, #0]
 800869a:	f840 3f04 	str.w	r3, [r0, #4]!
 800869e:	4288      	cmp	r0, r1
 80086a0:	d3f4      	bcc.n	800868c <L_shift+0xc>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}

080086a4 <__match>:
 80086a4:	b530      	push	{r4, r5, lr}
 80086a6:	6803      	ldr	r3, [r0, #0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ae:	b914      	cbnz	r4, 80086b6 <__match+0x12>
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	2001      	movs	r0, #1
 80086b4:	bd30      	pop	{r4, r5, pc}
 80086b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80086be:	2d19      	cmp	r5, #25
 80086c0:	bf98      	it	ls
 80086c2:	3220      	addls	r2, #32
 80086c4:	42a2      	cmp	r2, r4
 80086c6:	d0f0      	beq.n	80086aa <__match+0x6>
 80086c8:	2000      	movs	r0, #0
 80086ca:	e7f3      	b.n	80086b4 <__match+0x10>

080086cc <__hexnan>:
 80086cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	2500      	movs	r5, #0
 80086d2:	680b      	ldr	r3, [r1, #0]
 80086d4:	4682      	mov	sl, r0
 80086d6:	115e      	asrs	r6, r3, #5
 80086d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086dc:	f013 031f 	ands.w	r3, r3, #31
 80086e0:	bf18      	it	ne
 80086e2:	3604      	addne	r6, #4
 80086e4:	1f37      	subs	r7, r6, #4
 80086e6:	4690      	mov	r8, r2
 80086e8:	46b9      	mov	r9, r7
 80086ea:	463c      	mov	r4, r7
 80086ec:	46ab      	mov	fp, r5
 80086ee:	b087      	sub	sp, #28
 80086f0:	6801      	ldr	r1, [r0, #0]
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	f846 5c04 	str.w	r5, [r6, #-4]
 80086f8:	9502      	str	r5, [sp, #8]
 80086fa:	784a      	ldrb	r2, [r1, #1]
 80086fc:	1c4b      	adds	r3, r1, #1
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	b342      	cbz	r2, 8008754 <__hexnan+0x88>
 8008702:	4610      	mov	r0, r2
 8008704:	9105      	str	r1, [sp, #20]
 8008706:	9204      	str	r2, [sp, #16]
 8008708:	f7ff fd95 	bl	8008236 <__hexdig_fun>
 800870c:	2800      	cmp	r0, #0
 800870e:	d151      	bne.n	80087b4 <__hexnan+0xe8>
 8008710:	9a04      	ldr	r2, [sp, #16]
 8008712:	9905      	ldr	r1, [sp, #20]
 8008714:	2a20      	cmp	r2, #32
 8008716:	d818      	bhi.n	800874a <__hexnan+0x7e>
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	459b      	cmp	fp, r3
 800871c:	dd13      	ble.n	8008746 <__hexnan+0x7a>
 800871e:	454c      	cmp	r4, r9
 8008720:	d206      	bcs.n	8008730 <__hexnan+0x64>
 8008722:	2d07      	cmp	r5, #7
 8008724:	dc04      	bgt.n	8008730 <__hexnan+0x64>
 8008726:	462a      	mov	r2, r5
 8008728:	4649      	mov	r1, r9
 800872a:	4620      	mov	r0, r4
 800872c:	f7ff ffa8 	bl	8008680 <L_shift>
 8008730:	4544      	cmp	r4, r8
 8008732:	d952      	bls.n	80087da <__hexnan+0x10e>
 8008734:	2300      	movs	r3, #0
 8008736:	f1a4 0904 	sub.w	r9, r4, #4
 800873a:	f844 3c04 	str.w	r3, [r4, #-4]
 800873e:	461d      	mov	r5, r3
 8008740:	464c      	mov	r4, r9
 8008742:	f8cd b008 	str.w	fp, [sp, #8]
 8008746:	9903      	ldr	r1, [sp, #12]
 8008748:	e7d7      	b.n	80086fa <__hexnan+0x2e>
 800874a:	2a29      	cmp	r2, #41	@ 0x29
 800874c:	d157      	bne.n	80087fe <__hexnan+0x132>
 800874e:	3102      	adds	r1, #2
 8008750:	f8ca 1000 	str.w	r1, [sl]
 8008754:	f1bb 0f00 	cmp.w	fp, #0
 8008758:	d051      	beq.n	80087fe <__hexnan+0x132>
 800875a:	454c      	cmp	r4, r9
 800875c:	d206      	bcs.n	800876c <__hexnan+0xa0>
 800875e:	2d07      	cmp	r5, #7
 8008760:	dc04      	bgt.n	800876c <__hexnan+0xa0>
 8008762:	462a      	mov	r2, r5
 8008764:	4649      	mov	r1, r9
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff ff8a 	bl	8008680 <L_shift>
 800876c:	4544      	cmp	r4, r8
 800876e:	d936      	bls.n	80087de <__hexnan+0x112>
 8008770:	4623      	mov	r3, r4
 8008772:	f1a8 0204 	sub.w	r2, r8, #4
 8008776:	f853 1b04 	ldr.w	r1, [r3], #4
 800877a:	429f      	cmp	r7, r3
 800877c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008780:	d2f9      	bcs.n	8008776 <__hexnan+0xaa>
 8008782:	1b3b      	subs	r3, r7, r4
 8008784:	f023 0303 	bic.w	r3, r3, #3
 8008788:	3304      	adds	r3, #4
 800878a:	3401      	adds	r4, #1
 800878c:	3e03      	subs	r6, #3
 800878e:	42b4      	cmp	r4, r6
 8008790:	bf88      	it	hi
 8008792:	2304      	movhi	r3, #4
 8008794:	2200      	movs	r2, #0
 8008796:	4443      	add	r3, r8
 8008798:	f843 2b04 	str.w	r2, [r3], #4
 800879c:	429f      	cmp	r7, r3
 800879e:	d2fb      	bcs.n	8008798 <__hexnan+0xcc>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	b91b      	cbnz	r3, 80087ac <__hexnan+0xe0>
 80087a4:	4547      	cmp	r7, r8
 80087a6:	d128      	bne.n	80087fa <__hexnan+0x12e>
 80087a8:	2301      	movs	r3, #1
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	2005      	movs	r0, #5
 80087ae:	b007      	add	sp, #28
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	3501      	adds	r5, #1
 80087b6:	2d08      	cmp	r5, #8
 80087b8:	f10b 0b01 	add.w	fp, fp, #1
 80087bc:	dd06      	ble.n	80087cc <__hexnan+0x100>
 80087be:	4544      	cmp	r4, r8
 80087c0:	d9c1      	bls.n	8008746 <__hexnan+0x7a>
 80087c2:	2300      	movs	r3, #0
 80087c4:	2501      	movs	r5, #1
 80087c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80087ca:	3c04      	subs	r4, #4
 80087cc:	6822      	ldr	r2, [r4, #0]
 80087ce:	f000 000f 	and.w	r0, r0, #15
 80087d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087d6:	6020      	str	r0, [r4, #0]
 80087d8:	e7b5      	b.n	8008746 <__hexnan+0x7a>
 80087da:	2508      	movs	r5, #8
 80087dc:	e7b3      	b.n	8008746 <__hexnan+0x7a>
 80087de:	9b01      	ldr	r3, [sp, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d0dd      	beq.n	80087a0 <__hexnan+0xd4>
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	f1c3 0320 	rsb	r3, r3, #32
 80087ec:	40da      	lsrs	r2, r3
 80087ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80087f2:	4013      	ands	r3, r2
 80087f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80087f8:	e7d2      	b.n	80087a0 <__hexnan+0xd4>
 80087fa:	3f04      	subs	r7, #4
 80087fc:	e7d0      	b.n	80087a0 <__hexnan+0xd4>
 80087fe:	2004      	movs	r0, #4
 8008800:	e7d5      	b.n	80087ae <__hexnan+0xe2>
	...

08008804 <sbrk_aligned>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	4e0f      	ldr	r6, [pc, #60]	@ (8008844 <sbrk_aligned+0x40>)
 8008808:	460c      	mov	r4, r1
 800880a:	6831      	ldr	r1, [r6, #0]
 800880c:	4605      	mov	r5, r0
 800880e:	b911      	cbnz	r1, 8008816 <sbrk_aligned+0x12>
 8008810:	f001 f916 	bl	8009a40 <_sbrk_r>
 8008814:	6030      	str	r0, [r6, #0]
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f001 f911 	bl	8009a40 <_sbrk_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d103      	bne.n	800882a <sbrk_aligned+0x26>
 8008822:	f04f 34ff 	mov.w	r4, #4294967295
 8008826:	4620      	mov	r0, r4
 8008828:	bd70      	pop	{r4, r5, r6, pc}
 800882a:	1cc4      	adds	r4, r0, #3
 800882c:	f024 0403 	bic.w	r4, r4, #3
 8008830:	42a0      	cmp	r0, r4
 8008832:	d0f8      	beq.n	8008826 <sbrk_aligned+0x22>
 8008834:	1a21      	subs	r1, r4, r0
 8008836:	4628      	mov	r0, r5
 8008838:	f001 f902 	bl	8009a40 <_sbrk_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d1f2      	bne.n	8008826 <sbrk_aligned+0x22>
 8008840:	e7ef      	b.n	8008822 <sbrk_aligned+0x1e>
 8008842:	bf00      	nop
 8008844:	20000550 	.word	0x20000550

08008848 <_malloc_r>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	1ccd      	adds	r5, r1, #3
 800884e:	f025 0503 	bic.w	r5, r5, #3
 8008852:	3508      	adds	r5, #8
 8008854:	2d0c      	cmp	r5, #12
 8008856:	bf38      	it	cc
 8008858:	250c      	movcc	r5, #12
 800885a:	2d00      	cmp	r5, #0
 800885c:	4606      	mov	r6, r0
 800885e:	db01      	blt.n	8008864 <_malloc_r+0x1c>
 8008860:	42a9      	cmp	r1, r5
 8008862:	d904      	bls.n	800886e <_malloc_r+0x26>
 8008864:	230c      	movs	r3, #12
 8008866:	6033      	str	r3, [r6, #0]
 8008868:	2000      	movs	r0, #0
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008944 <_malloc_r+0xfc>
 8008872:	f000 f87b 	bl	800896c <__malloc_lock>
 8008876:	f8d8 3000 	ldr.w	r3, [r8]
 800887a:	461c      	mov	r4, r3
 800887c:	bb44      	cbnz	r4, 80088d0 <_malloc_r+0x88>
 800887e:	4629      	mov	r1, r5
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff ffbf 	bl	8008804 <sbrk_aligned>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	4604      	mov	r4, r0
 800888a:	d158      	bne.n	800893e <_malloc_r+0xf6>
 800888c:	f8d8 4000 	ldr.w	r4, [r8]
 8008890:	4627      	mov	r7, r4
 8008892:	2f00      	cmp	r7, #0
 8008894:	d143      	bne.n	800891e <_malloc_r+0xd6>
 8008896:	2c00      	cmp	r4, #0
 8008898:	d04b      	beq.n	8008932 <_malloc_r+0xea>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	4639      	mov	r1, r7
 800889e:	4630      	mov	r0, r6
 80088a0:	eb04 0903 	add.w	r9, r4, r3
 80088a4:	f001 f8cc 	bl	8009a40 <_sbrk_r>
 80088a8:	4581      	cmp	r9, r0
 80088aa:	d142      	bne.n	8008932 <_malloc_r+0xea>
 80088ac:	6821      	ldr	r1, [r4, #0]
 80088ae:	4630      	mov	r0, r6
 80088b0:	1a6d      	subs	r5, r5, r1
 80088b2:	4629      	mov	r1, r5
 80088b4:	f7ff ffa6 	bl	8008804 <sbrk_aligned>
 80088b8:	3001      	adds	r0, #1
 80088ba:	d03a      	beq.n	8008932 <_malloc_r+0xea>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	442b      	add	r3, r5
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	f8d8 3000 	ldr.w	r3, [r8]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	bb62      	cbnz	r2, 8008924 <_malloc_r+0xdc>
 80088ca:	f8c8 7000 	str.w	r7, [r8]
 80088ce:	e00f      	b.n	80088f0 <_malloc_r+0xa8>
 80088d0:	6822      	ldr	r2, [r4, #0]
 80088d2:	1b52      	subs	r2, r2, r5
 80088d4:	d420      	bmi.n	8008918 <_malloc_r+0xd0>
 80088d6:	2a0b      	cmp	r2, #11
 80088d8:	d917      	bls.n	800890a <_malloc_r+0xc2>
 80088da:	1961      	adds	r1, r4, r5
 80088dc:	42a3      	cmp	r3, r4
 80088de:	6025      	str	r5, [r4, #0]
 80088e0:	bf18      	it	ne
 80088e2:	6059      	strne	r1, [r3, #4]
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	bf08      	it	eq
 80088e8:	f8c8 1000 	streq.w	r1, [r8]
 80088ec:	5162      	str	r2, [r4, r5]
 80088ee:	604b      	str	r3, [r1, #4]
 80088f0:	4630      	mov	r0, r6
 80088f2:	f000 f841 	bl	8008978 <__malloc_unlock>
 80088f6:	f104 000b 	add.w	r0, r4, #11
 80088fa:	1d23      	adds	r3, r4, #4
 80088fc:	f020 0007 	bic.w	r0, r0, #7
 8008900:	1ac2      	subs	r2, r0, r3
 8008902:	bf1c      	itt	ne
 8008904:	1a1b      	subne	r3, r3, r0
 8008906:	50a3      	strne	r3, [r4, r2]
 8008908:	e7af      	b.n	800886a <_malloc_r+0x22>
 800890a:	6862      	ldr	r2, [r4, #4]
 800890c:	42a3      	cmp	r3, r4
 800890e:	bf0c      	ite	eq
 8008910:	f8c8 2000 	streq.w	r2, [r8]
 8008914:	605a      	strne	r2, [r3, #4]
 8008916:	e7eb      	b.n	80088f0 <_malloc_r+0xa8>
 8008918:	4623      	mov	r3, r4
 800891a:	6864      	ldr	r4, [r4, #4]
 800891c:	e7ae      	b.n	800887c <_malloc_r+0x34>
 800891e:	463c      	mov	r4, r7
 8008920:	687f      	ldr	r7, [r7, #4]
 8008922:	e7b6      	b.n	8008892 <_malloc_r+0x4a>
 8008924:	461a      	mov	r2, r3
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	42a3      	cmp	r3, r4
 800892a:	d1fb      	bne.n	8008924 <_malloc_r+0xdc>
 800892c:	2300      	movs	r3, #0
 800892e:	6053      	str	r3, [r2, #4]
 8008930:	e7de      	b.n	80088f0 <_malloc_r+0xa8>
 8008932:	230c      	movs	r3, #12
 8008934:	4630      	mov	r0, r6
 8008936:	6033      	str	r3, [r6, #0]
 8008938:	f000 f81e 	bl	8008978 <__malloc_unlock>
 800893c:	e794      	b.n	8008868 <_malloc_r+0x20>
 800893e:	6005      	str	r5, [r0, #0]
 8008940:	e7d6      	b.n	80088f0 <_malloc_r+0xa8>
 8008942:	bf00      	nop
 8008944:	20000554 	.word	0x20000554

08008948 <__ascii_mbtowc>:
 8008948:	b082      	sub	sp, #8
 800894a:	b901      	cbnz	r1, 800894e <__ascii_mbtowc+0x6>
 800894c:	a901      	add	r1, sp, #4
 800894e:	b142      	cbz	r2, 8008962 <__ascii_mbtowc+0x1a>
 8008950:	b14b      	cbz	r3, 8008966 <__ascii_mbtowc+0x1e>
 8008952:	7813      	ldrb	r3, [r2, #0]
 8008954:	600b      	str	r3, [r1, #0]
 8008956:	7812      	ldrb	r2, [r2, #0]
 8008958:	1e10      	subs	r0, r2, #0
 800895a:	bf18      	it	ne
 800895c:	2001      	movne	r0, #1
 800895e:	b002      	add	sp, #8
 8008960:	4770      	bx	lr
 8008962:	4610      	mov	r0, r2
 8008964:	e7fb      	b.n	800895e <__ascii_mbtowc+0x16>
 8008966:	f06f 0001 	mvn.w	r0, #1
 800896a:	e7f8      	b.n	800895e <__ascii_mbtowc+0x16>

0800896c <__malloc_lock>:
 800896c:	4801      	ldr	r0, [pc, #4]	@ (8008974 <__malloc_lock+0x8>)
 800896e:	f7ff bbac 	b.w	80080ca <__retarget_lock_acquire_recursive>
 8008972:	bf00      	nop
 8008974:	2000054c 	.word	0x2000054c

08008978 <__malloc_unlock>:
 8008978:	4801      	ldr	r0, [pc, #4]	@ (8008980 <__malloc_unlock+0x8>)
 800897a:	f7ff bba7 	b.w	80080cc <__retarget_lock_release_recursive>
 800897e:	bf00      	nop
 8008980:	2000054c 	.word	0x2000054c

08008984 <_Balloc>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	69c6      	ldr	r6, [r0, #28]
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	b976      	cbnz	r6, 80089ac <_Balloc+0x28>
 800898e:	2010      	movs	r0, #16
 8008990:	f001 f8a6 	bl	8009ae0 <malloc>
 8008994:	4602      	mov	r2, r0
 8008996:	61e0      	str	r0, [r4, #28]
 8008998:	b920      	cbnz	r0, 80089a4 <_Balloc+0x20>
 800899a:	216b      	movs	r1, #107	@ 0x6b
 800899c:	4b17      	ldr	r3, [pc, #92]	@ (80089fc <_Balloc+0x78>)
 800899e:	4818      	ldr	r0, [pc, #96]	@ (8008a00 <_Balloc+0x7c>)
 80089a0:	f001 f86c 	bl	8009a7c <__assert_func>
 80089a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089a8:	6006      	str	r6, [r0, #0]
 80089aa:	60c6      	str	r6, [r0, #12]
 80089ac:	69e6      	ldr	r6, [r4, #28]
 80089ae:	68f3      	ldr	r3, [r6, #12]
 80089b0:	b183      	cbz	r3, 80089d4 <_Balloc+0x50>
 80089b2:	69e3      	ldr	r3, [r4, #28]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089ba:	b9b8      	cbnz	r0, 80089ec <_Balloc+0x68>
 80089bc:	2101      	movs	r1, #1
 80089be:	fa01 f605 	lsl.w	r6, r1, r5
 80089c2:	1d72      	adds	r2, r6, #5
 80089c4:	4620      	mov	r0, r4
 80089c6:	0092      	lsls	r2, r2, #2
 80089c8:	f001 f876 	bl	8009ab8 <_calloc_r>
 80089cc:	b160      	cbz	r0, 80089e8 <_Balloc+0x64>
 80089ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089d2:	e00e      	b.n	80089f2 <_Balloc+0x6e>
 80089d4:	2221      	movs	r2, #33	@ 0x21
 80089d6:	2104      	movs	r1, #4
 80089d8:	4620      	mov	r0, r4
 80089da:	f001 f86d 	bl	8009ab8 <_calloc_r>
 80089de:	69e3      	ldr	r3, [r4, #28]
 80089e0:	60f0      	str	r0, [r6, #12]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e4      	bne.n	80089b2 <_Balloc+0x2e>
 80089e8:	2000      	movs	r0, #0
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	6802      	ldr	r2, [r0, #0]
 80089ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089f2:	2300      	movs	r3, #0
 80089f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089f8:	e7f7      	b.n	80089ea <_Balloc+0x66>
 80089fa:	bf00      	nop
 80089fc:	0800b439 	.word	0x0800b439
 8008a00:	0800b450 	.word	0x0800b450

08008a04 <_Bfree>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	69c6      	ldr	r6, [r0, #28]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b976      	cbnz	r6, 8008a2c <_Bfree+0x28>
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f001 f866 	bl	8009ae0 <malloc>
 8008a14:	4602      	mov	r2, r0
 8008a16:	61e8      	str	r0, [r5, #28]
 8008a18:	b920      	cbnz	r0, 8008a24 <_Bfree+0x20>
 8008a1a:	218f      	movs	r1, #143	@ 0x8f
 8008a1c:	4b08      	ldr	r3, [pc, #32]	@ (8008a40 <_Bfree+0x3c>)
 8008a1e:	4809      	ldr	r0, [pc, #36]	@ (8008a44 <_Bfree+0x40>)
 8008a20:	f001 f82c 	bl	8009a7c <__assert_func>
 8008a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a28:	6006      	str	r6, [r0, #0]
 8008a2a:	60c6      	str	r6, [r0, #12]
 8008a2c:	b13c      	cbz	r4, 8008a3e <_Bfree+0x3a>
 8008a2e:	69eb      	ldr	r3, [r5, #28]
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a38:	6021      	str	r1, [r4, #0]
 8008a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	0800b439 	.word	0x0800b439
 8008a44:	0800b450 	.word	0x0800b450

08008a48 <__multadd>:
 8008a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	461e      	mov	r6, r3
 8008a52:	2000      	movs	r0, #0
 8008a54:	690d      	ldr	r5, [r1, #16]
 8008a56:	f101 0c14 	add.w	ip, r1, #20
 8008a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a5e:	3001      	adds	r0, #1
 8008a60:	b299      	uxth	r1, r3
 8008a62:	fb02 6101 	mla	r1, r2, r1, r6
 8008a66:	0c1e      	lsrs	r6, r3, #16
 8008a68:	0c0b      	lsrs	r3, r1, #16
 8008a6a:	fb02 3306 	mla	r3, r2, r6, r3
 8008a6e:	b289      	uxth	r1, r1
 8008a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a74:	4285      	cmp	r5, r0
 8008a76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a7a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a7e:	dcec      	bgt.n	8008a5a <__multadd+0x12>
 8008a80:	b30e      	cbz	r6, 8008ac6 <__multadd+0x7e>
 8008a82:	68a3      	ldr	r3, [r4, #8]
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	dc19      	bgt.n	8008abc <__multadd+0x74>
 8008a88:	6861      	ldr	r1, [r4, #4]
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	f7ff ff79 	bl	8008984 <_Balloc>
 8008a92:	4680      	mov	r8, r0
 8008a94:	b928      	cbnz	r0, 8008aa2 <__multadd+0x5a>
 8008a96:	4602      	mov	r2, r0
 8008a98:	21ba      	movs	r1, #186	@ 0xba
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008acc <__multadd+0x84>)
 8008a9c:	480c      	ldr	r0, [pc, #48]	@ (8008ad0 <__multadd+0x88>)
 8008a9e:	f000 ffed 	bl	8009a7c <__assert_func>
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	f104 010c 	add.w	r1, r4, #12
 8008aa8:	3202      	adds	r2, #2
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	300c      	adds	r0, #12
 8008aae:	f7ff fb0e 	bl	80080ce <memcpy>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff ffa5 	bl	8008a04 <_Bfree>
 8008aba:	4644      	mov	r4, r8
 8008abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	615e      	str	r6, [r3, #20]
 8008ac4:	6125      	str	r5, [r4, #16]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	0800b3c8 	.word	0x0800b3c8
 8008ad0:	0800b450 	.word	0x0800b450

08008ad4 <__s2b>:
 8008ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad8:	4615      	mov	r5, r2
 8008ada:	2209      	movs	r2, #9
 8008adc:	461f      	mov	r7, r3
 8008ade:	3308      	adds	r3, #8
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	2201      	movs	r2, #1
 8008aea:	2100      	movs	r1, #0
 8008aec:	429a      	cmp	r2, r3
 8008aee:	db09      	blt.n	8008b04 <__s2b+0x30>
 8008af0:	4630      	mov	r0, r6
 8008af2:	f7ff ff47 	bl	8008984 <_Balloc>
 8008af6:	b940      	cbnz	r0, 8008b0a <__s2b+0x36>
 8008af8:	4602      	mov	r2, r0
 8008afa:	21d3      	movs	r1, #211	@ 0xd3
 8008afc:	4b18      	ldr	r3, [pc, #96]	@ (8008b60 <__s2b+0x8c>)
 8008afe:	4819      	ldr	r0, [pc, #100]	@ (8008b64 <__s2b+0x90>)
 8008b00:	f000 ffbc 	bl	8009a7c <__assert_func>
 8008b04:	0052      	lsls	r2, r2, #1
 8008b06:	3101      	adds	r1, #1
 8008b08:	e7f0      	b.n	8008aec <__s2b+0x18>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	2d09      	cmp	r5, #9
 8008b0e:	6143      	str	r3, [r0, #20]
 8008b10:	f04f 0301 	mov.w	r3, #1
 8008b14:	6103      	str	r3, [r0, #16]
 8008b16:	dd16      	ble.n	8008b46 <__s2b+0x72>
 8008b18:	f104 0909 	add.w	r9, r4, #9
 8008b1c:	46c8      	mov	r8, r9
 8008b1e:	442c      	add	r4, r5
 8008b20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b24:	4601      	mov	r1, r0
 8008b26:	220a      	movs	r2, #10
 8008b28:	4630      	mov	r0, r6
 8008b2a:	3b30      	subs	r3, #48	@ 0x30
 8008b2c:	f7ff ff8c 	bl	8008a48 <__multadd>
 8008b30:	45a0      	cmp	r8, r4
 8008b32:	d1f5      	bne.n	8008b20 <__s2b+0x4c>
 8008b34:	f1a5 0408 	sub.w	r4, r5, #8
 8008b38:	444c      	add	r4, r9
 8008b3a:	1b2d      	subs	r5, r5, r4
 8008b3c:	1963      	adds	r3, r4, r5
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	db04      	blt.n	8008b4c <__s2b+0x78>
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	2509      	movs	r5, #9
 8008b48:	340a      	adds	r4, #10
 8008b4a:	e7f6      	b.n	8008b3a <__s2b+0x66>
 8008b4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b50:	4601      	mov	r1, r0
 8008b52:	220a      	movs	r2, #10
 8008b54:	4630      	mov	r0, r6
 8008b56:	3b30      	subs	r3, #48	@ 0x30
 8008b58:	f7ff ff76 	bl	8008a48 <__multadd>
 8008b5c:	e7ee      	b.n	8008b3c <__s2b+0x68>
 8008b5e:	bf00      	nop
 8008b60:	0800b3c8 	.word	0x0800b3c8
 8008b64:	0800b450 	.word	0x0800b450

08008b68 <__hi0bits>:
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b6e:	bf3a      	itte	cc
 8008b70:	0403      	lslcc	r3, r0, #16
 8008b72:	2010      	movcc	r0, #16
 8008b74:	2000      	movcs	r0, #0
 8008b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b7a:	bf3c      	itt	cc
 8008b7c:	021b      	lslcc	r3, r3, #8
 8008b7e:	3008      	addcc	r0, #8
 8008b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b84:	bf3c      	itt	cc
 8008b86:	011b      	lslcc	r3, r3, #4
 8008b88:	3004      	addcc	r0, #4
 8008b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8e:	bf3c      	itt	cc
 8008b90:	009b      	lslcc	r3, r3, #2
 8008b92:	3002      	addcc	r0, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	db05      	blt.n	8008ba4 <__hi0bits+0x3c>
 8008b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b9c:	f100 0001 	add.w	r0, r0, #1
 8008ba0:	bf08      	it	eq
 8008ba2:	2020      	moveq	r0, #32
 8008ba4:	4770      	bx	lr

08008ba6 <__lo0bits>:
 8008ba6:	6803      	ldr	r3, [r0, #0]
 8008ba8:	4602      	mov	r2, r0
 8008baa:	f013 0007 	ands.w	r0, r3, #7
 8008bae:	d00b      	beq.n	8008bc8 <__lo0bits+0x22>
 8008bb0:	07d9      	lsls	r1, r3, #31
 8008bb2:	d421      	bmi.n	8008bf8 <__lo0bits+0x52>
 8008bb4:	0798      	lsls	r0, r3, #30
 8008bb6:	bf49      	itett	mi
 8008bb8:	085b      	lsrmi	r3, r3, #1
 8008bba:	089b      	lsrpl	r3, r3, #2
 8008bbc:	2001      	movmi	r0, #1
 8008bbe:	6013      	strmi	r3, [r2, #0]
 8008bc0:	bf5c      	itt	pl
 8008bc2:	2002      	movpl	r0, #2
 8008bc4:	6013      	strpl	r3, [r2, #0]
 8008bc6:	4770      	bx	lr
 8008bc8:	b299      	uxth	r1, r3
 8008bca:	b909      	cbnz	r1, 8008bd0 <__lo0bits+0x2a>
 8008bcc:	2010      	movs	r0, #16
 8008bce:	0c1b      	lsrs	r3, r3, #16
 8008bd0:	b2d9      	uxtb	r1, r3
 8008bd2:	b909      	cbnz	r1, 8008bd8 <__lo0bits+0x32>
 8008bd4:	3008      	adds	r0, #8
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	0719      	lsls	r1, r3, #28
 8008bda:	bf04      	itt	eq
 8008bdc:	091b      	lsreq	r3, r3, #4
 8008bde:	3004      	addeq	r0, #4
 8008be0:	0799      	lsls	r1, r3, #30
 8008be2:	bf04      	itt	eq
 8008be4:	089b      	lsreq	r3, r3, #2
 8008be6:	3002      	addeq	r0, #2
 8008be8:	07d9      	lsls	r1, r3, #31
 8008bea:	d403      	bmi.n	8008bf4 <__lo0bits+0x4e>
 8008bec:	085b      	lsrs	r3, r3, #1
 8008bee:	f100 0001 	add.w	r0, r0, #1
 8008bf2:	d003      	beq.n	8008bfc <__lo0bits+0x56>
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	4770      	bx	lr
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4770      	bx	lr
 8008bfc:	2020      	movs	r0, #32
 8008bfe:	4770      	bx	lr

08008c00 <__i2b>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	460c      	mov	r4, r1
 8008c04:	2101      	movs	r1, #1
 8008c06:	f7ff febd 	bl	8008984 <_Balloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	b928      	cbnz	r0, 8008c1a <__i2b+0x1a>
 8008c0e:	f240 1145 	movw	r1, #325	@ 0x145
 8008c12:	4b04      	ldr	r3, [pc, #16]	@ (8008c24 <__i2b+0x24>)
 8008c14:	4804      	ldr	r0, [pc, #16]	@ (8008c28 <__i2b+0x28>)
 8008c16:	f000 ff31 	bl	8009a7c <__assert_func>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	6144      	str	r4, [r0, #20]
 8008c1e:	6103      	str	r3, [r0, #16]
 8008c20:	bd10      	pop	{r4, pc}
 8008c22:	bf00      	nop
 8008c24:	0800b3c8 	.word	0x0800b3c8
 8008c28:	0800b450 	.word	0x0800b450

08008c2c <__multiply>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	4614      	mov	r4, r2
 8008c32:	690a      	ldr	r2, [r1, #16]
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	460f      	mov	r7, r1
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	bfa2      	ittt	ge
 8008c3c:	4623      	movge	r3, r4
 8008c3e:	460c      	movge	r4, r1
 8008c40:	461f      	movge	r7, r3
 8008c42:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c46:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	6861      	ldr	r1, [r4, #4]
 8008c4e:	eb0a 0609 	add.w	r6, sl, r9
 8008c52:	42b3      	cmp	r3, r6
 8008c54:	b085      	sub	sp, #20
 8008c56:	bfb8      	it	lt
 8008c58:	3101      	addlt	r1, #1
 8008c5a:	f7ff fe93 	bl	8008984 <_Balloc>
 8008c5e:	b930      	cbnz	r0, 8008c6e <__multiply+0x42>
 8008c60:	4602      	mov	r2, r0
 8008c62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c66:	4b43      	ldr	r3, [pc, #268]	@ (8008d74 <__multiply+0x148>)
 8008c68:	4843      	ldr	r0, [pc, #268]	@ (8008d78 <__multiply+0x14c>)
 8008c6a:	f000 ff07 	bl	8009a7c <__assert_func>
 8008c6e:	f100 0514 	add.w	r5, r0, #20
 8008c72:	462b      	mov	r3, r5
 8008c74:	2200      	movs	r2, #0
 8008c76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c7a:	4543      	cmp	r3, r8
 8008c7c:	d321      	bcc.n	8008cc2 <__multiply+0x96>
 8008c7e:	f107 0114 	add.w	r1, r7, #20
 8008c82:	f104 0214 	add.w	r2, r4, #20
 8008c86:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c8a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c8e:	9302      	str	r3, [sp, #8]
 8008c90:	1b13      	subs	r3, r2, r4
 8008c92:	3b15      	subs	r3, #21
 8008c94:	f023 0303 	bic.w	r3, r3, #3
 8008c98:	3304      	adds	r3, #4
 8008c9a:	f104 0715 	add.w	r7, r4, #21
 8008c9e:	42ba      	cmp	r2, r7
 8008ca0:	bf38      	it	cc
 8008ca2:	2304      	movcc	r3, #4
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	9b02      	ldr	r3, [sp, #8]
 8008ca8:	9103      	str	r1, [sp, #12]
 8008caa:	428b      	cmp	r3, r1
 8008cac:	d80c      	bhi.n	8008cc8 <__multiply+0x9c>
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	dd03      	ble.n	8008cba <__multiply+0x8e>
 8008cb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d05a      	beq.n	8008d70 <__multiply+0x144>
 8008cba:	6106      	str	r6, [r0, #16]
 8008cbc:	b005      	add	sp, #20
 8008cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	f843 2b04 	str.w	r2, [r3], #4
 8008cc6:	e7d8      	b.n	8008c7a <__multiply+0x4e>
 8008cc8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ccc:	f1ba 0f00 	cmp.w	sl, #0
 8008cd0:	d023      	beq.n	8008d1a <__multiply+0xee>
 8008cd2:	46a9      	mov	r9, r5
 8008cd4:	f04f 0c00 	mov.w	ip, #0
 8008cd8:	f104 0e14 	add.w	lr, r4, #20
 8008cdc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ce0:	f8d9 3000 	ldr.w	r3, [r9]
 8008ce4:	fa1f fb87 	uxth.w	fp, r7
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	fb0a 330b 	mla	r3, sl, fp, r3
 8008cee:	4463      	add	r3, ip
 8008cf0:	f8d9 c000 	ldr.w	ip, [r9]
 8008cf4:	0c3f      	lsrs	r7, r7, #16
 8008cf6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008cfa:	fb0a c707 	mla	r7, sl, r7, ip
 8008cfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d08:	4572      	cmp	r2, lr
 8008d0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d0e:	f849 3b04 	str.w	r3, [r9], #4
 8008d12:	d8e3      	bhi.n	8008cdc <__multiply+0xb0>
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	f845 c003 	str.w	ip, [r5, r3]
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	3104      	adds	r1, #4
 8008d1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d22:	f1b9 0f00 	cmp.w	r9, #0
 8008d26:	d021      	beq.n	8008d6c <__multiply+0x140>
 8008d28:	46ae      	mov	lr, r5
 8008d2a:	f04f 0a00 	mov.w	sl, #0
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	f104 0c14 	add.w	ip, r4, #20
 8008d34:	f8bc b000 	ldrh.w	fp, [ip]
 8008d38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	fb09 770b 	mla	r7, r9, fp, r7
 8008d42:	4457      	add	r7, sl
 8008d44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d48:	f84e 3b04 	str.w	r3, [lr], #4
 8008d4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d54:	f8be 3000 	ldrh.w	r3, [lr]
 8008d58:	4562      	cmp	r2, ip
 8008d5a:	fb09 330a 	mla	r3, r9, sl, r3
 8008d5e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d66:	d8e5      	bhi.n	8008d34 <__multiply+0x108>
 8008d68:	9f01      	ldr	r7, [sp, #4]
 8008d6a:	51eb      	str	r3, [r5, r7]
 8008d6c:	3504      	adds	r5, #4
 8008d6e:	e79a      	b.n	8008ca6 <__multiply+0x7a>
 8008d70:	3e01      	subs	r6, #1
 8008d72:	e79c      	b.n	8008cae <__multiply+0x82>
 8008d74:	0800b3c8 	.word	0x0800b3c8
 8008d78:	0800b450 	.word	0x0800b450

08008d7c <__pow5mult>:
 8008d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d80:	4615      	mov	r5, r2
 8008d82:	f012 0203 	ands.w	r2, r2, #3
 8008d86:	4607      	mov	r7, r0
 8008d88:	460e      	mov	r6, r1
 8008d8a:	d007      	beq.n	8008d9c <__pow5mult+0x20>
 8008d8c:	4c25      	ldr	r4, [pc, #148]	@ (8008e24 <__pow5mult+0xa8>)
 8008d8e:	3a01      	subs	r2, #1
 8008d90:	2300      	movs	r3, #0
 8008d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d96:	f7ff fe57 	bl	8008a48 <__multadd>
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	10ad      	asrs	r5, r5, #2
 8008d9e:	d03d      	beq.n	8008e1c <__pow5mult+0xa0>
 8008da0:	69fc      	ldr	r4, [r7, #28]
 8008da2:	b97c      	cbnz	r4, 8008dc4 <__pow5mult+0x48>
 8008da4:	2010      	movs	r0, #16
 8008da6:	f000 fe9b 	bl	8009ae0 <malloc>
 8008daa:	4602      	mov	r2, r0
 8008dac:	61f8      	str	r0, [r7, #28]
 8008dae:	b928      	cbnz	r0, 8008dbc <__pow5mult+0x40>
 8008db0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008db4:	4b1c      	ldr	r3, [pc, #112]	@ (8008e28 <__pow5mult+0xac>)
 8008db6:	481d      	ldr	r0, [pc, #116]	@ (8008e2c <__pow5mult+0xb0>)
 8008db8:	f000 fe60 	bl	8009a7c <__assert_func>
 8008dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008dc0:	6004      	str	r4, [r0, #0]
 8008dc2:	60c4      	str	r4, [r0, #12]
 8008dc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dcc:	b94c      	cbnz	r4, 8008de2 <__pow5mult+0x66>
 8008dce:	f240 2171 	movw	r1, #625	@ 0x271
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f7ff ff14 	bl	8008c00 <__i2b>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4604      	mov	r4, r0
 8008ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8008de0:	6003      	str	r3, [r0, #0]
 8008de2:	f04f 0900 	mov.w	r9, #0
 8008de6:	07eb      	lsls	r3, r5, #31
 8008de8:	d50a      	bpl.n	8008e00 <__pow5mult+0x84>
 8008dea:	4631      	mov	r1, r6
 8008dec:	4622      	mov	r2, r4
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7ff ff1c 	bl	8008c2c <__multiply>
 8008df4:	4680      	mov	r8, r0
 8008df6:	4631      	mov	r1, r6
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff fe03 	bl	8008a04 <_Bfree>
 8008dfe:	4646      	mov	r6, r8
 8008e00:	106d      	asrs	r5, r5, #1
 8008e02:	d00b      	beq.n	8008e1c <__pow5mult+0xa0>
 8008e04:	6820      	ldr	r0, [r4, #0]
 8008e06:	b938      	cbnz	r0, 8008e18 <__pow5mult+0x9c>
 8008e08:	4622      	mov	r2, r4
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f7ff ff0d 	bl	8008c2c <__multiply>
 8008e12:	6020      	str	r0, [r4, #0]
 8008e14:	f8c0 9000 	str.w	r9, [r0]
 8008e18:	4604      	mov	r4, r0
 8008e1a:	e7e4      	b.n	8008de6 <__pow5mult+0x6a>
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e22:	bf00      	nop
 8008e24:	0800b4ac 	.word	0x0800b4ac
 8008e28:	0800b439 	.word	0x0800b439
 8008e2c:	0800b450 	.word	0x0800b450

08008e30 <__lshift>:
 8008e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e34:	460c      	mov	r4, r1
 8008e36:	4607      	mov	r7, r0
 8008e38:	4691      	mov	r9, r2
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	6849      	ldr	r1, [r1, #4]
 8008e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e48:	f108 0601 	add.w	r6, r8, #1
 8008e4c:	42b3      	cmp	r3, r6
 8008e4e:	db0b      	blt.n	8008e68 <__lshift+0x38>
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff fd97 	bl	8008984 <_Balloc>
 8008e56:	4605      	mov	r5, r0
 8008e58:	b948      	cbnz	r0, 8008e6e <__lshift+0x3e>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e60:	4b27      	ldr	r3, [pc, #156]	@ (8008f00 <__lshift+0xd0>)
 8008e62:	4828      	ldr	r0, [pc, #160]	@ (8008f04 <__lshift+0xd4>)
 8008e64:	f000 fe0a 	bl	8009a7c <__assert_func>
 8008e68:	3101      	adds	r1, #1
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	e7ee      	b.n	8008e4c <__lshift+0x1c>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f100 0114 	add.w	r1, r0, #20
 8008e74:	f100 0210 	add.w	r2, r0, #16
 8008e78:	4618      	mov	r0, r3
 8008e7a:	4553      	cmp	r3, sl
 8008e7c:	db33      	blt.n	8008ee6 <__lshift+0xb6>
 8008e7e:	6920      	ldr	r0, [r4, #16]
 8008e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e84:	f104 0314 	add.w	r3, r4, #20
 8008e88:	f019 091f 	ands.w	r9, r9, #31
 8008e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e94:	d02b      	beq.n	8008eee <__lshift+0xbe>
 8008e96:	468a      	mov	sl, r1
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ea4:	4310      	orrs	r0, r2
 8008ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8008eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eae:	459c      	cmp	ip, r3
 8008eb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008eb4:	d8f3      	bhi.n	8008e9e <__lshift+0x6e>
 8008eb6:	ebac 0304 	sub.w	r3, ip, r4
 8008eba:	3b15      	subs	r3, #21
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	f104 0015 	add.w	r0, r4, #21
 8008ec6:	4584      	cmp	ip, r0
 8008ec8:	bf38      	it	cc
 8008eca:	2304      	movcc	r3, #4
 8008ecc:	50ca      	str	r2, [r1, r3]
 8008ece:	b10a      	cbz	r2, 8008ed4 <__lshift+0xa4>
 8008ed0:	f108 0602 	add.w	r6, r8, #2
 8008ed4:	3e01      	subs	r6, #1
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	4621      	mov	r1, r4
 8008eda:	612e      	str	r6, [r5, #16]
 8008edc:	f7ff fd92 	bl	8008a04 <_Bfree>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eea:	3301      	adds	r3, #1
 8008eec:	e7c5      	b.n	8008e7a <__lshift+0x4a>
 8008eee:	3904      	subs	r1, #4
 8008ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef4:	459c      	cmp	ip, r3
 8008ef6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008efa:	d8f9      	bhi.n	8008ef0 <__lshift+0xc0>
 8008efc:	e7ea      	b.n	8008ed4 <__lshift+0xa4>
 8008efe:	bf00      	nop
 8008f00:	0800b3c8 	.word	0x0800b3c8
 8008f04:	0800b450 	.word	0x0800b450

08008f08 <__mcmp>:
 8008f08:	4603      	mov	r3, r0
 8008f0a:	690a      	ldr	r2, [r1, #16]
 8008f0c:	6900      	ldr	r0, [r0, #16]
 8008f0e:	b530      	push	{r4, r5, lr}
 8008f10:	1a80      	subs	r0, r0, r2
 8008f12:	d10e      	bne.n	8008f32 <__mcmp+0x2a>
 8008f14:	3314      	adds	r3, #20
 8008f16:	3114      	adds	r1, #20
 8008f18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f28:	4295      	cmp	r5, r2
 8008f2a:	d003      	beq.n	8008f34 <__mcmp+0x2c>
 8008f2c:	d205      	bcs.n	8008f3a <__mcmp+0x32>
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f32:	bd30      	pop	{r4, r5, pc}
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d3f3      	bcc.n	8008f20 <__mcmp+0x18>
 8008f38:	e7fb      	b.n	8008f32 <__mcmp+0x2a>
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7f9      	b.n	8008f32 <__mcmp+0x2a>
	...

08008f40 <__mdiff>:
 8008f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	4689      	mov	r9, r1
 8008f46:	4606      	mov	r6, r0
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4648      	mov	r0, r9
 8008f4c:	4614      	mov	r4, r2
 8008f4e:	f7ff ffdb 	bl	8008f08 <__mcmp>
 8008f52:	1e05      	subs	r5, r0, #0
 8008f54:	d112      	bne.n	8008f7c <__mdiff+0x3c>
 8008f56:	4629      	mov	r1, r5
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7ff fd13 	bl	8008984 <_Balloc>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	b928      	cbnz	r0, 8008f6e <__mdiff+0x2e>
 8008f62:	f240 2137 	movw	r1, #567	@ 0x237
 8008f66:	4b3e      	ldr	r3, [pc, #248]	@ (8009060 <__mdiff+0x120>)
 8008f68:	483e      	ldr	r0, [pc, #248]	@ (8009064 <__mdiff+0x124>)
 8008f6a:	f000 fd87 	bl	8009a7c <__assert_func>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f74:	4610      	mov	r0, r2
 8008f76:	b003      	add	sp, #12
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7c:	bfbc      	itt	lt
 8008f7e:	464b      	movlt	r3, r9
 8008f80:	46a1      	movlt	r9, r4
 8008f82:	4630      	mov	r0, r6
 8008f84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f88:	bfba      	itte	lt
 8008f8a:	461c      	movlt	r4, r3
 8008f8c:	2501      	movlt	r5, #1
 8008f8e:	2500      	movge	r5, #0
 8008f90:	f7ff fcf8 	bl	8008984 <_Balloc>
 8008f94:	4602      	mov	r2, r0
 8008f96:	b918      	cbnz	r0, 8008fa0 <__mdiff+0x60>
 8008f98:	f240 2145 	movw	r1, #581	@ 0x245
 8008f9c:	4b30      	ldr	r3, [pc, #192]	@ (8009060 <__mdiff+0x120>)
 8008f9e:	e7e3      	b.n	8008f68 <__mdiff+0x28>
 8008fa0:	f100 0b14 	add.w	fp, r0, #20
 8008fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fa8:	f109 0310 	add.w	r3, r9, #16
 8008fac:	60c5      	str	r5, [r0, #12]
 8008fae:	f04f 0c00 	mov.w	ip, #0
 8008fb2:	f109 0514 	add.w	r5, r9, #20
 8008fb6:	46d9      	mov	r9, fp
 8008fb8:	6926      	ldr	r6, [r4, #16]
 8008fba:	f104 0e14 	add.w	lr, r4, #20
 8008fbe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fc2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008fce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008fd2:	b281      	uxth	r1, r0
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	fa1f f38a 	uxth.w	r3, sl
 8008fda:	1a5b      	subs	r3, r3, r1
 8008fdc:	0c00      	lsrs	r0, r0, #16
 8008fde:	4463      	add	r3, ip
 8008fe0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008fe4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fee:	4576      	cmp	r6, lr
 8008ff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ff4:	f849 3b04 	str.w	r3, [r9], #4
 8008ff8:	d8e6      	bhi.n	8008fc8 <__mdiff+0x88>
 8008ffa:	1b33      	subs	r3, r6, r4
 8008ffc:	3b15      	subs	r3, #21
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	3415      	adds	r4, #21
 8009004:	3304      	adds	r3, #4
 8009006:	42a6      	cmp	r6, r4
 8009008:	bf38      	it	cc
 800900a:	2304      	movcc	r3, #4
 800900c:	441d      	add	r5, r3
 800900e:	445b      	add	r3, fp
 8009010:	461e      	mov	r6, r3
 8009012:	462c      	mov	r4, r5
 8009014:	4544      	cmp	r4, r8
 8009016:	d30e      	bcc.n	8009036 <__mdiff+0xf6>
 8009018:	f108 0103 	add.w	r1, r8, #3
 800901c:	1b49      	subs	r1, r1, r5
 800901e:	f021 0103 	bic.w	r1, r1, #3
 8009022:	3d03      	subs	r5, #3
 8009024:	45a8      	cmp	r8, r5
 8009026:	bf38      	it	cc
 8009028:	2100      	movcc	r1, #0
 800902a:	440b      	add	r3, r1
 800902c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009030:	b199      	cbz	r1, 800905a <__mdiff+0x11a>
 8009032:	6117      	str	r7, [r2, #16]
 8009034:	e79e      	b.n	8008f74 <__mdiff+0x34>
 8009036:	46e6      	mov	lr, ip
 8009038:	f854 1b04 	ldr.w	r1, [r4], #4
 800903c:	fa1f fc81 	uxth.w	ip, r1
 8009040:	44f4      	add	ip, lr
 8009042:	0c08      	lsrs	r0, r1, #16
 8009044:	4471      	add	r1, lr
 8009046:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800904a:	b289      	uxth	r1, r1
 800904c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009054:	f846 1b04 	str.w	r1, [r6], #4
 8009058:	e7dc      	b.n	8009014 <__mdiff+0xd4>
 800905a:	3f01      	subs	r7, #1
 800905c:	e7e6      	b.n	800902c <__mdiff+0xec>
 800905e:	bf00      	nop
 8009060:	0800b3c8 	.word	0x0800b3c8
 8009064:	0800b450 	.word	0x0800b450

08009068 <__ulp>:
 8009068:	4b0e      	ldr	r3, [pc, #56]	@ (80090a4 <__ulp+0x3c>)
 800906a:	400b      	ands	r3, r1
 800906c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009070:	2b00      	cmp	r3, #0
 8009072:	dc08      	bgt.n	8009086 <__ulp+0x1e>
 8009074:	425b      	negs	r3, r3
 8009076:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800907a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800907e:	da04      	bge.n	800908a <__ulp+0x22>
 8009080:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009084:	4113      	asrs	r3, r2
 8009086:	2200      	movs	r2, #0
 8009088:	e008      	b.n	800909c <__ulp+0x34>
 800908a:	f1a2 0314 	sub.w	r3, r2, #20
 800908e:	2b1e      	cmp	r3, #30
 8009090:	bfd6      	itet	le
 8009092:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009096:	2201      	movgt	r2, #1
 8009098:	40da      	lsrle	r2, r3
 800909a:	2300      	movs	r3, #0
 800909c:	4619      	mov	r1, r3
 800909e:	4610      	mov	r0, r2
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	7ff00000 	.word	0x7ff00000

080090a8 <__b2d>:
 80090a8:	6902      	ldr	r2, [r0, #16]
 80090aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ac:	f100 0614 	add.w	r6, r0, #20
 80090b0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80090b4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80090b8:	4f1e      	ldr	r7, [pc, #120]	@ (8009134 <__b2d+0x8c>)
 80090ba:	4620      	mov	r0, r4
 80090bc:	f7ff fd54 	bl	8008b68 <__hi0bits>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f1c0 0020 	rsb	r0, r0, #32
 80090c6:	2b0a      	cmp	r3, #10
 80090c8:	f1a2 0504 	sub.w	r5, r2, #4
 80090cc:	6008      	str	r0, [r1, #0]
 80090ce:	dc12      	bgt.n	80090f6 <__b2d+0x4e>
 80090d0:	42ae      	cmp	r6, r5
 80090d2:	bf2c      	ite	cs
 80090d4:	2200      	movcs	r2, #0
 80090d6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80090da:	f1c3 0c0b 	rsb	ip, r3, #11
 80090de:	3315      	adds	r3, #21
 80090e0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80090e4:	fa04 f303 	lsl.w	r3, r4, r3
 80090e8:	fa22 f20c 	lsr.w	r2, r2, ip
 80090ec:	ea4e 0107 	orr.w	r1, lr, r7
 80090f0:	431a      	orrs	r2, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f6:	42ae      	cmp	r6, r5
 80090f8:	bf36      	itet	cc
 80090fa:	f1a2 0508 	subcc.w	r5, r2, #8
 80090fe:	2200      	movcs	r2, #0
 8009100:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009104:	3b0b      	subs	r3, #11
 8009106:	d012      	beq.n	800912e <__b2d+0x86>
 8009108:	f1c3 0720 	rsb	r7, r3, #32
 800910c:	fa22 f107 	lsr.w	r1, r2, r7
 8009110:	409c      	lsls	r4, r3
 8009112:	430c      	orrs	r4, r1
 8009114:	42b5      	cmp	r5, r6
 8009116:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800911a:	bf94      	ite	ls
 800911c:	2400      	movls	r4, #0
 800911e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009122:	409a      	lsls	r2, r3
 8009124:	40fc      	lsrs	r4, r7
 8009126:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800912a:	4322      	orrs	r2, r4
 800912c:	e7e1      	b.n	80090f2 <__b2d+0x4a>
 800912e:	ea44 0107 	orr.w	r1, r4, r7
 8009132:	e7de      	b.n	80090f2 <__b2d+0x4a>
 8009134:	3ff00000 	.word	0x3ff00000

08009138 <__d2b>:
 8009138:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800913c:	2101      	movs	r1, #1
 800913e:	4690      	mov	r8, r2
 8009140:	4699      	mov	r9, r3
 8009142:	9e08      	ldr	r6, [sp, #32]
 8009144:	f7ff fc1e 	bl	8008984 <_Balloc>
 8009148:	4604      	mov	r4, r0
 800914a:	b930      	cbnz	r0, 800915a <__d2b+0x22>
 800914c:	4602      	mov	r2, r0
 800914e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009152:	4b23      	ldr	r3, [pc, #140]	@ (80091e0 <__d2b+0xa8>)
 8009154:	4823      	ldr	r0, [pc, #140]	@ (80091e4 <__d2b+0xac>)
 8009156:	f000 fc91 	bl	8009a7c <__assert_func>
 800915a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800915e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009162:	b10d      	cbz	r5, 8009168 <__d2b+0x30>
 8009164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	f1b8 0300 	subs.w	r3, r8, #0
 800916e:	d024      	beq.n	80091ba <__d2b+0x82>
 8009170:	4668      	mov	r0, sp
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	f7ff fd17 	bl	8008ba6 <__lo0bits>
 8009178:	e9dd 1200 	ldrd	r1, r2, [sp]
 800917c:	b1d8      	cbz	r0, 80091b6 <__d2b+0x7e>
 800917e:	f1c0 0320 	rsb	r3, r0, #32
 8009182:	fa02 f303 	lsl.w	r3, r2, r3
 8009186:	430b      	orrs	r3, r1
 8009188:	40c2      	lsrs	r2, r0
 800918a:	6163      	str	r3, [r4, #20]
 800918c:	9201      	str	r2, [sp, #4]
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	bf0c      	ite	eq
 8009194:	2201      	moveq	r2, #1
 8009196:	2202      	movne	r2, #2
 8009198:	61a3      	str	r3, [r4, #24]
 800919a:	6122      	str	r2, [r4, #16]
 800919c:	b1ad      	cbz	r5, 80091ca <__d2b+0x92>
 800919e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80091a2:	4405      	add	r5, r0
 80091a4:	6035      	str	r5, [r6, #0]
 80091a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80091aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ac:	6018      	str	r0, [r3, #0]
 80091ae:	4620      	mov	r0, r4
 80091b0:	b002      	add	sp, #8
 80091b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80091b6:	6161      	str	r1, [r4, #20]
 80091b8:	e7e9      	b.n	800918e <__d2b+0x56>
 80091ba:	a801      	add	r0, sp, #4
 80091bc:	f7ff fcf3 	bl	8008ba6 <__lo0bits>
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	6163      	str	r3, [r4, #20]
 80091c6:	3020      	adds	r0, #32
 80091c8:	e7e7      	b.n	800919a <__d2b+0x62>
 80091ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091d2:	6030      	str	r0, [r6, #0]
 80091d4:	6918      	ldr	r0, [r3, #16]
 80091d6:	f7ff fcc7 	bl	8008b68 <__hi0bits>
 80091da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091de:	e7e4      	b.n	80091aa <__d2b+0x72>
 80091e0:	0800b3c8 	.word	0x0800b3c8
 80091e4:	0800b450 	.word	0x0800b450

080091e8 <__ratio>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	b085      	sub	sp, #20
 80091ee:	e9cd 1000 	strd	r1, r0, [sp]
 80091f2:	a902      	add	r1, sp, #8
 80091f4:	f7ff ff58 	bl	80090a8 <__b2d>
 80091f8:	468b      	mov	fp, r1
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	9800      	ldr	r0, [sp, #0]
 8009200:	a903      	add	r1, sp, #12
 8009202:	f7ff ff51 	bl	80090a8 <__b2d>
 8009206:	460d      	mov	r5, r1
 8009208:	9b01      	ldr	r3, [sp, #4]
 800920a:	4689      	mov	r9, r1
 800920c:	6919      	ldr	r1, [r3, #16]
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	4604      	mov	r4, r0
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	4630      	mov	r0, r6
 8009216:	1ac9      	subs	r1, r1, r3
 8009218:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009222:	2b00      	cmp	r3, #0
 8009224:	bfcd      	iteet	gt
 8009226:	463a      	movgt	r2, r7
 8009228:	462a      	movle	r2, r5
 800922a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800922e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009232:	bfd8      	it	le
 8009234:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009238:	464b      	mov	r3, r9
 800923a:	4622      	mov	r2, r4
 800923c:	4659      	mov	r1, fp
 800923e:	f7f7 fa75 	bl	800072c <__aeabi_ddiv>
 8009242:	b005      	add	sp, #20
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009248 <__copybits>:
 8009248:	3901      	subs	r1, #1
 800924a:	b570      	push	{r4, r5, r6, lr}
 800924c:	1149      	asrs	r1, r1, #5
 800924e:	6914      	ldr	r4, [r2, #16]
 8009250:	3101      	adds	r1, #1
 8009252:	f102 0314 	add.w	r3, r2, #20
 8009256:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800925a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800925e:	1f05      	subs	r5, r0, #4
 8009260:	42a3      	cmp	r3, r4
 8009262:	d30c      	bcc.n	800927e <__copybits+0x36>
 8009264:	1aa3      	subs	r3, r4, r2
 8009266:	3b11      	subs	r3, #17
 8009268:	f023 0303 	bic.w	r3, r3, #3
 800926c:	3211      	adds	r2, #17
 800926e:	42a2      	cmp	r2, r4
 8009270:	bf88      	it	hi
 8009272:	2300      	movhi	r3, #0
 8009274:	4418      	add	r0, r3
 8009276:	2300      	movs	r3, #0
 8009278:	4288      	cmp	r0, r1
 800927a:	d305      	bcc.n	8009288 <__copybits+0x40>
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009282:	f845 6f04 	str.w	r6, [r5, #4]!
 8009286:	e7eb      	b.n	8009260 <__copybits+0x18>
 8009288:	f840 3b04 	str.w	r3, [r0], #4
 800928c:	e7f4      	b.n	8009278 <__copybits+0x30>

0800928e <__any_on>:
 800928e:	f100 0214 	add.w	r2, r0, #20
 8009292:	6900      	ldr	r0, [r0, #16]
 8009294:	114b      	asrs	r3, r1, #5
 8009296:	4298      	cmp	r0, r3
 8009298:	b510      	push	{r4, lr}
 800929a:	db11      	blt.n	80092c0 <__any_on+0x32>
 800929c:	dd0a      	ble.n	80092b4 <__any_on+0x26>
 800929e:	f011 011f 	ands.w	r1, r1, #31
 80092a2:	d007      	beq.n	80092b4 <__any_on+0x26>
 80092a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092a8:	fa24 f001 	lsr.w	r0, r4, r1
 80092ac:	fa00 f101 	lsl.w	r1, r0, r1
 80092b0:	428c      	cmp	r4, r1
 80092b2:	d10b      	bne.n	80092cc <__any_on+0x3e>
 80092b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d803      	bhi.n	80092c4 <__any_on+0x36>
 80092bc:	2000      	movs	r0, #0
 80092be:	bd10      	pop	{r4, pc}
 80092c0:	4603      	mov	r3, r0
 80092c2:	e7f7      	b.n	80092b4 <__any_on+0x26>
 80092c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092c8:	2900      	cmp	r1, #0
 80092ca:	d0f5      	beq.n	80092b8 <__any_on+0x2a>
 80092cc:	2001      	movs	r0, #1
 80092ce:	e7f6      	b.n	80092be <__any_on+0x30>

080092d0 <__ascii_wctomb>:
 80092d0:	4603      	mov	r3, r0
 80092d2:	4608      	mov	r0, r1
 80092d4:	b141      	cbz	r1, 80092e8 <__ascii_wctomb+0x18>
 80092d6:	2aff      	cmp	r2, #255	@ 0xff
 80092d8:	d904      	bls.n	80092e4 <__ascii_wctomb+0x14>
 80092da:	228a      	movs	r2, #138	@ 0x8a
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	4770      	bx	lr
 80092e4:	2001      	movs	r0, #1
 80092e6:	700a      	strb	r2, [r1, #0]
 80092e8:	4770      	bx	lr

080092ea <__ssputs_r>:
 80092ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ee:	461f      	mov	r7, r3
 80092f0:	688e      	ldr	r6, [r1, #8]
 80092f2:	4682      	mov	sl, r0
 80092f4:	42be      	cmp	r6, r7
 80092f6:	460c      	mov	r4, r1
 80092f8:	4690      	mov	r8, r2
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	d82d      	bhi.n	800935a <__ssputs_r+0x70>
 80092fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009302:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009306:	d026      	beq.n	8009356 <__ssputs_r+0x6c>
 8009308:	6965      	ldr	r5, [r4, #20]
 800930a:	6909      	ldr	r1, [r1, #16]
 800930c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009310:	eba3 0901 	sub.w	r9, r3, r1
 8009314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009318:	1c7b      	adds	r3, r7, #1
 800931a:	444b      	add	r3, r9
 800931c:	106d      	asrs	r5, r5, #1
 800931e:	429d      	cmp	r5, r3
 8009320:	bf38      	it	cc
 8009322:	461d      	movcc	r5, r3
 8009324:	0553      	lsls	r3, r2, #21
 8009326:	d527      	bpl.n	8009378 <__ssputs_r+0x8e>
 8009328:	4629      	mov	r1, r5
 800932a:	f7ff fa8d 	bl	8008848 <_malloc_r>
 800932e:	4606      	mov	r6, r0
 8009330:	b360      	cbz	r0, 800938c <__ssputs_r+0xa2>
 8009332:	464a      	mov	r2, r9
 8009334:	6921      	ldr	r1, [r4, #16]
 8009336:	f7fe feca 	bl	80080ce <memcpy>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	6126      	str	r6, [r4, #16]
 8009348:	444e      	add	r6, r9
 800934a:	6026      	str	r6, [r4, #0]
 800934c:	463e      	mov	r6, r7
 800934e:	6165      	str	r5, [r4, #20]
 8009350:	eba5 0509 	sub.w	r5, r5, r9
 8009354:	60a5      	str	r5, [r4, #8]
 8009356:	42be      	cmp	r6, r7
 8009358:	d900      	bls.n	800935c <__ssputs_r+0x72>
 800935a:	463e      	mov	r6, r7
 800935c:	4632      	mov	r2, r6
 800935e:	4641      	mov	r1, r8
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	f000 fb53 	bl	8009a0c <memmove>
 8009366:	2000      	movs	r0, #0
 8009368:	68a3      	ldr	r3, [r4, #8]
 800936a:	1b9b      	subs	r3, r3, r6
 800936c:	60a3      	str	r3, [r4, #8]
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	4433      	add	r3, r6
 8009372:	6023      	str	r3, [r4, #0]
 8009374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009378:	462a      	mov	r2, r5
 800937a:	f000 fbb9 	bl	8009af0 <_realloc_r>
 800937e:	4606      	mov	r6, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	d1e0      	bne.n	8009346 <__ssputs_r+0x5c>
 8009384:	4650      	mov	r0, sl
 8009386:	6921      	ldr	r1, [r4, #16]
 8009388:	f7fe feba 	bl	8008100 <_free_r>
 800938c:	230c      	movs	r3, #12
 800938e:	f8ca 3000 	str.w	r3, [sl]
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	e7e9      	b.n	8009374 <__ssputs_r+0x8a>

080093a0 <_svfiprintf_r>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4698      	mov	r8, r3
 80093a6:	898b      	ldrh	r3, [r1, #12]
 80093a8:	4607      	mov	r7, r0
 80093aa:	061b      	lsls	r3, r3, #24
 80093ac:	460d      	mov	r5, r1
 80093ae:	4614      	mov	r4, r2
 80093b0:	b09d      	sub	sp, #116	@ 0x74
 80093b2:	d510      	bpl.n	80093d6 <_svfiprintf_r+0x36>
 80093b4:	690b      	ldr	r3, [r1, #16]
 80093b6:	b973      	cbnz	r3, 80093d6 <_svfiprintf_r+0x36>
 80093b8:	2140      	movs	r1, #64	@ 0x40
 80093ba:	f7ff fa45 	bl	8008848 <_malloc_r>
 80093be:	6028      	str	r0, [r5, #0]
 80093c0:	6128      	str	r0, [r5, #16]
 80093c2:	b930      	cbnz	r0, 80093d2 <_svfiprintf_r+0x32>
 80093c4:	230c      	movs	r3, #12
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	b01d      	add	sp, #116	@ 0x74
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	2340      	movs	r3, #64	@ 0x40
 80093d4:	616b      	str	r3, [r5, #20]
 80093d6:	2300      	movs	r3, #0
 80093d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093da:	2320      	movs	r3, #32
 80093dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093e0:	2330      	movs	r3, #48	@ 0x30
 80093e2:	f04f 0901 	mov.w	r9, #1
 80093e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009584 <_svfiprintf_r+0x1e4>
 80093ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093f2:	4623      	mov	r3, r4
 80093f4:	469a      	mov	sl, r3
 80093f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093fa:	b10a      	cbz	r2, 8009400 <_svfiprintf_r+0x60>
 80093fc:	2a25      	cmp	r2, #37	@ 0x25
 80093fe:	d1f9      	bne.n	80093f4 <_svfiprintf_r+0x54>
 8009400:	ebba 0b04 	subs.w	fp, sl, r4
 8009404:	d00b      	beq.n	800941e <_svfiprintf_r+0x7e>
 8009406:	465b      	mov	r3, fp
 8009408:	4622      	mov	r2, r4
 800940a:	4629      	mov	r1, r5
 800940c:	4638      	mov	r0, r7
 800940e:	f7ff ff6c 	bl	80092ea <__ssputs_r>
 8009412:	3001      	adds	r0, #1
 8009414:	f000 80a7 	beq.w	8009566 <_svfiprintf_r+0x1c6>
 8009418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800941a:	445a      	add	r2, fp
 800941c:	9209      	str	r2, [sp, #36]	@ 0x24
 800941e:	f89a 3000 	ldrb.w	r3, [sl]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 809f 	beq.w	8009566 <_svfiprintf_r+0x1c6>
 8009428:	2300      	movs	r3, #0
 800942a:	f04f 32ff 	mov.w	r2, #4294967295
 800942e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009432:	f10a 0a01 	add.w	sl, sl, #1
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800943e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009440:	4654      	mov	r4, sl
 8009442:	2205      	movs	r2, #5
 8009444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009448:	484e      	ldr	r0, [pc, #312]	@ (8009584 <_svfiprintf_r+0x1e4>)
 800944a:	f000 fb09 	bl	8009a60 <memchr>
 800944e:	9a04      	ldr	r2, [sp, #16]
 8009450:	b9d8      	cbnz	r0, 800948a <_svfiprintf_r+0xea>
 8009452:	06d0      	lsls	r0, r2, #27
 8009454:	bf44      	itt	mi
 8009456:	2320      	movmi	r3, #32
 8009458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800945c:	0711      	lsls	r1, r2, #28
 800945e:	bf44      	itt	mi
 8009460:	232b      	movmi	r3, #43	@ 0x2b
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009466:	f89a 3000 	ldrb.w	r3, [sl]
 800946a:	2b2a      	cmp	r3, #42	@ 0x2a
 800946c:	d015      	beq.n	800949a <_svfiprintf_r+0xfa>
 800946e:	4654      	mov	r4, sl
 8009470:	2000      	movs	r0, #0
 8009472:	f04f 0c0a 	mov.w	ip, #10
 8009476:	9a07      	ldr	r2, [sp, #28]
 8009478:	4621      	mov	r1, r4
 800947a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800947e:	3b30      	subs	r3, #48	@ 0x30
 8009480:	2b09      	cmp	r3, #9
 8009482:	d94b      	bls.n	800951c <_svfiprintf_r+0x17c>
 8009484:	b1b0      	cbz	r0, 80094b4 <_svfiprintf_r+0x114>
 8009486:	9207      	str	r2, [sp, #28]
 8009488:	e014      	b.n	80094b4 <_svfiprintf_r+0x114>
 800948a:	eba0 0308 	sub.w	r3, r0, r8
 800948e:	fa09 f303 	lsl.w	r3, r9, r3
 8009492:	4313      	orrs	r3, r2
 8009494:	46a2      	mov	sl, r4
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	e7d2      	b.n	8009440 <_svfiprintf_r+0xa0>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	1d19      	adds	r1, r3, #4
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9103      	str	r1, [sp, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bfbb      	ittet	lt
 80094a6:	425b      	neglt	r3, r3
 80094a8:	f042 0202 	orrlt.w	r2, r2, #2
 80094ac:	9307      	strge	r3, [sp, #28]
 80094ae:	9307      	strlt	r3, [sp, #28]
 80094b0:	bfb8      	it	lt
 80094b2:	9204      	strlt	r2, [sp, #16]
 80094b4:	7823      	ldrb	r3, [r4, #0]
 80094b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80094b8:	d10a      	bne.n	80094d0 <_svfiprintf_r+0x130>
 80094ba:	7863      	ldrb	r3, [r4, #1]
 80094bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80094be:	d132      	bne.n	8009526 <_svfiprintf_r+0x186>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	3402      	adds	r4, #2
 80094c4:	1d1a      	adds	r2, r3, #4
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	9203      	str	r2, [sp, #12]
 80094ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009588 <_svfiprintf_r+0x1e8>
 80094d4:	2203      	movs	r2, #3
 80094d6:	4650      	mov	r0, sl
 80094d8:	7821      	ldrb	r1, [r4, #0]
 80094da:	f000 fac1 	bl	8009a60 <memchr>
 80094de:	b138      	cbz	r0, 80094f0 <_svfiprintf_r+0x150>
 80094e0:	2240      	movs	r2, #64	@ 0x40
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	eba0 000a 	sub.w	r0, r0, sl
 80094e8:	4082      	lsls	r2, r0
 80094ea:	4313      	orrs	r3, r2
 80094ec:	3401      	adds	r4, #1
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f4:	2206      	movs	r2, #6
 80094f6:	4825      	ldr	r0, [pc, #148]	@ (800958c <_svfiprintf_r+0x1ec>)
 80094f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094fc:	f000 fab0 	bl	8009a60 <memchr>
 8009500:	2800      	cmp	r0, #0
 8009502:	d036      	beq.n	8009572 <_svfiprintf_r+0x1d2>
 8009504:	4b22      	ldr	r3, [pc, #136]	@ (8009590 <_svfiprintf_r+0x1f0>)
 8009506:	bb1b      	cbnz	r3, 8009550 <_svfiprintf_r+0x1b0>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	3307      	adds	r3, #7
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	3308      	adds	r3, #8
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009516:	4433      	add	r3, r6
 8009518:	9309      	str	r3, [sp, #36]	@ 0x24
 800951a:	e76a      	b.n	80093f2 <_svfiprintf_r+0x52>
 800951c:	460c      	mov	r4, r1
 800951e:	2001      	movs	r0, #1
 8009520:	fb0c 3202 	mla	r2, ip, r2, r3
 8009524:	e7a8      	b.n	8009478 <_svfiprintf_r+0xd8>
 8009526:	2300      	movs	r3, #0
 8009528:	f04f 0c0a 	mov.w	ip, #10
 800952c:	4619      	mov	r1, r3
 800952e:	3401      	adds	r4, #1
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	4620      	mov	r0, r4
 8009534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009538:	3a30      	subs	r2, #48	@ 0x30
 800953a:	2a09      	cmp	r2, #9
 800953c:	d903      	bls.n	8009546 <_svfiprintf_r+0x1a6>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0c6      	beq.n	80094d0 <_svfiprintf_r+0x130>
 8009542:	9105      	str	r1, [sp, #20]
 8009544:	e7c4      	b.n	80094d0 <_svfiprintf_r+0x130>
 8009546:	4604      	mov	r4, r0
 8009548:	2301      	movs	r3, #1
 800954a:	fb0c 2101 	mla	r1, ip, r1, r2
 800954e:	e7f0      	b.n	8009532 <_svfiprintf_r+0x192>
 8009550:	ab03      	add	r3, sp, #12
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	462a      	mov	r2, r5
 8009556:	4638      	mov	r0, r7
 8009558:	4b0e      	ldr	r3, [pc, #56]	@ (8009594 <_svfiprintf_r+0x1f4>)
 800955a:	a904      	add	r1, sp, #16
 800955c:	f3af 8000 	nop.w
 8009560:	1c42      	adds	r2, r0, #1
 8009562:	4606      	mov	r6, r0
 8009564:	d1d6      	bne.n	8009514 <_svfiprintf_r+0x174>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	065b      	lsls	r3, r3, #25
 800956a:	f53f af2d 	bmi.w	80093c8 <_svfiprintf_r+0x28>
 800956e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009570:	e72c      	b.n	80093cc <_svfiprintf_r+0x2c>
 8009572:	ab03      	add	r3, sp, #12
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	462a      	mov	r2, r5
 8009578:	4638      	mov	r0, r7
 800957a:	4b06      	ldr	r3, [pc, #24]	@ (8009594 <_svfiprintf_r+0x1f4>)
 800957c:	a904      	add	r1, sp, #16
 800957e:	f000 f87d 	bl	800967c <_printf_i>
 8009582:	e7ed      	b.n	8009560 <_svfiprintf_r+0x1c0>
 8009584:	0800b6a9 	.word	0x0800b6a9
 8009588:	0800b6af 	.word	0x0800b6af
 800958c:	0800b6b3 	.word	0x0800b6b3
 8009590:	00000000 	.word	0x00000000
 8009594:	080092eb 	.word	0x080092eb

08009598 <_printf_common>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	4616      	mov	r6, r2
 800959e:	4698      	mov	r8, r3
 80095a0:	688a      	ldr	r2, [r1, #8]
 80095a2:	690b      	ldr	r3, [r1, #16]
 80095a4:	4607      	mov	r7, r0
 80095a6:	4293      	cmp	r3, r2
 80095a8:	bfb8      	it	lt
 80095aa:	4613      	movlt	r3, r2
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095b2:	460c      	mov	r4, r1
 80095b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095b8:	b10a      	cbz	r2, 80095be <_printf_common+0x26>
 80095ba:	3301      	adds	r3, #1
 80095bc:	6033      	str	r3, [r6, #0]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	0699      	lsls	r1, r3, #26
 80095c2:	bf42      	ittt	mi
 80095c4:	6833      	ldrmi	r3, [r6, #0]
 80095c6:	3302      	addmi	r3, #2
 80095c8:	6033      	strmi	r3, [r6, #0]
 80095ca:	6825      	ldr	r5, [r4, #0]
 80095cc:	f015 0506 	ands.w	r5, r5, #6
 80095d0:	d106      	bne.n	80095e0 <_printf_common+0x48>
 80095d2:	f104 0a19 	add.w	sl, r4, #25
 80095d6:	68e3      	ldr	r3, [r4, #12]
 80095d8:	6832      	ldr	r2, [r6, #0]
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc2b      	bgt.n	8009638 <_printf_common+0xa0>
 80095e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	3b00      	subs	r3, #0
 80095e8:	bf18      	it	ne
 80095ea:	2301      	movne	r3, #1
 80095ec:	0692      	lsls	r2, r2, #26
 80095ee:	d430      	bmi.n	8009652 <_printf_common+0xba>
 80095f0:	4641      	mov	r1, r8
 80095f2:	4638      	mov	r0, r7
 80095f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095f8:	47c8      	blx	r9
 80095fa:	3001      	adds	r0, #1
 80095fc:	d023      	beq.n	8009646 <_printf_common+0xae>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6922      	ldr	r2, [r4, #16]
 8009602:	f003 0306 	and.w	r3, r3, #6
 8009606:	2b04      	cmp	r3, #4
 8009608:	bf14      	ite	ne
 800960a:	2500      	movne	r5, #0
 800960c:	6833      	ldreq	r3, [r6, #0]
 800960e:	f04f 0600 	mov.w	r6, #0
 8009612:	bf08      	it	eq
 8009614:	68e5      	ldreq	r5, [r4, #12]
 8009616:	f104 041a 	add.w	r4, r4, #26
 800961a:	bf08      	it	eq
 800961c:	1aed      	subeq	r5, r5, r3
 800961e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009622:	bf08      	it	eq
 8009624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009628:	4293      	cmp	r3, r2
 800962a:	bfc4      	itt	gt
 800962c:	1a9b      	subgt	r3, r3, r2
 800962e:	18ed      	addgt	r5, r5, r3
 8009630:	42b5      	cmp	r5, r6
 8009632:	d11a      	bne.n	800966a <_printf_common+0xd2>
 8009634:	2000      	movs	r0, #0
 8009636:	e008      	b.n	800964a <_printf_common+0xb2>
 8009638:	2301      	movs	r3, #1
 800963a:	4652      	mov	r2, sl
 800963c:	4641      	mov	r1, r8
 800963e:	4638      	mov	r0, r7
 8009640:	47c8      	blx	r9
 8009642:	3001      	adds	r0, #1
 8009644:	d103      	bne.n	800964e <_printf_common+0xb6>
 8009646:	f04f 30ff 	mov.w	r0, #4294967295
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	3501      	adds	r5, #1
 8009650:	e7c1      	b.n	80095d6 <_printf_common+0x3e>
 8009652:	2030      	movs	r0, #48	@ 0x30
 8009654:	18e1      	adds	r1, r4, r3
 8009656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009660:	4422      	add	r2, r4
 8009662:	3302      	adds	r3, #2
 8009664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009668:	e7c2      	b.n	80095f0 <_printf_common+0x58>
 800966a:	2301      	movs	r3, #1
 800966c:	4622      	mov	r2, r4
 800966e:	4641      	mov	r1, r8
 8009670:	4638      	mov	r0, r7
 8009672:	47c8      	blx	r9
 8009674:	3001      	adds	r0, #1
 8009676:	d0e6      	beq.n	8009646 <_printf_common+0xae>
 8009678:	3601      	adds	r6, #1
 800967a:	e7d9      	b.n	8009630 <_printf_common+0x98>

0800967c <_printf_i>:
 800967c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	7e0f      	ldrb	r7, [r1, #24]
 8009682:	4691      	mov	r9, r2
 8009684:	2f78      	cmp	r7, #120	@ 0x78
 8009686:	4680      	mov	r8, r0
 8009688:	460c      	mov	r4, r1
 800968a:	469a      	mov	sl, r3
 800968c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800968e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009692:	d807      	bhi.n	80096a4 <_printf_i+0x28>
 8009694:	2f62      	cmp	r7, #98	@ 0x62
 8009696:	d80a      	bhi.n	80096ae <_printf_i+0x32>
 8009698:	2f00      	cmp	r7, #0
 800969a:	f000 80d3 	beq.w	8009844 <_printf_i+0x1c8>
 800969e:	2f58      	cmp	r7, #88	@ 0x58
 80096a0:	f000 80ba 	beq.w	8009818 <_printf_i+0x19c>
 80096a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096ac:	e03a      	b.n	8009724 <_printf_i+0xa8>
 80096ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096b2:	2b15      	cmp	r3, #21
 80096b4:	d8f6      	bhi.n	80096a4 <_printf_i+0x28>
 80096b6:	a101      	add	r1, pc, #4	@ (adr r1, 80096bc <_printf_i+0x40>)
 80096b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096bc:	08009715 	.word	0x08009715
 80096c0:	08009729 	.word	0x08009729
 80096c4:	080096a5 	.word	0x080096a5
 80096c8:	080096a5 	.word	0x080096a5
 80096cc:	080096a5 	.word	0x080096a5
 80096d0:	080096a5 	.word	0x080096a5
 80096d4:	08009729 	.word	0x08009729
 80096d8:	080096a5 	.word	0x080096a5
 80096dc:	080096a5 	.word	0x080096a5
 80096e0:	080096a5 	.word	0x080096a5
 80096e4:	080096a5 	.word	0x080096a5
 80096e8:	0800982b 	.word	0x0800982b
 80096ec:	08009753 	.word	0x08009753
 80096f0:	080097e5 	.word	0x080097e5
 80096f4:	080096a5 	.word	0x080096a5
 80096f8:	080096a5 	.word	0x080096a5
 80096fc:	0800984d 	.word	0x0800984d
 8009700:	080096a5 	.word	0x080096a5
 8009704:	08009753 	.word	0x08009753
 8009708:	080096a5 	.word	0x080096a5
 800970c:	080096a5 	.word	0x080096a5
 8009710:	080097ed 	.word	0x080097ed
 8009714:	6833      	ldr	r3, [r6, #0]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6032      	str	r2, [r6, #0]
 800971c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009724:	2301      	movs	r3, #1
 8009726:	e09e      	b.n	8009866 <_printf_i+0x1ea>
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	6820      	ldr	r0, [r4, #0]
 800972c:	1d19      	adds	r1, r3, #4
 800972e:	6031      	str	r1, [r6, #0]
 8009730:	0606      	lsls	r6, r0, #24
 8009732:	d501      	bpl.n	8009738 <_printf_i+0xbc>
 8009734:	681d      	ldr	r5, [r3, #0]
 8009736:	e003      	b.n	8009740 <_printf_i+0xc4>
 8009738:	0645      	lsls	r5, r0, #25
 800973a:	d5fb      	bpl.n	8009734 <_printf_i+0xb8>
 800973c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009740:	2d00      	cmp	r5, #0
 8009742:	da03      	bge.n	800974c <_printf_i+0xd0>
 8009744:	232d      	movs	r3, #45	@ 0x2d
 8009746:	426d      	negs	r5, r5
 8009748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800974c:	230a      	movs	r3, #10
 800974e:	4859      	ldr	r0, [pc, #356]	@ (80098b4 <_printf_i+0x238>)
 8009750:	e011      	b.n	8009776 <_printf_i+0xfa>
 8009752:	6821      	ldr	r1, [r4, #0]
 8009754:	6833      	ldr	r3, [r6, #0]
 8009756:	0608      	lsls	r0, r1, #24
 8009758:	f853 5b04 	ldr.w	r5, [r3], #4
 800975c:	d402      	bmi.n	8009764 <_printf_i+0xe8>
 800975e:	0649      	lsls	r1, r1, #25
 8009760:	bf48      	it	mi
 8009762:	b2ad      	uxthmi	r5, r5
 8009764:	2f6f      	cmp	r7, #111	@ 0x6f
 8009766:	6033      	str	r3, [r6, #0]
 8009768:	bf14      	ite	ne
 800976a:	230a      	movne	r3, #10
 800976c:	2308      	moveq	r3, #8
 800976e:	4851      	ldr	r0, [pc, #324]	@ (80098b4 <_printf_i+0x238>)
 8009770:	2100      	movs	r1, #0
 8009772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009776:	6866      	ldr	r6, [r4, #4]
 8009778:	2e00      	cmp	r6, #0
 800977a:	bfa8      	it	ge
 800977c:	6821      	ldrge	r1, [r4, #0]
 800977e:	60a6      	str	r6, [r4, #8]
 8009780:	bfa4      	itt	ge
 8009782:	f021 0104 	bicge.w	r1, r1, #4
 8009786:	6021      	strge	r1, [r4, #0]
 8009788:	b90d      	cbnz	r5, 800978e <_printf_i+0x112>
 800978a:	2e00      	cmp	r6, #0
 800978c:	d04b      	beq.n	8009826 <_printf_i+0x1aa>
 800978e:	4616      	mov	r6, r2
 8009790:	fbb5 f1f3 	udiv	r1, r5, r3
 8009794:	fb03 5711 	mls	r7, r3, r1, r5
 8009798:	5dc7      	ldrb	r7, [r0, r7]
 800979a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800979e:	462f      	mov	r7, r5
 80097a0:	42bb      	cmp	r3, r7
 80097a2:	460d      	mov	r5, r1
 80097a4:	d9f4      	bls.n	8009790 <_printf_i+0x114>
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	d10b      	bne.n	80097c2 <_printf_i+0x146>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	07df      	lsls	r7, r3, #31
 80097ae:	d508      	bpl.n	80097c2 <_printf_i+0x146>
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	6861      	ldr	r1, [r4, #4]
 80097b4:	4299      	cmp	r1, r3
 80097b6:	bfde      	ittt	le
 80097b8:	2330      	movle	r3, #48	@ 0x30
 80097ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097c2:	1b92      	subs	r2, r2, r6
 80097c4:	6122      	str	r2, [r4, #16]
 80097c6:	464b      	mov	r3, r9
 80097c8:	4621      	mov	r1, r4
 80097ca:	4640      	mov	r0, r8
 80097cc:	f8cd a000 	str.w	sl, [sp]
 80097d0:	aa03      	add	r2, sp, #12
 80097d2:	f7ff fee1 	bl	8009598 <_printf_common>
 80097d6:	3001      	adds	r0, #1
 80097d8:	d14a      	bne.n	8009870 <_printf_i+0x1f4>
 80097da:	f04f 30ff 	mov.w	r0, #4294967295
 80097de:	b004      	add	sp, #16
 80097e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	f043 0320 	orr.w	r3, r3, #32
 80097ea:	6023      	str	r3, [r4, #0]
 80097ec:	2778      	movs	r7, #120	@ 0x78
 80097ee:	4832      	ldr	r0, [pc, #200]	@ (80098b8 <_printf_i+0x23c>)
 80097f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	6831      	ldr	r1, [r6, #0]
 80097f8:	061f      	lsls	r7, r3, #24
 80097fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80097fe:	d402      	bmi.n	8009806 <_printf_i+0x18a>
 8009800:	065f      	lsls	r7, r3, #25
 8009802:	bf48      	it	mi
 8009804:	b2ad      	uxthmi	r5, r5
 8009806:	6031      	str	r1, [r6, #0]
 8009808:	07d9      	lsls	r1, r3, #31
 800980a:	bf44      	itt	mi
 800980c:	f043 0320 	orrmi.w	r3, r3, #32
 8009810:	6023      	strmi	r3, [r4, #0]
 8009812:	b11d      	cbz	r5, 800981c <_printf_i+0x1a0>
 8009814:	2310      	movs	r3, #16
 8009816:	e7ab      	b.n	8009770 <_printf_i+0xf4>
 8009818:	4826      	ldr	r0, [pc, #152]	@ (80098b4 <_printf_i+0x238>)
 800981a:	e7e9      	b.n	80097f0 <_printf_i+0x174>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	f023 0320 	bic.w	r3, r3, #32
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	e7f6      	b.n	8009814 <_printf_i+0x198>
 8009826:	4616      	mov	r6, r2
 8009828:	e7bd      	b.n	80097a6 <_printf_i+0x12a>
 800982a:	6833      	ldr	r3, [r6, #0]
 800982c:	6825      	ldr	r5, [r4, #0]
 800982e:	1d18      	adds	r0, r3, #4
 8009830:	6961      	ldr	r1, [r4, #20]
 8009832:	6030      	str	r0, [r6, #0]
 8009834:	062e      	lsls	r6, r5, #24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	d501      	bpl.n	800983e <_printf_i+0x1c2>
 800983a:	6019      	str	r1, [r3, #0]
 800983c:	e002      	b.n	8009844 <_printf_i+0x1c8>
 800983e:	0668      	lsls	r0, r5, #25
 8009840:	d5fb      	bpl.n	800983a <_printf_i+0x1be>
 8009842:	8019      	strh	r1, [r3, #0]
 8009844:	2300      	movs	r3, #0
 8009846:	4616      	mov	r6, r2
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	e7bc      	b.n	80097c6 <_printf_i+0x14a>
 800984c:	6833      	ldr	r3, [r6, #0]
 800984e:	2100      	movs	r1, #0
 8009850:	1d1a      	adds	r2, r3, #4
 8009852:	6032      	str	r2, [r6, #0]
 8009854:	681e      	ldr	r6, [r3, #0]
 8009856:	6862      	ldr	r2, [r4, #4]
 8009858:	4630      	mov	r0, r6
 800985a:	f000 f901 	bl	8009a60 <memchr>
 800985e:	b108      	cbz	r0, 8009864 <_printf_i+0x1e8>
 8009860:	1b80      	subs	r0, r0, r6
 8009862:	6060      	str	r0, [r4, #4]
 8009864:	6863      	ldr	r3, [r4, #4]
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	2300      	movs	r3, #0
 800986a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800986e:	e7aa      	b.n	80097c6 <_printf_i+0x14a>
 8009870:	4632      	mov	r2, r6
 8009872:	4649      	mov	r1, r9
 8009874:	4640      	mov	r0, r8
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	47d0      	blx	sl
 800987a:	3001      	adds	r0, #1
 800987c:	d0ad      	beq.n	80097da <_printf_i+0x15e>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	079b      	lsls	r3, r3, #30
 8009882:	d413      	bmi.n	80098ac <_printf_i+0x230>
 8009884:	68e0      	ldr	r0, [r4, #12]
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	4298      	cmp	r0, r3
 800988a:	bfb8      	it	lt
 800988c:	4618      	movlt	r0, r3
 800988e:	e7a6      	b.n	80097de <_printf_i+0x162>
 8009890:	2301      	movs	r3, #1
 8009892:	4632      	mov	r2, r6
 8009894:	4649      	mov	r1, r9
 8009896:	4640      	mov	r0, r8
 8009898:	47d0      	blx	sl
 800989a:	3001      	adds	r0, #1
 800989c:	d09d      	beq.n	80097da <_printf_i+0x15e>
 800989e:	3501      	adds	r5, #1
 80098a0:	68e3      	ldr	r3, [r4, #12]
 80098a2:	9903      	ldr	r1, [sp, #12]
 80098a4:	1a5b      	subs	r3, r3, r1
 80098a6:	42ab      	cmp	r3, r5
 80098a8:	dcf2      	bgt.n	8009890 <_printf_i+0x214>
 80098aa:	e7eb      	b.n	8009884 <_printf_i+0x208>
 80098ac:	2500      	movs	r5, #0
 80098ae:	f104 0619 	add.w	r6, r4, #25
 80098b2:	e7f5      	b.n	80098a0 <_printf_i+0x224>
 80098b4:	0800b6ba 	.word	0x0800b6ba
 80098b8:	0800b6cb 	.word	0x0800b6cb

080098bc <__sflush_r>:
 80098bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c2:	0716      	lsls	r6, r2, #28
 80098c4:	4605      	mov	r5, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	d454      	bmi.n	8009974 <__sflush_r+0xb8>
 80098ca:	684b      	ldr	r3, [r1, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	dc02      	bgt.n	80098d6 <__sflush_r+0x1a>
 80098d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dd48      	ble.n	8009968 <__sflush_r+0xac>
 80098d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098d8:	2e00      	cmp	r6, #0
 80098da:	d045      	beq.n	8009968 <__sflush_r+0xac>
 80098dc:	2300      	movs	r3, #0
 80098de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098e2:	682f      	ldr	r7, [r5, #0]
 80098e4:	6a21      	ldr	r1, [r4, #32]
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	d030      	beq.n	800994c <__sflush_r+0x90>
 80098ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	0759      	lsls	r1, r3, #29
 80098f0:	d505      	bpl.n	80098fe <__sflush_r+0x42>
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	1ad2      	subs	r2, r2, r3
 80098f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098f8:	b10b      	cbz	r3, 80098fe <__sflush_r+0x42>
 80098fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098fc:	1ad2      	subs	r2, r2, r3
 80098fe:	2300      	movs	r3, #0
 8009900:	4628      	mov	r0, r5
 8009902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009904:	6a21      	ldr	r1, [r4, #32]
 8009906:	47b0      	blx	r6
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	d106      	bne.n	800991c <__sflush_r+0x60>
 800990e:	6829      	ldr	r1, [r5, #0]
 8009910:	291d      	cmp	r1, #29
 8009912:	d82b      	bhi.n	800996c <__sflush_r+0xb0>
 8009914:	4a28      	ldr	r2, [pc, #160]	@ (80099b8 <__sflush_r+0xfc>)
 8009916:	410a      	asrs	r2, r1
 8009918:	07d6      	lsls	r6, r2, #31
 800991a:	d427      	bmi.n	800996c <__sflush_r+0xb0>
 800991c:	2200      	movs	r2, #0
 800991e:	6062      	str	r2, [r4, #4]
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	04d9      	lsls	r1, r3, #19
 8009924:	6022      	str	r2, [r4, #0]
 8009926:	d504      	bpl.n	8009932 <__sflush_r+0x76>
 8009928:	1c42      	adds	r2, r0, #1
 800992a:	d101      	bne.n	8009930 <__sflush_r+0x74>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b903      	cbnz	r3, 8009932 <__sflush_r+0x76>
 8009930:	6560      	str	r0, [r4, #84]	@ 0x54
 8009932:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009934:	602f      	str	r7, [r5, #0]
 8009936:	b1b9      	cbz	r1, 8009968 <__sflush_r+0xac>
 8009938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800993c:	4299      	cmp	r1, r3
 800993e:	d002      	beq.n	8009946 <__sflush_r+0x8a>
 8009940:	4628      	mov	r0, r5
 8009942:	f7fe fbdd 	bl	8008100 <_free_r>
 8009946:	2300      	movs	r3, #0
 8009948:	6363      	str	r3, [r4, #52]	@ 0x34
 800994a:	e00d      	b.n	8009968 <__sflush_r+0xac>
 800994c:	2301      	movs	r3, #1
 800994e:	4628      	mov	r0, r5
 8009950:	47b0      	blx	r6
 8009952:	4602      	mov	r2, r0
 8009954:	1c50      	adds	r0, r2, #1
 8009956:	d1c9      	bne.n	80098ec <__sflush_r+0x30>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0c6      	beq.n	80098ec <__sflush_r+0x30>
 800995e:	2b1d      	cmp	r3, #29
 8009960:	d001      	beq.n	8009966 <__sflush_r+0xaa>
 8009962:	2b16      	cmp	r3, #22
 8009964:	d11d      	bne.n	80099a2 <__sflush_r+0xe6>
 8009966:	602f      	str	r7, [r5, #0]
 8009968:	2000      	movs	r0, #0
 800996a:	e021      	b.n	80099b0 <__sflush_r+0xf4>
 800996c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009970:	b21b      	sxth	r3, r3
 8009972:	e01a      	b.n	80099aa <__sflush_r+0xee>
 8009974:	690f      	ldr	r7, [r1, #16]
 8009976:	2f00      	cmp	r7, #0
 8009978:	d0f6      	beq.n	8009968 <__sflush_r+0xac>
 800997a:	0793      	lsls	r3, r2, #30
 800997c:	bf18      	it	ne
 800997e:	2300      	movne	r3, #0
 8009980:	680e      	ldr	r6, [r1, #0]
 8009982:	bf08      	it	eq
 8009984:	694b      	ldreq	r3, [r1, #20]
 8009986:	1bf6      	subs	r6, r6, r7
 8009988:	600f      	str	r7, [r1, #0]
 800998a:	608b      	str	r3, [r1, #8]
 800998c:	2e00      	cmp	r6, #0
 800998e:	ddeb      	ble.n	8009968 <__sflush_r+0xac>
 8009990:	4633      	mov	r3, r6
 8009992:	463a      	mov	r2, r7
 8009994:	4628      	mov	r0, r5
 8009996:	6a21      	ldr	r1, [r4, #32]
 8009998:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800999c:	47e0      	blx	ip
 800999e:	2800      	cmp	r0, #0
 80099a0:	dc07      	bgt.n	80099b2 <__sflush_r+0xf6>
 80099a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099aa:	f04f 30ff 	mov.w	r0, #4294967295
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b2:	4407      	add	r7, r0
 80099b4:	1a36      	subs	r6, r6, r0
 80099b6:	e7e9      	b.n	800998c <__sflush_r+0xd0>
 80099b8:	dfbffffe 	.word	0xdfbffffe

080099bc <_fflush_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	690b      	ldr	r3, [r1, #16]
 80099c0:	4605      	mov	r5, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	b913      	cbnz	r3, 80099cc <_fflush_r+0x10>
 80099c6:	2500      	movs	r5, #0
 80099c8:	4628      	mov	r0, r5
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	b118      	cbz	r0, 80099d6 <_fflush_r+0x1a>
 80099ce:	6a03      	ldr	r3, [r0, #32]
 80099d0:	b90b      	cbnz	r3, 80099d6 <_fflush_r+0x1a>
 80099d2:	f7fe fa55 	bl	8007e80 <__sinit>
 80099d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f3      	beq.n	80099c6 <_fflush_r+0xa>
 80099de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099e0:	07d0      	lsls	r0, r2, #31
 80099e2:	d404      	bmi.n	80099ee <_fflush_r+0x32>
 80099e4:	0599      	lsls	r1, r3, #22
 80099e6:	d402      	bmi.n	80099ee <_fflush_r+0x32>
 80099e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ea:	f7fe fb6e 	bl	80080ca <__retarget_lock_acquire_recursive>
 80099ee:	4628      	mov	r0, r5
 80099f0:	4621      	mov	r1, r4
 80099f2:	f7ff ff63 	bl	80098bc <__sflush_r>
 80099f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099f8:	4605      	mov	r5, r0
 80099fa:	07da      	lsls	r2, r3, #31
 80099fc:	d4e4      	bmi.n	80099c8 <_fflush_r+0xc>
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	059b      	lsls	r3, r3, #22
 8009a02:	d4e1      	bmi.n	80099c8 <_fflush_r+0xc>
 8009a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a06:	f7fe fb61 	bl	80080cc <__retarget_lock_release_recursive>
 8009a0a:	e7dd      	b.n	80099c8 <_fflush_r+0xc>

08009a0c <memmove>:
 8009a0c:	4288      	cmp	r0, r1
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	eb01 0402 	add.w	r4, r1, r2
 8009a14:	d902      	bls.n	8009a1c <memmove+0x10>
 8009a16:	4284      	cmp	r4, r0
 8009a18:	4623      	mov	r3, r4
 8009a1a:	d807      	bhi.n	8009a2c <memmove+0x20>
 8009a1c:	1e43      	subs	r3, r0, #1
 8009a1e:	42a1      	cmp	r1, r4
 8009a20:	d008      	beq.n	8009a34 <memmove+0x28>
 8009a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a2a:	e7f8      	b.n	8009a1e <memmove+0x12>
 8009a2c:	4601      	mov	r1, r0
 8009a2e:	4402      	add	r2, r0
 8009a30:	428a      	cmp	r2, r1
 8009a32:	d100      	bne.n	8009a36 <memmove+0x2a>
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a3e:	e7f7      	b.n	8009a30 <memmove+0x24>

08009a40 <_sbrk_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	2300      	movs	r3, #0
 8009a44:	4d05      	ldr	r5, [pc, #20]	@ (8009a5c <_sbrk_r+0x1c>)
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f8 ff38 	bl	80028c0 <_sbrk>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_sbrk_r+0x1a>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_sbrk_r+0x1a>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20000548 	.word	0x20000548

08009a60 <memchr>:
 8009a60:	4603      	mov	r3, r0
 8009a62:	b510      	push	{r4, lr}
 8009a64:	b2c9      	uxtb	r1, r1
 8009a66:	4402      	add	r2, r0
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	d101      	bne.n	8009a72 <memchr+0x12>
 8009a6e:	2000      	movs	r0, #0
 8009a70:	e003      	b.n	8009a7a <memchr+0x1a>
 8009a72:	7804      	ldrb	r4, [r0, #0]
 8009a74:	3301      	adds	r3, #1
 8009a76:	428c      	cmp	r4, r1
 8009a78:	d1f6      	bne.n	8009a68 <memchr+0x8>
 8009a7a:	bd10      	pop	{r4, pc}

08009a7c <__assert_func>:
 8009a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a7e:	4614      	mov	r4, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4b09      	ldr	r3, [pc, #36]	@ (8009aa8 <__assert_func+0x2c>)
 8009a84:	4605      	mov	r5, r0
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68d8      	ldr	r0, [r3, #12]
 8009a8a:	b954      	cbnz	r4, 8009aa2 <__assert_func+0x26>
 8009a8c:	4b07      	ldr	r3, [pc, #28]	@ (8009aac <__assert_func+0x30>)
 8009a8e:	461c      	mov	r4, r3
 8009a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a94:	9100      	str	r1, [sp, #0]
 8009a96:	462b      	mov	r3, r5
 8009a98:	4905      	ldr	r1, [pc, #20]	@ (8009ab0 <__assert_func+0x34>)
 8009a9a:	f000 f857 	bl	8009b4c <fiprintf>
 8009a9e:	f000 f867 	bl	8009b70 <abort>
 8009aa2:	4b04      	ldr	r3, [pc, #16]	@ (8009ab4 <__assert_func+0x38>)
 8009aa4:	e7f4      	b.n	8009a90 <__assert_func+0x14>
 8009aa6:	bf00      	nop
 8009aa8:	200001f8 	.word	0x200001f8
 8009aac:	0800b717 	.word	0x0800b717
 8009ab0:	0800b6e9 	.word	0x0800b6e9
 8009ab4:	0800b6dc 	.word	0x0800b6dc

08009ab8 <_calloc_r>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	fba1 5402 	umull	r5, r4, r1, r2
 8009abe:	b93c      	cbnz	r4, 8009ad0 <_calloc_r+0x18>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7fe fec1 	bl	8008848 <_malloc_r>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <_calloc_r+0x1e>
 8009aca:	2600      	movs	r6, #0
 8009acc:	4630      	mov	r0, r6
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	220c      	movs	r2, #12
 8009ad2:	6002      	str	r2, [r0, #0]
 8009ad4:	e7f9      	b.n	8009aca <_calloc_r+0x12>
 8009ad6:	462a      	mov	r2, r5
 8009ad8:	4621      	mov	r1, r4
 8009ada:	f7fe fa6a 	bl	8007fb2 <memset>
 8009ade:	e7f5      	b.n	8009acc <_calloc_r+0x14>

08009ae0 <malloc>:
 8009ae0:	4b02      	ldr	r3, [pc, #8]	@ (8009aec <malloc+0xc>)
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	f7fe beaf 	b.w	8008848 <_malloc_r>
 8009aea:	bf00      	nop
 8009aec:	200001f8 	.word	0x200001f8

08009af0 <_realloc_r>:
 8009af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af4:	4680      	mov	r8, r0
 8009af6:	4615      	mov	r5, r2
 8009af8:	460c      	mov	r4, r1
 8009afa:	b921      	cbnz	r1, 8009b06 <_realloc_r+0x16>
 8009afc:	4611      	mov	r1, r2
 8009afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b02:	f7fe bea1 	b.w	8008848 <_malloc_r>
 8009b06:	b92a      	cbnz	r2, 8009b14 <_realloc_r+0x24>
 8009b08:	f7fe fafa 	bl	8008100 <_free_r>
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	4620      	mov	r0, r4
 8009b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b14:	f000 f833 	bl	8009b7e <_malloc_usable_size_r>
 8009b18:	4285      	cmp	r5, r0
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	d802      	bhi.n	8009b24 <_realloc_r+0x34>
 8009b1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b22:	d8f4      	bhi.n	8009b0e <_realloc_r+0x1e>
 8009b24:	4629      	mov	r1, r5
 8009b26:	4640      	mov	r0, r8
 8009b28:	f7fe fe8e 	bl	8008848 <_malloc_r>
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d0ec      	beq.n	8009b0c <_realloc_r+0x1c>
 8009b32:	42b5      	cmp	r5, r6
 8009b34:	462a      	mov	r2, r5
 8009b36:	4621      	mov	r1, r4
 8009b38:	bf28      	it	cs
 8009b3a:	4632      	movcs	r2, r6
 8009b3c:	f7fe fac7 	bl	80080ce <memcpy>
 8009b40:	4621      	mov	r1, r4
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7fe fadc 	bl	8008100 <_free_r>
 8009b48:	463c      	mov	r4, r7
 8009b4a:	e7e0      	b.n	8009b0e <_realloc_r+0x1e>

08009b4c <fiprintf>:
 8009b4c:	b40e      	push	{r1, r2, r3}
 8009b4e:	b503      	push	{r0, r1, lr}
 8009b50:	4601      	mov	r1, r0
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	4805      	ldr	r0, [pc, #20]	@ (8009b6c <fiprintf+0x20>)
 8009b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5a:	6800      	ldr	r0, [r0, #0]
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	f000 f83d 	bl	8009bdc <_vfiprintf_r>
 8009b62:	b002      	add	sp, #8
 8009b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b68:	b003      	add	sp, #12
 8009b6a:	4770      	bx	lr
 8009b6c:	200001f8 	.word	0x200001f8

08009b70 <abort>:
 8009b70:	2006      	movs	r0, #6
 8009b72:	b508      	push	{r3, lr}
 8009b74:	f000 fa06 	bl	8009f84 <raise>
 8009b78:	2001      	movs	r0, #1
 8009b7a:	f7f8 fe2c 	bl	80027d6 <_exit>

08009b7e <_malloc_usable_size_r>:
 8009b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b82:	1f18      	subs	r0, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bfbc      	itt	lt
 8009b88:	580b      	ldrlt	r3, [r1, r0]
 8009b8a:	18c0      	addlt	r0, r0, r3
 8009b8c:	4770      	bx	lr

08009b8e <__sfputc_r>:
 8009b8e:	6893      	ldr	r3, [r2, #8]
 8009b90:	b410      	push	{r4}
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	6093      	str	r3, [r2, #8]
 8009b98:	da07      	bge.n	8009baa <__sfputc_r+0x1c>
 8009b9a:	6994      	ldr	r4, [r2, #24]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	db01      	blt.n	8009ba4 <__sfputc_r+0x16>
 8009ba0:	290a      	cmp	r1, #10
 8009ba2:	d102      	bne.n	8009baa <__sfputc_r+0x1c>
 8009ba4:	bc10      	pop	{r4}
 8009ba6:	f000 b931 	b.w	8009e0c <__swbuf_r>
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	1c58      	adds	r0, r3, #1
 8009bae:	6010      	str	r0, [r2, #0]
 8009bb0:	7019      	strb	r1, [r3, #0]
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	bc10      	pop	{r4}
 8009bb6:	4770      	bx	lr

08009bb8 <__sfputs_r>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	4614      	mov	r4, r2
 8009bc0:	18d5      	adds	r5, r2, r3
 8009bc2:	42ac      	cmp	r4, r5
 8009bc4:	d101      	bne.n	8009bca <__sfputs_r+0x12>
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e007      	b.n	8009bda <__sfputs_r+0x22>
 8009bca:	463a      	mov	r2, r7
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd2:	f7ff ffdc 	bl	8009b8e <__sfputc_r>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d1f3      	bne.n	8009bc2 <__sfputs_r+0xa>
 8009bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bdc <_vfiprintf_r>:
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	460d      	mov	r5, r1
 8009be2:	4614      	mov	r4, r2
 8009be4:	4698      	mov	r8, r3
 8009be6:	4606      	mov	r6, r0
 8009be8:	b09d      	sub	sp, #116	@ 0x74
 8009bea:	b118      	cbz	r0, 8009bf4 <_vfiprintf_r+0x18>
 8009bec:	6a03      	ldr	r3, [r0, #32]
 8009bee:	b90b      	cbnz	r3, 8009bf4 <_vfiprintf_r+0x18>
 8009bf0:	f7fe f946 	bl	8007e80 <__sinit>
 8009bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bf6:	07d9      	lsls	r1, r3, #31
 8009bf8:	d405      	bmi.n	8009c06 <_vfiprintf_r+0x2a>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	059a      	lsls	r2, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_vfiprintf_r+0x2a>
 8009c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c02:	f7fe fa62 	bl	80080ca <__retarget_lock_acquire_recursive>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	071b      	lsls	r3, r3, #28
 8009c0a:	d501      	bpl.n	8009c10 <_vfiprintf_r+0x34>
 8009c0c:	692b      	ldr	r3, [r5, #16]
 8009c0e:	b99b      	cbnz	r3, 8009c38 <_vfiprintf_r+0x5c>
 8009c10:	4629      	mov	r1, r5
 8009c12:	4630      	mov	r0, r6
 8009c14:	f000 f938 	bl	8009e88 <__swsetup_r>
 8009c18:	b170      	cbz	r0, 8009c38 <_vfiprintf_r+0x5c>
 8009c1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c1c:	07dc      	lsls	r4, r3, #31
 8009c1e:	d504      	bpl.n	8009c2a <_vfiprintf_r+0x4e>
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	b01d      	add	sp, #116	@ 0x74
 8009c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	0598      	lsls	r0, r3, #22
 8009c2e:	d4f7      	bmi.n	8009c20 <_vfiprintf_r+0x44>
 8009c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c32:	f7fe fa4b 	bl	80080cc <__retarget_lock_release_recursive>
 8009c36:	e7f3      	b.n	8009c20 <_vfiprintf_r+0x44>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3c:	2320      	movs	r3, #32
 8009c3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c42:	2330      	movs	r3, #48	@ 0x30
 8009c44:	f04f 0901 	mov.w	r9, #1
 8009c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009df8 <_vfiprintf_r+0x21c>
 8009c50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c54:	4623      	mov	r3, r4
 8009c56:	469a      	mov	sl, r3
 8009c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c5c:	b10a      	cbz	r2, 8009c62 <_vfiprintf_r+0x86>
 8009c5e:	2a25      	cmp	r2, #37	@ 0x25
 8009c60:	d1f9      	bne.n	8009c56 <_vfiprintf_r+0x7a>
 8009c62:	ebba 0b04 	subs.w	fp, sl, r4
 8009c66:	d00b      	beq.n	8009c80 <_vfiprintf_r+0xa4>
 8009c68:	465b      	mov	r3, fp
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f7ff ffa2 	bl	8009bb8 <__sfputs_r>
 8009c74:	3001      	adds	r0, #1
 8009c76:	f000 80a7 	beq.w	8009dc8 <_vfiprintf_r+0x1ec>
 8009c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c7c:	445a      	add	r2, fp
 8009c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c80:	f89a 3000 	ldrb.w	r3, [sl]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 809f 	beq.w	8009dc8 <_vfiprintf_r+0x1ec>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c94:	f10a 0a01 	add.w	sl, sl, #1
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	9307      	str	r3, [sp, #28]
 8009c9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ca0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ca2:	4654      	mov	r4, sl
 8009ca4:	2205      	movs	r2, #5
 8009ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009caa:	4853      	ldr	r0, [pc, #332]	@ (8009df8 <_vfiprintf_r+0x21c>)
 8009cac:	f7ff fed8 	bl	8009a60 <memchr>
 8009cb0:	9a04      	ldr	r2, [sp, #16]
 8009cb2:	b9d8      	cbnz	r0, 8009cec <_vfiprintf_r+0x110>
 8009cb4:	06d1      	lsls	r1, r2, #27
 8009cb6:	bf44      	itt	mi
 8009cb8:	2320      	movmi	r3, #32
 8009cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cbe:	0713      	lsls	r3, r2, #28
 8009cc0:	bf44      	itt	mi
 8009cc2:	232b      	movmi	r3, #43	@ 0x2b
 8009cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cce:	d015      	beq.n	8009cfc <_vfiprintf_r+0x120>
 8009cd0:	4654      	mov	r4, sl
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f04f 0c0a 	mov.w	ip, #10
 8009cd8:	9a07      	ldr	r2, [sp, #28]
 8009cda:	4621      	mov	r1, r4
 8009cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ce0:	3b30      	subs	r3, #48	@ 0x30
 8009ce2:	2b09      	cmp	r3, #9
 8009ce4:	d94b      	bls.n	8009d7e <_vfiprintf_r+0x1a2>
 8009ce6:	b1b0      	cbz	r0, 8009d16 <_vfiprintf_r+0x13a>
 8009ce8:	9207      	str	r2, [sp, #28]
 8009cea:	e014      	b.n	8009d16 <_vfiprintf_r+0x13a>
 8009cec:	eba0 0308 	sub.w	r3, r0, r8
 8009cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	46a2      	mov	sl, r4
 8009cf8:	9304      	str	r3, [sp, #16]
 8009cfa:	e7d2      	b.n	8009ca2 <_vfiprintf_r+0xc6>
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	1d19      	adds	r1, r3, #4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	9103      	str	r1, [sp, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	bfbb      	ittet	lt
 8009d08:	425b      	neglt	r3, r3
 8009d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d0e:	9307      	strge	r3, [sp, #28]
 8009d10:	9307      	strlt	r3, [sp, #28]
 8009d12:	bfb8      	it	lt
 8009d14:	9204      	strlt	r2, [sp, #16]
 8009d16:	7823      	ldrb	r3, [r4, #0]
 8009d18:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d1a:	d10a      	bne.n	8009d32 <_vfiprintf_r+0x156>
 8009d1c:	7863      	ldrb	r3, [r4, #1]
 8009d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d20:	d132      	bne.n	8009d88 <_vfiprintf_r+0x1ac>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	3402      	adds	r4, #2
 8009d26:	1d1a      	adds	r2, r3, #4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	9203      	str	r2, [sp, #12]
 8009d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009dfc <_vfiprintf_r+0x220>
 8009d36:	2203      	movs	r2, #3
 8009d38:	4650      	mov	r0, sl
 8009d3a:	7821      	ldrb	r1, [r4, #0]
 8009d3c:	f7ff fe90 	bl	8009a60 <memchr>
 8009d40:	b138      	cbz	r0, 8009d52 <_vfiprintf_r+0x176>
 8009d42:	2240      	movs	r2, #64	@ 0x40
 8009d44:	9b04      	ldr	r3, [sp, #16]
 8009d46:	eba0 000a 	sub.w	r0, r0, sl
 8009d4a:	4082      	lsls	r2, r0
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	3401      	adds	r4, #1
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d56:	2206      	movs	r2, #6
 8009d58:	4829      	ldr	r0, [pc, #164]	@ (8009e00 <_vfiprintf_r+0x224>)
 8009d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d5e:	f7ff fe7f 	bl	8009a60 <memchr>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d03f      	beq.n	8009de6 <_vfiprintf_r+0x20a>
 8009d66:	4b27      	ldr	r3, [pc, #156]	@ (8009e04 <_vfiprintf_r+0x228>)
 8009d68:	bb1b      	cbnz	r3, 8009db2 <_vfiprintf_r+0x1d6>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	3307      	adds	r3, #7
 8009d6e:	f023 0307 	bic.w	r3, r3, #7
 8009d72:	3308      	adds	r3, #8
 8009d74:	9303      	str	r3, [sp, #12]
 8009d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d78:	443b      	add	r3, r7
 8009d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7c:	e76a      	b.n	8009c54 <_vfiprintf_r+0x78>
 8009d7e:	460c      	mov	r4, r1
 8009d80:	2001      	movs	r0, #1
 8009d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d86:	e7a8      	b.n	8009cda <_vfiprintf_r+0xfe>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f04f 0c0a 	mov.w	ip, #10
 8009d8e:	4619      	mov	r1, r3
 8009d90:	3401      	adds	r4, #1
 8009d92:	9305      	str	r3, [sp, #20]
 8009d94:	4620      	mov	r0, r4
 8009d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d9a:	3a30      	subs	r2, #48	@ 0x30
 8009d9c:	2a09      	cmp	r2, #9
 8009d9e:	d903      	bls.n	8009da8 <_vfiprintf_r+0x1cc>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d0c6      	beq.n	8009d32 <_vfiprintf_r+0x156>
 8009da4:	9105      	str	r1, [sp, #20]
 8009da6:	e7c4      	b.n	8009d32 <_vfiprintf_r+0x156>
 8009da8:	4604      	mov	r4, r0
 8009daa:	2301      	movs	r3, #1
 8009dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8009db0:	e7f0      	b.n	8009d94 <_vfiprintf_r+0x1b8>
 8009db2:	ab03      	add	r3, sp, #12
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	462a      	mov	r2, r5
 8009db8:	4630      	mov	r0, r6
 8009dba:	4b13      	ldr	r3, [pc, #76]	@ (8009e08 <_vfiprintf_r+0x22c>)
 8009dbc:	a904      	add	r1, sp, #16
 8009dbe:	f3af 8000 	nop.w
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	1c78      	adds	r0, r7, #1
 8009dc6:	d1d6      	bne.n	8009d76 <_vfiprintf_r+0x19a>
 8009dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	d405      	bmi.n	8009dda <_vfiprintf_r+0x1fe>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d402      	bmi.n	8009dda <_vfiprintf_r+0x1fe>
 8009dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dd6:	f7fe f979 	bl	80080cc <__retarget_lock_release_recursive>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	065b      	lsls	r3, r3, #25
 8009dde:	f53f af1f 	bmi.w	8009c20 <_vfiprintf_r+0x44>
 8009de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009de4:	e71e      	b.n	8009c24 <_vfiprintf_r+0x48>
 8009de6:	ab03      	add	r3, sp, #12
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	462a      	mov	r2, r5
 8009dec:	4630      	mov	r0, r6
 8009dee:	4b06      	ldr	r3, [pc, #24]	@ (8009e08 <_vfiprintf_r+0x22c>)
 8009df0:	a904      	add	r1, sp, #16
 8009df2:	f7ff fc43 	bl	800967c <_printf_i>
 8009df6:	e7e4      	b.n	8009dc2 <_vfiprintf_r+0x1e6>
 8009df8:	0800b6a9 	.word	0x0800b6a9
 8009dfc:	0800b6af 	.word	0x0800b6af
 8009e00:	0800b6b3 	.word	0x0800b6b3
 8009e04:	00000000 	.word	0x00000000
 8009e08:	08009bb9 	.word	0x08009bb9

08009e0c <__swbuf_r>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	4605      	mov	r5, r0
 8009e14:	b118      	cbz	r0, 8009e1e <__swbuf_r+0x12>
 8009e16:	6a03      	ldr	r3, [r0, #32]
 8009e18:	b90b      	cbnz	r3, 8009e1e <__swbuf_r+0x12>
 8009e1a:	f7fe f831 	bl	8007e80 <__sinit>
 8009e1e:	69a3      	ldr	r3, [r4, #24]
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	89a3      	ldrh	r3, [r4, #12]
 8009e24:	071a      	lsls	r2, r3, #28
 8009e26:	d501      	bpl.n	8009e2c <__swbuf_r+0x20>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b943      	cbnz	r3, 8009e3e <__swbuf_r+0x32>
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f000 f82a 	bl	8009e88 <__swsetup_r>
 8009e34:	b118      	cbz	r0, 8009e3e <__swbuf_r+0x32>
 8009e36:	f04f 37ff 	mov.w	r7, #4294967295
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	b2f6      	uxtb	r6, r6
 8009e44:	1a98      	subs	r0, r3, r2
 8009e46:	6963      	ldr	r3, [r4, #20]
 8009e48:	4637      	mov	r7, r6
 8009e4a:	4283      	cmp	r3, r0
 8009e4c:	dc05      	bgt.n	8009e5a <__swbuf_r+0x4e>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4628      	mov	r0, r5
 8009e52:	f7ff fdb3 	bl	80099bc <_fflush_r>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d1ed      	bne.n	8009e36 <__swbuf_r+0x2a>
 8009e5a:	68a3      	ldr	r3, [r4, #8]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	60a3      	str	r3, [r4, #8]
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	6022      	str	r2, [r4, #0]
 8009e66:	701e      	strb	r6, [r3, #0]
 8009e68:	6962      	ldr	r2, [r4, #20]
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d004      	beq.n	8009e7a <__swbuf_r+0x6e>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	07db      	lsls	r3, r3, #31
 8009e74:	d5e1      	bpl.n	8009e3a <__swbuf_r+0x2e>
 8009e76:	2e0a      	cmp	r6, #10
 8009e78:	d1df      	bne.n	8009e3a <__swbuf_r+0x2e>
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f7ff fd9d 	bl	80099bc <_fflush_r>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d0d9      	beq.n	8009e3a <__swbuf_r+0x2e>
 8009e86:	e7d6      	b.n	8009e36 <__swbuf_r+0x2a>

08009e88 <__swsetup_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4b29      	ldr	r3, [pc, #164]	@ (8009f30 <__swsetup_r+0xa8>)
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	460c      	mov	r4, r1
 8009e92:	b118      	cbz	r0, 8009e9c <__swsetup_r+0x14>
 8009e94:	6a03      	ldr	r3, [r0, #32]
 8009e96:	b90b      	cbnz	r3, 8009e9c <__swsetup_r+0x14>
 8009e98:	f7fd fff2 	bl	8007e80 <__sinit>
 8009e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea0:	0719      	lsls	r1, r3, #28
 8009ea2:	d422      	bmi.n	8009eea <__swsetup_r+0x62>
 8009ea4:	06da      	lsls	r2, r3, #27
 8009ea6:	d407      	bmi.n	8009eb8 <__swsetup_r+0x30>
 8009ea8:	2209      	movs	r2, #9
 8009eaa:	602a      	str	r2, [r5, #0]
 8009eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	e033      	b.n	8009f20 <__swsetup_r+0x98>
 8009eb8:	0758      	lsls	r0, r3, #29
 8009eba:	d512      	bpl.n	8009ee2 <__swsetup_r+0x5a>
 8009ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ebe:	b141      	cbz	r1, 8009ed2 <__swsetup_r+0x4a>
 8009ec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ec4:	4299      	cmp	r1, r3
 8009ec6:	d002      	beq.n	8009ece <__swsetup_r+0x46>
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f7fe f919 	bl	8008100 <_free_r>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	2300      	movs	r3, #0
 8009edc:	6063      	str	r3, [r4, #4]
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f043 0308 	orr.w	r3, r3, #8
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	6923      	ldr	r3, [r4, #16]
 8009eec:	b94b      	cbnz	r3, 8009f02 <__swsetup_r+0x7a>
 8009eee:	89a3      	ldrh	r3, [r4, #12]
 8009ef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef8:	d003      	beq.n	8009f02 <__swsetup_r+0x7a>
 8009efa:	4621      	mov	r1, r4
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 f882 	bl	800a006 <__smakebuf_r>
 8009f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f06:	f013 0201 	ands.w	r2, r3, #1
 8009f0a:	d00a      	beq.n	8009f22 <__swsetup_r+0x9a>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	60a2      	str	r2, [r4, #8]
 8009f10:	6962      	ldr	r2, [r4, #20]
 8009f12:	4252      	negs	r2, r2
 8009f14:	61a2      	str	r2, [r4, #24]
 8009f16:	6922      	ldr	r2, [r4, #16]
 8009f18:	b942      	cbnz	r2, 8009f2c <__swsetup_r+0xa4>
 8009f1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f1e:	d1c5      	bne.n	8009eac <__swsetup_r+0x24>
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	0799      	lsls	r1, r3, #30
 8009f24:	bf58      	it	pl
 8009f26:	6962      	ldrpl	r2, [r4, #20]
 8009f28:	60a2      	str	r2, [r4, #8]
 8009f2a:	e7f4      	b.n	8009f16 <__swsetup_r+0x8e>
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e7f7      	b.n	8009f20 <__swsetup_r+0x98>
 8009f30:	200001f8 	.word	0x200001f8

08009f34 <_raise_r>:
 8009f34:	291f      	cmp	r1, #31
 8009f36:	b538      	push	{r3, r4, r5, lr}
 8009f38:	4605      	mov	r5, r0
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	d904      	bls.n	8009f48 <_raise_r+0x14>
 8009f3e:	2316      	movs	r3, #22
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f4a:	b112      	cbz	r2, 8009f52 <_raise_r+0x1e>
 8009f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f50:	b94b      	cbnz	r3, 8009f66 <_raise_r+0x32>
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 f830 	bl	8009fb8 <_getpid_r>
 8009f58:	4622      	mov	r2, r4
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f62:	f000 b817 	b.w	8009f94 <_kill_r>
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d00a      	beq.n	8009f80 <_raise_r+0x4c>
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	d103      	bne.n	8009f76 <_raise_r+0x42>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	2001      	movs	r0, #1
 8009f74:	e7e7      	b.n	8009f46 <_raise_r+0x12>
 8009f76:	2100      	movs	r1, #0
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f7e:	4798      	blx	r3
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7e0      	b.n	8009f46 <_raise_r+0x12>

08009f84 <raise>:
 8009f84:	4b02      	ldr	r3, [pc, #8]	@ (8009f90 <raise+0xc>)
 8009f86:	4601      	mov	r1, r0
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f7ff bfd3 	b.w	8009f34 <_raise_r>
 8009f8e:	bf00      	nop
 8009f90:	200001f8 	.word	0x200001f8

08009f94 <_kill_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	2300      	movs	r3, #0
 8009f98:	4d06      	ldr	r5, [pc, #24]	@ (8009fb4 <_kill_r+0x20>)
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f7f8 fc08 	bl	80027b6 <_kill>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_kill_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_kill_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000548 	.word	0x20000548

08009fb8 <_getpid_r>:
 8009fb8:	f7f8 bbf6 	b.w	80027a8 <_getpid>

08009fbc <__swhatbuf_r>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc4:	4615      	mov	r5, r2
 8009fc6:	2900      	cmp	r1, #0
 8009fc8:	461e      	mov	r6, r3
 8009fca:	b096      	sub	sp, #88	@ 0x58
 8009fcc:	da0c      	bge.n	8009fe8 <__swhatbuf_r+0x2c>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fd6:	bf14      	ite	ne
 8009fd8:	2340      	movne	r3, #64	@ 0x40
 8009fda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fde:	2000      	movs	r0, #0
 8009fe0:	6031      	str	r1, [r6, #0]
 8009fe2:	602b      	str	r3, [r5, #0]
 8009fe4:	b016      	add	sp, #88	@ 0x58
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	466a      	mov	r2, sp
 8009fea:	f000 f849 	bl	800a080 <_fstat_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	dbed      	blt.n	8009fce <__swhatbuf_r+0x12>
 8009ff2:	9901      	ldr	r1, [sp, #4]
 8009ff4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ff8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ffc:	4259      	negs	r1, r3
 8009ffe:	4159      	adcs	r1, r3
 800a000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a004:	e7eb      	b.n	8009fde <__swhatbuf_r+0x22>

0800a006 <__smakebuf_r>:
 800a006:	898b      	ldrh	r3, [r1, #12]
 800a008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a00a:	079d      	lsls	r5, r3, #30
 800a00c:	4606      	mov	r6, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	d507      	bpl.n	800a022 <__smakebuf_r+0x1c>
 800a012:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a016:	6023      	str	r3, [r4, #0]
 800a018:	6123      	str	r3, [r4, #16]
 800a01a:	2301      	movs	r3, #1
 800a01c:	6163      	str	r3, [r4, #20]
 800a01e:	b003      	add	sp, #12
 800a020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a022:	466a      	mov	r2, sp
 800a024:	ab01      	add	r3, sp, #4
 800a026:	f7ff ffc9 	bl	8009fbc <__swhatbuf_r>
 800a02a:	9f00      	ldr	r7, [sp, #0]
 800a02c:	4605      	mov	r5, r0
 800a02e:	4639      	mov	r1, r7
 800a030:	4630      	mov	r0, r6
 800a032:	f7fe fc09 	bl	8008848 <_malloc_r>
 800a036:	b948      	cbnz	r0, 800a04c <__smakebuf_r+0x46>
 800a038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a03c:	059a      	lsls	r2, r3, #22
 800a03e:	d4ee      	bmi.n	800a01e <__smakebuf_r+0x18>
 800a040:	f023 0303 	bic.w	r3, r3, #3
 800a044:	f043 0302 	orr.w	r3, r3, #2
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	e7e2      	b.n	800a012 <__smakebuf_r+0xc>
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a056:	81a3      	strh	r3, [r4, #12]
 800a058:	9b01      	ldr	r3, [sp, #4]
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	b15b      	cbz	r3, 800a076 <__smakebuf_r+0x70>
 800a05e:	4630      	mov	r0, r6
 800a060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a064:	f000 f81e 	bl	800a0a4 <_isatty_r>
 800a068:	b128      	cbz	r0, 800a076 <__smakebuf_r+0x70>
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	f043 0301 	orr.w	r3, r3, #1
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	431d      	orrs	r5, r3
 800a07a:	81a5      	strh	r5, [r4, #12]
 800a07c:	e7cf      	b.n	800a01e <__smakebuf_r+0x18>
	...

0800a080 <_fstat_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	2300      	movs	r3, #0
 800a084:	4d06      	ldr	r5, [pc, #24]	@ (800a0a0 <_fstat_r+0x20>)
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	f7f8 fbf1 	bl	8002874 <_fstat>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d102      	bne.n	800a09c <_fstat_r+0x1c>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	b103      	cbz	r3, 800a09c <_fstat_r+0x1c>
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000548 	.word	0x20000548

0800a0a4 <_isatty_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4d05      	ldr	r5, [pc, #20]	@ (800a0c0 <_isatty_r+0x1c>)
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	f7f8 fbef 	bl	8002892 <_isatty>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_isatty_r+0x1a>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_isatty_r+0x1a>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20000548 	.word	0x20000548

0800a0c4 <pow>:
 800a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	461d      	mov	r5, r3
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	4689      	mov	r9, r1
 800a0d0:	f000 faf6 	bl	800a6c0 <__ieee754_pow>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	462b      	mov	r3, r5
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f7f6 fc94 	bl	8000a0c <__aeabi_dcmpun>
 800a0e4:	bbc8      	cbnz	r0, 800a15a <pow+0x96>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	f7f6 fc5b 	bl	80009a8 <__aeabi_dcmpeq>
 800a0f2:	b1b8      	cbz	r0, 800a124 <pow+0x60>
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7f6 fc54 	bl	80009a8 <__aeabi_dcmpeq>
 800a100:	2800      	cmp	r0, #0
 800a102:	d141      	bne.n	800a188 <pow+0xc4>
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f000 f9fe 	bl	800a508 <finite>
 800a10c:	b328      	cbz	r0, 800a15a <pow+0x96>
 800a10e:	2200      	movs	r2, #0
 800a110:	2300      	movs	r3, #0
 800a112:	4620      	mov	r0, r4
 800a114:	4629      	mov	r1, r5
 800a116:	f7f6 fc51 	bl	80009bc <__aeabi_dcmplt>
 800a11a:	b1f0      	cbz	r0, 800a15a <pow+0x96>
 800a11c:	f7fd ffaa 	bl	8008074 <__errno>
 800a120:	2322      	movs	r3, #34	@ 0x22
 800a122:	e019      	b.n	800a158 <pow+0x94>
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f000 f9ee 	bl	800a508 <finite>
 800a12c:	b9c8      	cbnz	r0, 800a162 <pow+0x9e>
 800a12e:	4640      	mov	r0, r8
 800a130:	4649      	mov	r1, r9
 800a132:	f000 f9e9 	bl	800a508 <finite>
 800a136:	b1a0      	cbz	r0, 800a162 <pow+0x9e>
 800a138:	4620      	mov	r0, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	f000 f9e4 	bl	800a508 <finite>
 800a140:	b178      	cbz	r0, 800a162 <pow+0x9e>
 800a142:	4632      	mov	r2, r6
 800a144:	463b      	mov	r3, r7
 800a146:	4630      	mov	r0, r6
 800a148:	4639      	mov	r1, r7
 800a14a:	f7f6 fc5f 	bl	8000a0c <__aeabi_dcmpun>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d0e4      	beq.n	800a11c <pow+0x58>
 800a152:	f7fd ff8f 	bl	8008074 <__errno>
 800a156:	2321      	movs	r3, #33	@ 0x21
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	4630      	mov	r0, r6
 800a15c:	4639      	mov	r1, r7
 800a15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a162:	2200      	movs	r2, #0
 800a164:	2300      	movs	r3, #0
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	f7f6 fc1d 	bl	80009a8 <__aeabi_dcmpeq>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d0f3      	beq.n	800a15a <pow+0x96>
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	f000 f9c7 	bl	800a508 <finite>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d0ed      	beq.n	800a15a <pow+0x96>
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f000 f9c1 	bl	800a508 <finite>
 800a186:	e7c8      	b.n	800a11a <pow+0x56>
 800a188:	2600      	movs	r6, #0
 800a18a:	4f01      	ldr	r7, [pc, #4]	@ (800a190 <pow+0xcc>)
 800a18c:	e7e5      	b.n	800a15a <pow+0x96>
 800a18e:	bf00      	nop
 800a190:	3ff00000 	.word	0x3ff00000

0800a194 <sqrt>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	4606      	mov	r6, r0
 800a198:	460f      	mov	r7, r1
 800a19a:	f000 f9bb 	bl	800a514 <__ieee754_sqrt>
 800a19e:	4632      	mov	r2, r6
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	f7f6 fc2f 	bl	8000a0c <__aeabi_dcmpun>
 800a1ae:	b990      	cbnz	r0, 800a1d6 <sqrt+0x42>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fc00 	bl	80009bc <__aeabi_dcmplt>
 800a1bc:	b158      	cbz	r0, 800a1d6 <sqrt+0x42>
 800a1be:	f7fd ff59 	bl	8008074 <__errno>
 800a1c2:	2321      	movs	r3, #33	@ 0x21
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	6003      	str	r3, [r0, #0]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f7f6 faad 	bl	800072c <__aeabi_ddiv>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	460d      	mov	r5, r1
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	4629      	mov	r1, r5
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1dc:	0000      	movs	r0, r0
	...

0800a1e0 <atan>:
 800a1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e4:	4bbc      	ldr	r3, [pc, #752]	@ (800a4d8 <atan+0x2f8>)
 800a1e6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a1ea:	429e      	cmp	r6, r3
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	468b      	mov	fp, r1
 800a1f2:	d918      	bls.n	800a226 <atan+0x46>
 800a1f4:	4bb9      	ldr	r3, [pc, #740]	@ (800a4dc <atan+0x2fc>)
 800a1f6:	429e      	cmp	r6, r3
 800a1f8:	d801      	bhi.n	800a1fe <atan+0x1e>
 800a1fa:	d109      	bne.n	800a210 <atan+0x30>
 800a1fc:	b140      	cbz	r0, 800a210 <atan+0x30>
 800a1fe:	4622      	mov	r2, r4
 800a200:	462b      	mov	r3, r5
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	f7f5 ffb1 	bl	800016c <__adddf3>
 800a20a:	4604      	mov	r4, r0
 800a20c:	460d      	mov	r5, r1
 800a20e:	e006      	b.n	800a21e <atan+0x3e>
 800a210:	f1bb 0f00 	cmp.w	fp, #0
 800a214:	f340 8123 	ble.w	800a45e <atan+0x27e>
 800a218:	a593      	add	r5, pc, #588	@ (adr r5, 800a468 <atan+0x288>)
 800a21a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a226:	4bae      	ldr	r3, [pc, #696]	@ (800a4e0 <atan+0x300>)
 800a228:	429e      	cmp	r6, r3
 800a22a:	d811      	bhi.n	800a250 <atan+0x70>
 800a22c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a230:	429e      	cmp	r6, r3
 800a232:	d80a      	bhi.n	800a24a <atan+0x6a>
 800a234:	a38e      	add	r3, pc, #568	@ (adr r3, 800a470 <atan+0x290>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f5 ff97 	bl	800016c <__adddf3>
 800a23e:	2200      	movs	r2, #0
 800a240:	4ba8      	ldr	r3, [pc, #672]	@ (800a4e4 <atan+0x304>)
 800a242:	f7f6 fbd9 	bl	80009f8 <__aeabi_dcmpgt>
 800a246:	2800      	cmp	r0, #0
 800a248:	d1e9      	bne.n	800a21e <atan+0x3e>
 800a24a:	f04f 3aff 	mov.w	sl, #4294967295
 800a24e:	e027      	b.n	800a2a0 <atan+0xc0>
 800a250:	f000 f956 	bl	800a500 <fabs>
 800a254:	4ba4      	ldr	r3, [pc, #656]	@ (800a4e8 <atan+0x308>)
 800a256:	4604      	mov	r4, r0
 800a258:	429e      	cmp	r6, r3
 800a25a:	460d      	mov	r5, r1
 800a25c:	f200 80b8 	bhi.w	800a3d0 <atan+0x1f0>
 800a260:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a264:	429e      	cmp	r6, r3
 800a266:	f200 809c 	bhi.w	800a3a2 <atan+0x1c2>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	f7f5 ff7d 	bl	800016c <__adddf3>
 800a272:	2200      	movs	r2, #0
 800a274:	4b9b      	ldr	r3, [pc, #620]	@ (800a4e4 <atan+0x304>)
 800a276:	f7f5 ff77 	bl	8000168 <__aeabi_dsub>
 800a27a:	2200      	movs	r2, #0
 800a27c:	4606      	mov	r6, r0
 800a27e:	460f      	mov	r7, r1
 800a280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7f5 ff70 	bl	800016c <__adddf3>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	f7f6 fa4a 	bl	800072c <__aeabi_ddiv>
 800a298:	f04f 0a00 	mov.w	sl, #0
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	f7f6 f916 	bl	80004d8 <__aeabi_dmul>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	4689      	mov	r9, r1
 800a2b4:	f7f6 f910 	bl	80004d8 <__aeabi_dmul>
 800a2b8:	a36f      	add	r3, pc, #444	@ (adr r3, 800a478 <atan+0x298>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460f      	mov	r7, r1
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	a36e      	add	r3, pc, #440	@ (adr r3, 800a480 <atan+0x2a0>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ff4e 	bl	800016c <__adddf3>
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	f7f6 f900 	bl	80004d8 <__aeabi_dmul>
 800a2d8:	a36b      	add	r3, pc, #428	@ (adr r3, 800a488 <atan+0x2a8>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f5 ff45 	bl	800016c <__adddf3>
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f7f6 f8f7 	bl	80004d8 <__aeabi_dmul>
 800a2ea:	a369      	add	r3, pc, #420	@ (adr r3, 800a490 <atan+0x2b0>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f5 ff3c 	bl	800016c <__adddf3>
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	a366      	add	r3, pc, #408	@ (adr r3, 800a498 <atan+0x2b8>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f5 ff33 	bl	800016c <__adddf3>
 800a306:	4632      	mov	r2, r6
 800a308:	463b      	mov	r3, r7
 800a30a:	f7f6 f8e5 	bl	80004d8 <__aeabi_dmul>
 800a30e:	a364      	add	r3, pc, #400	@ (adr r3, 800a4a0 <atan+0x2c0>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ff2a 	bl	800016c <__adddf3>
 800a318:	4642      	mov	r2, r8
 800a31a:	464b      	mov	r3, r9
 800a31c:	f7f6 f8dc 	bl	80004d8 <__aeabi_dmul>
 800a320:	a361      	add	r3, pc, #388	@ (adr r3, 800a4a8 <atan+0x2c8>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	4680      	mov	r8, r0
 800a328:	4689      	mov	r9, r1
 800a32a:	4630      	mov	r0, r6
 800a32c:	4639      	mov	r1, r7
 800a32e:	f7f6 f8d3 	bl	80004d8 <__aeabi_dmul>
 800a332:	a35f      	add	r3, pc, #380	@ (adr r3, 800a4b0 <atan+0x2d0>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f5 ff16 	bl	8000168 <__aeabi_dsub>
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	f7f6 f8ca 	bl	80004d8 <__aeabi_dmul>
 800a344:	a35c      	add	r3, pc, #368	@ (adr r3, 800a4b8 <atan+0x2d8>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f5 ff0d 	bl	8000168 <__aeabi_dsub>
 800a34e:	4632      	mov	r2, r6
 800a350:	463b      	mov	r3, r7
 800a352:	f7f6 f8c1 	bl	80004d8 <__aeabi_dmul>
 800a356:	a35a      	add	r3, pc, #360	@ (adr r3, 800a4c0 <atan+0x2e0>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f5 ff04 	bl	8000168 <__aeabi_dsub>
 800a360:	4632      	mov	r2, r6
 800a362:	463b      	mov	r3, r7
 800a364:	f7f6 f8b8 	bl	80004d8 <__aeabi_dmul>
 800a368:	a357      	add	r3, pc, #348	@ (adr r3, 800a4c8 <atan+0x2e8>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f5 fefb 	bl	8000168 <__aeabi_dsub>
 800a372:	4632      	mov	r2, r6
 800a374:	463b      	mov	r3, r7
 800a376:	f7f6 f8af 	bl	80004d8 <__aeabi_dmul>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	4640      	mov	r0, r8
 800a380:	4649      	mov	r1, r9
 800a382:	f7f5 fef3 	bl	800016c <__adddf3>
 800a386:	4622      	mov	r2, r4
 800a388:	462b      	mov	r3, r5
 800a38a:	f7f6 f8a5 	bl	80004d8 <__aeabi_dmul>
 800a38e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	d144      	bne.n	800a422 <atan+0x242>
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 fee4 	bl	8000168 <__aeabi_dsub>
 800a3a0:	e733      	b.n	800a20a <atan+0x2a>
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4b4f      	ldr	r3, [pc, #316]	@ (800a4e4 <atan+0x304>)
 800a3a6:	f7f5 fedf 	bl	8000168 <__aeabi_dsub>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4b4b      	ldr	r3, [pc, #300]	@ (800a4e4 <atan+0x304>)
 800a3b6:	f7f5 fed9 	bl	800016c <__adddf3>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f6 f9b3 	bl	800072c <__aeabi_ddiv>
 800a3c6:	f04f 0a01 	mov.w	sl, #1
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	e767      	b.n	800a2a0 <atan+0xc0>
 800a3d0:	4b46      	ldr	r3, [pc, #280]	@ (800a4ec <atan+0x30c>)
 800a3d2:	429e      	cmp	r6, r3
 800a3d4:	d21a      	bcs.n	800a40c <atan+0x22c>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4b45      	ldr	r3, [pc, #276]	@ (800a4f0 <atan+0x310>)
 800a3da:	f7f5 fec5 	bl	8000168 <__aeabi_dsub>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4b41      	ldr	r3, [pc, #260]	@ (800a4f0 <atan+0x310>)
 800a3ea:	f7f6 f875 	bl	80004d8 <__aeabi_dmul>
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4b3c      	ldr	r3, [pc, #240]	@ (800a4e4 <atan+0x304>)
 800a3f2:	f7f5 febb 	bl	800016c <__adddf3>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	f7f6 f995 	bl	800072c <__aeabi_ddiv>
 800a402:	f04f 0a02 	mov.w	sl, #2
 800a406:	4604      	mov	r4, r0
 800a408:	460d      	mov	r5, r1
 800a40a:	e749      	b.n	800a2a0 <atan+0xc0>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	2000      	movs	r0, #0
 800a412:	4938      	ldr	r1, [pc, #224]	@ (800a4f4 <atan+0x314>)
 800a414:	f7f6 f98a 	bl	800072c <__aeabi_ddiv>
 800a418:	f04f 0a03 	mov.w	sl, #3
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	e73e      	b.n	800a2a0 <atan+0xc0>
 800a422:	4b35      	ldr	r3, [pc, #212]	@ (800a4f8 <atan+0x318>)
 800a424:	4e35      	ldr	r6, [pc, #212]	@ (800a4fc <atan+0x31c>)
 800a426:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	f7f5 fe9b 	bl	8000168 <__aeabi_dsub>
 800a432:	4622      	mov	r2, r4
 800a434:	462b      	mov	r3, r5
 800a436:	f7f5 fe97 	bl	8000168 <__aeabi_dsub>
 800a43a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a446:	f7f5 fe8f 	bl	8000168 <__aeabi_dsub>
 800a44a:	f1bb 0f00 	cmp.w	fp, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	460d      	mov	r5, r1
 800a452:	f6bf aee4 	bge.w	800a21e <atan+0x3e>
 800a456:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a45a:	461d      	mov	r5, r3
 800a45c:	e6df      	b.n	800a21e <atan+0x3e>
 800a45e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a4d0 <atan+0x2f0>)
 800a460:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a464:	e6db      	b.n	800a21e <atan+0x3e>
 800a466:	bf00      	nop
 800a468:	54442d18 	.word	0x54442d18
 800a46c:	3ff921fb 	.word	0x3ff921fb
 800a470:	8800759c 	.word	0x8800759c
 800a474:	7e37e43c 	.word	0x7e37e43c
 800a478:	e322da11 	.word	0xe322da11
 800a47c:	3f90ad3a 	.word	0x3f90ad3a
 800a480:	24760deb 	.word	0x24760deb
 800a484:	3fa97b4b 	.word	0x3fa97b4b
 800a488:	a0d03d51 	.word	0xa0d03d51
 800a48c:	3fb10d66 	.word	0x3fb10d66
 800a490:	c54c206e 	.word	0xc54c206e
 800a494:	3fb745cd 	.word	0x3fb745cd
 800a498:	920083ff 	.word	0x920083ff
 800a49c:	3fc24924 	.word	0x3fc24924
 800a4a0:	5555550d 	.word	0x5555550d
 800a4a4:	3fd55555 	.word	0x3fd55555
 800a4a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4ac:	bfa2b444 	.word	0xbfa2b444
 800a4b0:	52defd9a 	.word	0x52defd9a
 800a4b4:	3fadde2d 	.word	0x3fadde2d
 800a4b8:	af749a6d 	.word	0xaf749a6d
 800a4bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800a4c0:	fe231671 	.word	0xfe231671
 800a4c4:	3fbc71c6 	.word	0x3fbc71c6
 800a4c8:	9998ebc4 	.word	0x9998ebc4
 800a4cc:	3fc99999 	.word	0x3fc99999
 800a4d0:	54442d18 	.word	0x54442d18
 800a4d4:	bff921fb 	.word	0xbff921fb
 800a4d8:	440fffff 	.word	0x440fffff
 800a4dc:	7ff00000 	.word	0x7ff00000
 800a4e0:	3fdbffff 	.word	0x3fdbffff
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	3ff2ffff 	.word	0x3ff2ffff
 800a4ec:	40038000 	.word	0x40038000
 800a4f0:	3ff80000 	.word	0x3ff80000
 800a4f4:	bff00000 	.word	0xbff00000
 800a4f8:	0800b718 	.word	0x0800b718
 800a4fc:	0800b738 	.word	0x0800b738

0800a500 <fabs>:
 800a500:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a504:	4619      	mov	r1, r3
 800a506:	4770      	bx	lr

0800a508 <finite>:
 800a508:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a50c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a510:	0fc0      	lsrs	r0, r0, #31
 800a512:	4770      	bx	lr

0800a514 <__ieee754_sqrt>:
 800a514:	4a67      	ldr	r2, [pc, #412]	@ (800a6b4 <__ieee754_sqrt+0x1a0>)
 800a516:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	438a      	bics	r2, r1
 800a51c:	4606      	mov	r6, r0
 800a51e:	460f      	mov	r7, r1
 800a520:	460b      	mov	r3, r1
 800a522:	4604      	mov	r4, r0
 800a524:	d10e      	bne.n	800a544 <__ieee754_sqrt+0x30>
 800a526:	4602      	mov	r2, r0
 800a528:	f7f5 ffd6 	bl	80004d8 <__aeabi_dmul>
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	4630      	mov	r0, r6
 800a532:	4639      	mov	r1, r7
 800a534:	f7f5 fe1a 	bl	800016c <__adddf3>
 800a538:	4606      	mov	r6, r0
 800a53a:	460f      	mov	r7, r1
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	2900      	cmp	r1, #0
 800a546:	dc0c      	bgt.n	800a562 <__ieee754_sqrt+0x4e>
 800a548:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a54c:	4302      	orrs	r2, r0
 800a54e:	d0f5      	beq.n	800a53c <__ieee754_sqrt+0x28>
 800a550:	b189      	cbz	r1, 800a576 <__ieee754_sqrt+0x62>
 800a552:	4602      	mov	r2, r0
 800a554:	f7f5 fe08 	bl	8000168 <__aeabi_dsub>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	f7f6 f8e6 	bl	800072c <__aeabi_ddiv>
 800a560:	e7ea      	b.n	800a538 <__ieee754_sqrt+0x24>
 800a562:	150a      	asrs	r2, r1, #20
 800a564:	d115      	bne.n	800a592 <__ieee754_sqrt+0x7e>
 800a566:	2100      	movs	r1, #0
 800a568:	e009      	b.n	800a57e <__ieee754_sqrt+0x6a>
 800a56a:	0ae3      	lsrs	r3, r4, #11
 800a56c:	3a15      	subs	r2, #21
 800a56e:	0564      	lsls	r4, r4, #21
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0fa      	beq.n	800a56a <__ieee754_sqrt+0x56>
 800a574:	e7f7      	b.n	800a566 <__ieee754_sqrt+0x52>
 800a576:	460a      	mov	r2, r1
 800a578:	e7fa      	b.n	800a570 <__ieee754_sqrt+0x5c>
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	3101      	adds	r1, #1
 800a57e:	02d8      	lsls	r0, r3, #11
 800a580:	d5fb      	bpl.n	800a57a <__ieee754_sqrt+0x66>
 800a582:	1e48      	subs	r0, r1, #1
 800a584:	1a12      	subs	r2, r2, r0
 800a586:	f1c1 0020 	rsb	r0, r1, #32
 800a58a:	fa24 f000 	lsr.w	r0, r4, r0
 800a58e:	4303      	orrs	r3, r0
 800a590:	408c      	lsls	r4, r1
 800a592:	2600      	movs	r6, #0
 800a594:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a598:	2116      	movs	r1, #22
 800a59a:	07d2      	lsls	r2, r2, #31
 800a59c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5aa:	bf5c      	itt	pl
 800a5ac:	005b      	lslpl	r3, r3, #1
 800a5ae:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a5b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5b6:	bf58      	it	pl
 800a5b8:	0064      	lslpl	r4, r4, #1
 800a5ba:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a5be:	107f      	asrs	r7, r7, #1
 800a5c0:	0064      	lsls	r4, r4, #1
 800a5c2:	1815      	adds	r5, r2, r0
 800a5c4:	429d      	cmp	r5, r3
 800a5c6:	bfde      	ittt	le
 800a5c8:	182a      	addle	r2, r5, r0
 800a5ca:	1b5b      	suble	r3, r3, r5
 800a5cc:	1836      	addle	r6, r6, r0
 800a5ce:	0fe5      	lsrs	r5, r4, #31
 800a5d0:	3901      	subs	r1, #1
 800a5d2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a5d6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a5da:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a5de:	d1f0      	bne.n	800a5c2 <__ieee754_sqrt+0xae>
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	f04f 0a20 	mov.w	sl, #32
 800a5e6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	eb01 0c00 	add.w	ip, r1, r0
 800a5f0:	db02      	blt.n	800a5f8 <__ieee754_sqrt+0xe4>
 800a5f2:	d113      	bne.n	800a61c <__ieee754_sqrt+0x108>
 800a5f4:	45a4      	cmp	ip, r4
 800a5f6:	d811      	bhi.n	800a61c <__ieee754_sqrt+0x108>
 800a5f8:	f1bc 0f00 	cmp.w	ip, #0
 800a5fc:	eb0c 0100 	add.w	r1, ip, r0
 800a600:	da42      	bge.n	800a688 <__ieee754_sqrt+0x174>
 800a602:	2900      	cmp	r1, #0
 800a604:	db40      	blt.n	800a688 <__ieee754_sqrt+0x174>
 800a606:	f102 0e01 	add.w	lr, r2, #1
 800a60a:	1a9b      	subs	r3, r3, r2
 800a60c:	4672      	mov	r2, lr
 800a60e:	45a4      	cmp	ip, r4
 800a610:	bf88      	it	hi
 800a612:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a616:	eba4 040c 	sub.w	r4, r4, ip
 800a61a:	4405      	add	r5, r0
 800a61c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a620:	f1ba 0a01 	subs.w	sl, sl, #1
 800a624:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a628:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a62c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a630:	d1db      	bne.n	800a5ea <__ieee754_sqrt+0xd6>
 800a632:	431c      	orrs	r4, r3
 800a634:	d01a      	beq.n	800a66c <__ieee754_sqrt+0x158>
 800a636:	4c20      	ldr	r4, [pc, #128]	@ (800a6b8 <__ieee754_sqrt+0x1a4>)
 800a638:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a6bc <__ieee754_sqrt+0x1a8>
 800a63c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a640:	e9db 2300 	ldrd	r2, r3, [fp]
 800a644:	f7f5 fd90 	bl	8000168 <__aeabi_dsub>
 800a648:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4640      	mov	r0, r8
 800a652:	4649      	mov	r1, r9
 800a654:	f7f6 f9bc 	bl	80009d0 <__aeabi_dcmple>
 800a658:	b140      	cbz	r0, 800a66c <__ieee754_sqrt+0x158>
 800a65a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a65e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a662:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a666:	d111      	bne.n	800a68c <__ieee754_sqrt+0x178>
 800a668:	4655      	mov	r5, sl
 800a66a:	3601      	adds	r6, #1
 800a66c:	1072      	asrs	r2, r6, #1
 800a66e:	086b      	lsrs	r3, r5, #1
 800a670:	07f1      	lsls	r1, r6, #31
 800a672:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a676:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a67a:	bf48      	it	mi
 800a67c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a680:	4618      	mov	r0, r3
 800a682:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a686:	e757      	b.n	800a538 <__ieee754_sqrt+0x24>
 800a688:	4696      	mov	lr, r2
 800a68a:	e7be      	b.n	800a60a <__ieee754_sqrt+0xf6>
 800a68c:	f7f5 fd6e 	bl	800016c <__adddf3>
 800a690:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f6 f98e 	bl	80009bc <__aeabi_dcmplt>
 800a6a0:	b120      	cbz	r0, 800a6ac <__ieee754_sqrt+0x198>
 800a6a2:	1ca8      	adds	r0, r5, #2
 800a6a4:	bf08      	it	eq
 800a6a6:	3601      	addeq	r6, #1
 800a6a8:	3502      	adds	r5, #2
 800a6aa:	e7df      	b.n	800a66c <__ieee754_sqrt+0x158>
 800a6ac:	1c6b      	adds	r3, r5, #1
 800a6ae:	f023 0501 	bic.w	r5, r3, #1
 800a6b2:	e7db      	b.n	800a66c <__ieee754_sqrt+0x158>
 800a6b4:	7ff00000 	.word	0x7ff00000
 800a6b8:	20000250 	.word	0x20000250
 800a6bc:	20000248 	.word	0x20000248

0800a6c0 <__ieee754_pow>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	b091      	sub	sp, #68	@ 0x44
 800a6c6:	e9cd 2300 	strd	r2, r3, [sp]
 800a6ca:	468b      	mov	fp, r1
 800a6cc:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a6d0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	ea57 0001 	orrs.w	r0, r7, r1
 800a6da:	d112      	bne.n	800a702 <__ieee754_pow+0x42>
 800a6dc:	4653      	mov	r3, sl
 800a6de:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a6e2:	18db      	adds	r3, r3, r3
 800a6e4:	4152      	adcs	r2, r2
 800a6e6:	4298      	cmp	r0, r3
 800a6e8:	4b91      	ldr	r3, [pc, #580]	@ (800a930 <__ieee754_pow+0x270>)
 800a6ea:	4193      	sbcs	r3, r2
 800a6ec:	f080 84ce 	bcs.w	800b08c <__ieee754_pow+0x9cc>
 800a6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	f7f5 fd38 	bl	800016c <__adddf3>
 800a6fc:	b011      	add	sp, #68	@ 0x44
 800a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a702:	4b8c      	ldr	r3, [pc, #560]	@ (800a934 <__ieee754_pow+0x274>)
 800a704:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a708:	429e      	cmp	r6, r3
 800a70a:	465d      	mov	r5, fp
 800a70c:	46d1      	mov	r9, sl
 800a70e:	d807      	bhi.n	800a720 <__ieee754_pow+0x60>
 800a710:	d102      	bne.n	800a718 <__ieee754_pow+0x58>
 800a712:	f1ba 0f00 	cmp.w	sl, #0
 800a716:	d1eb      	bne.n	800a6f0 <__ieee754_pow+0x30>
 800a718:	429f      	cmp	r7, r3
 800a71a:	d801      	bhi.n	800a720 <__ieee754_pow+0x60>
 800a71c:	d10f      	bne.n	800a73e <__ieee754_pow+0x7e>
 800a71e:	b171      	cbz	r1, 800a73e <__ieee754_pow+0x7e>
 800a720:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a724:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a728:	ea55 0509 	orrs.w	r5, r5, r9
 800a72c:	d1e0      	bne.n	800a6f0 <__ieee754_pow+0x30>
 800a72e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a732:	18db      	adds	r3, r3, r3
 800a734:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a738:	4152      	adcs	r2, r2
 800a73a:	429d      	cmp	r5, r3
 800a73c:	e7d4      	b.n	800a6e8 <__ieee754_pow+0x28>
 800a73e:	2d00      	cmp	r5, #0
 800a740:	4633      	mov	r3, r6
 800a742:	da39      	bge.n	800a7b8 <__ieee754_pow+0xf8>
 800a744:	4a7c      	ldr	r2, [pc, #496]	@ (800a938 <__ieee754_pow+0x278>)
 800a746:	4297      	cmp	r7, r2
 800a748:	d84e      	bhi.n	800a7e8 <__ieee754_pow+0x128>
 800a74a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a74e:	4297      	cmp	r7, r2
 800a750:	f240 84ab 	bls.w	800b0aa <__ieee754_pow+0x9ea>
 800a754:	153a      	asrs	r2, r7, #20
 800a756:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a75a:	2a14      	cmp	r2, #20
 800a75c:	dd0f      	ble.n	800a77e <__ieee754_pow+0xbe>
 800a75e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a762:	fa21 f402 	lsr.w	r4, r1, r2
 800a766:	fa04 f202 	lsl.w	r2, r4, r2
 800a76a:	428a      	cmp	r2, r1
 800a76c:	f040 849d 	bne.w	800b0aa <__ieee754_pow+0x9ea>
 800a770:	f004 0401 	and.w	r4, r4, #1
 800a774:	f1c4 0402 	rsb	r4, r4, #2
 800a778:	2900      	cmp	r1, #0
 800a77a:	d15a      	bne.n	800a832 <__ieee754_pow+0x172>
 800a77c:	e00e      	b.n	800a79c <__ieee754_pow+0xdc>
 800a77e:	2900      	cmp	r1, #0
 800a780:	d156      	bne.n	800a830 <__ieee754_pow+0x170>
 800a782:	f1c2 0214 	rsb	r2, r2, #20
 800a786:	fa47 f402 	asr.w	r4, r7, r2
 800a78a:	fa04 f202 	lsl.w	r2, r4, r2
 800a78e:	42ba      	cmp	r2, r7
 800a790:	f040 8488 	bne.w	800b0a4 <__ieee754_pow+0x9e4>
 800a794:	f004 0401 	and.w	r4, r4, #1
 800a798:	f1c4 0402 	rsb	r4, r4, #2
 800a79c:	4a67      	ldr	r2, [pc, #412]	@ (800a93c <__ieee754_pow+0x27c>)
 800a79e:	4297      	cmp	r7, r2
 800a7a0:	d130      	bne.n	800a804 <__ieee754_pow+0x144>
 800a7a2:	f1b8 0f00 	cmp.w	r8, #0
 800a7a6:	f280 8479 	bge.w	800b09c <__ieee754_pow+0x9dc>
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	465b      	mov	r3, fp
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	4962      	ldr	r1, [pc, #392]	@ (800a93c <__ieee754_pow+0x27c>)
 800a7b2:	f7f5 ffbb 	bl	800072c <__aeabi_ddiv>
 800a7b6:	e7a1      	b.n	800a6fc <__ieee754_pow+0x3c>
 800a7b8:	2400      	movs	r4, #0
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	d139      	bne.n	800a832 <__ieee754_pow+0x172>
 800a7be:	4a5d      	ldr	r2, [pc, #372]	@ (800a934 <__ieee754_pow+0x274>)
 800a7c0:	4297      	cmp	r7, r2
 800a7c2:	d1eb      	bne.n	800a79c <__ieee754_pow+0xdc>
 800a7c4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a7c8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a7cc:	ea53 0309 	orrs.w	r3, r3, r9
 800a7d0:	f000 845c 	beq.w	800b08c <__ieee754_pow+0x9cc>
 800a7d4:	4b5a      	ldr	r3, [pc, #360]	@ (800a940 <__ieee754_pow+0x280>)
 800a7d6:	429e      	cmp	r6, r3
 800a7d8:	d908      	bls.n	800a7ec <__ieee754_pow+0x12c>
 800a7da:	f1b8 0f00 	cmp.w	r8, #0
 800a7de:	f2c0 8459 	blt.w	800b094 <__ieee754_pow+0x9d4>
 800a7e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7e6:	e789      	b.n	800a6fc <__ieee754_pow+0x3c>
 800a7e8:	2402      	movs	r4, #2
 800a7ea:	e7e6      	b.n	800a7ba <__ieee754_pow+0xfa>
 800a7ec:	f1b8 0f00 	cmp.w	r8, #0
 800a7f0:	f04f 0000 	mov.w	r0, #0
 800a7f4:	f04f 0100 	mov.w	r1, #0
 800a7f8:	da80      	bge.n	800a6fc <__ieee754_pow+0x3c>
 800a7fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a7fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a802:	e77b      	b.n	800a6fc <__ieee754_pow+0x3c>
 800a804:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a808:	d106      	bne.n	800a818 <__ieee754_pow+0x158>
 800a80a:	4652      	mov	r2, sl
 800a80c:	465b      	mov	r3, fp
 800a80e:	4650      	mov	r0, sl
 800a810:	4659      	mov	r1, fp
 800a812:	f7f5 fe61 	bl	80004d8 <__aeabi_dmul>
 800a816:	e771      	b.n	800a6fc <__ieee754_pow+0x3c>
 800a818:	4a4a      	ldr	r2, [pc, #296]	@ (800a944 <__ieee754_pow+0x284>)
 800a81a:	4590      	cmp	r8, r2
 800a81c:	d109      	bne.n	800a832 <__ieee754_pow+0x172>
 800a81e:	2d00      	cmp	r5, #0
 800a820:	db07      	blt.n	800a832 <__ieee754_pow+0x172>
 800a822:	4650      	mov	r0, sl
 800a824:	4659      	mov	r1, fp
 800a826:	b011      	add	sp, #68	@ 0x44
 800a828:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	f7ff be72 	b.w	800a514 <__ieee754_sqrt>
 800a830:	2400      	movs	r4, #0
 800a832:	4650      	mov	r0, sl
 800a834:	4659      	mov	r1, fp
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	f7ff fe62 	bl	800a500 <fabs>
 800a83c:	9b02      	ldr	r3, [sp, #8]
 800a83e:	f1b9 0f00 	cmp.w	r9, #0
 800a842:	d127      	bne.n	800a894 <__ieee754_pow+0x1d4>
 800a844:	4a3d      	ldr	r2, [pc, #244]	@ (800a93c <__ieee754_pow+0x27c>)
 800a846:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a84a:	4594      	cmp	ip, r2
 800a84c:	d000      	beq.n	800a850 <__ieee754_pow+0x190>
 800a84e:	bb0e      	cbnz	r6, 800a894 <__ieee754_pow+0x1d4>
 800a850:	f1b8 0f00 	cmp.w	r8, #0
 800a854:	da05      	bge.n	800a862 <__ieee754_pow+0x1a2>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	2000      	movs	r0, #0
 800a85c:	4937      	ldr	r1, [pc, #220]	@ (800a93c <__ieee754_pow+0x27c>)
 800a85e:	f7f5 ff65 	bl	800072c <__aeabi_ddiv>
 800a862:	2d00      	cmp	r5, #0
 800a864:	f6bf af4a 	bge.w	800a6fc <__ieee754_pow+0x3c>
 800a868:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a86c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a870:	4326      	orrs	r6, r4
 800a872:	d108      	bne.n	800a886 <__ieee754_pow+0x1c6>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4610      	mov	r0, r2
 800a87a:	4619      	mov	r1, r3
 800a87c:	f7f5 fc74 	bl	8000168 <__aeabi_dsub>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	e795      	b.n	800a7b2 <__ieee754_pow+0xf2>
 800a886:	2c01      	cmp	r4, #1
 800a888:	f47f af38 	bne.w	800a6fc <__ieee754_pow+0x3c>
 800a88c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a890:	4619      	mov	r1, r3
 800a892:	e733      	b.n	800a6fc <__ieee754_pow+0x3c>
 800a894:	0fea      	lsrs	r2, r5, #31
 800a896:	3a01      	subs	r2, #1
 800a898:	ea52 0c04 	orrs.w	ip, r2, r4
 800a89c:	d102      	bne.n	800a8a4 <__ieee754_pow+0x1e4>
 800a89e:	4652      	mov	r2, sl
 800a8a0:	465b      	mov	r3, fp
 800a8a2:	e7e9      	b.n	800a878 <__ieee754_pow+0x1b8>
 800a8a4:	f04f 0900 	mov.w	r9, #0
 800a8a8:	3c01      	subs	r4, #1
 800a8aa:	4314      	orrs	r4, r2
 800a8ac:	bf14      	ite	ne
 800a8ae:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a93c <__ieee754_pow+0x27c>
 800a8b2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a948 <__ieee754_pow+0x288>
 800a8b6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a8ba:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a8be:	f240 8107 	bls.w	800aad0 <__ieee754_pow+0x410>
 800a8c2:	4b22      	ldr	r3, [pc, #136]	@ (800a94c <__ieee754_pow+0x28c>)
 800a8c4:	429f      	cmp	r7, r3
 800a8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a940 <__ieee754_pow+0x280>)
 800a8c8:	d913      	bls.n	800a8f2 <__ieee754_pow+0x232>
 800a8ca:	429e      	cmp	r6, r3
 800a8cc:	d808      	bhi.n	800a8e0 <__ieee754_pow+0x220>
 800a8ce:	f1b8 0f00 	cmp.w	r8, #0
 800a8d2:	da08      	bge.n	800a8e6 <__ieee754_pow+0x226>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	b011      	add	sp, #68	@ 0x44
 800a8d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	f000 bcb0 	b.w	800b240 <__math_oflow>
 800a8e0:	f1b8 0f00 	cmp.w	r8, #0
 800a8e4:	dcf6      	bgt.n	800a8d4 <__ieee754_pow+0x214>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	b011      	add	sp, #68	@ 0x44
 800a8ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ee:	f000 bca2 	b.w	800b236 <__math_uflow>
 800a8f2:	429e      	cmp	r6, r3
 800a8f4:	d20c      	bcs.n	800a910 <__ieee754_pow+0x250>
 800a8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f7f6 f85d 	bl	80009bc <__aeabi_dcmplt>
 800a902:	3800      	subs	r0, #0
 800a904:	bf18      	it	ne
 800a906:	2001      	movne	r0, #1
 800a908:	f1b8 0f00 	cmp.w	r8, #0
 800a90c:	daec      	bge.n	800a8e8 <__ieee754_pow+0x228>
 800a90e:	e7e2      	b.n	800a8d6 <__ieee754_pow+0x216>
 800a910:	4b0a      	ldr	r3, [pc, #40]	@ (800a93c <__ieee754_pow+0x27c>)
 800a912:	2200      	movs	r2, #0
 800a914:	429e      	cmp	r6, r3
 800a916:	d91b      	bls.n	800a950 <__ieee754_pow+0x290>
 800a918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a91c:	2300      	movs	r3, #0
 800a91e:	f7f6 f84d 	bl	80009bc <__aeabi_dcmplt>
 800a922:	3800      	subs	r0, #0
 800a924:	bf18      	it	ne
 800a926:	2001      	movne	r0, #1
 800a928:	f1b8 0f00 	cmp.w	r8, #0
 800a92c:	dcd3      	bgt.n	800a8d6 <__ieee754_pow+0x216>
 800a92e:	e7db      	b.n	800a8e8 <__ieee754_pow+0x228>
 800a930:	fff00000 	.word	0xfff00000
 800a934:	7ff00000 	.word	0x7ff00000
 800a938:	433fffff 	.word	0x433fffff
 800a93c:	3ff00000 	.word	0x3ff00000
 800a940:	3fefffff 	.word	0x3fefffff
 800a944:	3fe00000 	.word	0x3fe00000
 800a948:	bff00000 	.word	0xbff00000
 800a94c:	43f00000 	.word	0x43f00000
 800a950:	4b5b      	ldr	r3, [pc, #364]	@ (800aac0 <__ieee754_pow+0x400>)
 800a952:	f7f5 fc09 	bl	8000168 <__aeabi_dsub>
 800a956:	a352      	add	r3, pc, #328	@ (adr r3, 800aaa0 <__ieee754_pow+0x3e0>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	4604      	mov	r4, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	f7f5 fdba 	bl	80004d8 <__aeabi_dmul>
 800a964:	a350      	add	r3, pc, #320	@ (adr r3, 800aaa8 <__ieee754_pow+0x3e8>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fdb1 	bl	80004d8 <__aeabi_dmul>
 800a976:	2200      	movs	r2, #0
 800a978:	4682      	mov	sl, r0
 800a97a:	468b      	mov	fp, r1
 800a97c:	4620      	mov	r0, r4
 800a97e:	4629      	mov	r1, r5
 800a980:	4b50      	ldr	r3, [pc, #320]	@ (800aac4 <__ieee754_pow+0x404>)
 800a982:	f7f5 fda9 	bl	80004d8 <__aeabi_dmul>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	a149      	add	r1, pc, #292	@ (adr r1, 800aab0 <__ieee754_pow+0x3f0>)
 800a98c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a990:	f7f5 fbea 	bl	8000168 <__aeabi_dsub>
 800a994:	4622      	mov	r2, r4
 800a996:	462b      	mov	r3, r5
 800a998:	f7f5 fd9e 	bl	80004d8 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	4949      	ldr	r1, [pc, #292]	@ (800aac8 <__ieee754_pow+0x408>)
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	4622      	mov	r2, r4
 800a9aa:	4680      	mov	r8, r0
 800a9ac:	4689      	mov	r9, r1
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f7f5 fd90 	bl	80004d8 <__aeabi_dmul>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4640      	mov	r0, r8
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f7f5 fd8a 	bl	80004d8 <__aeabi_dmul>
 800a9c4:	a33c      	add	r3, pc, #240	@ (adr r3, 800aab8 <__ieee754_pow+0x3f8>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fd85 	bl	80004d8 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4650      	mov	r0, sl
 800a9d4:	4659      	mov	r1, fp
 800a9d6:	f7f5 fbc7 	bl	8000168 <__aeabi_dsub>
 800a9da:	2400      	movs	r4, #0
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	4689      	mov	r9, r1
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f5 fbc0 	bl	800016c <__adddf3>
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	f7f5 fbb8 	bl	8000168 <__aeabi_dsub>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4649      	mov	r1, r9
 800aa00:	f7f5 fbb2 	bl	8000168 <__aeabi_dsub>
 800aa04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	465b      	mov	r3, fp
 800aa20:	f7f5 fba2 	bl	8000168 <__aeabi_dsub>
 800aa24:	4622      	mov	r2, r4
 800aa26:	462b      	mov	r3, r5
 800aa28:	f7f5 fd56 	bl	80004d8 <__aeabi_dmul>
 800aa2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa30:	4680      	mov	r8, r0
 800aa32:	4689      	mov	r9, r1
 800aa34:	4630      	mov	r0, r6
 800aa36:	4639      	mov	r1, r7
 800aa38:	f7f5 fd4e 	bl	80004d8 <__aeabi_dmul>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4640      	mov	r0, r8
 800aa42:	4649      	mov	r1, r9
 800aa44:	f7f5 fb92 	bl	800016c <__adddf3>
 800aa48:	4652      	mov	r2, sl
 800aa4a:	465b      	mov	r3, fp
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	4689      	mov	r9, r1
 800aa60:	4630      	mov	r0, r6
 800aa62:	4639      	mov	r1, r7
 800aa64:	f7f5 fb82 	bl	800016c <__adddf3>
 800aa68:	4b18      	ldr	r3, [pc, #96]	@ (800aacc <__ieee754_pow+0x40c>)
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4299      	cmp	r1, r3
 800aa6e:	460d      	mov	r5, r1
 800aa70:	468a      	mov	sl, r1
 800aa72:	468b      	mov	fp, r1
 800aa74:	f340 82e0 	ble.w	800b038 <__ieee754_pow+0x978>
 800aa78:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800aa7c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800aa80:	4303      	orrs	r3, r0
 800aa82:	f000 81df 	beq.w	800ae44 <__ieee754_pow+0x784>
 800aa86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f7f5 ff95 	bl	80009bc <__aeabi_dcmplt>
 800aa92:	3800      	subs	r0, #0
 800aa94:	bf18      	it	ne
 800aa96:	2001      	movne	r0, #1
 800aa98:	e71d      	b.n	800a8d6 <__ieee754_pow+0x216>
 800aa9a:	bf00      	nop
 800aa9c:	f3af 8000 	nop.w
 800aaa0:	60000000 	.word	0x60000000
 800aaa4:	3ff71547 	.word	0x3ff71547
 800aaa8:	f85ddf44 	.word	0xf85ddf44
 800aaac:	3e54ae0b 	.word	0x3e54ae0b
 800aab0:	55555555 	.word	0x55555555
 800aab4:	3fd55555 	.word	0x3fd55555
 800aab8:	652b82fe 	.word	0x652b82fe
 800aabc:	3ff71547 	.word	0x3ff71547
 800aac0:	3ff00000 	.word	0x3ff00000
 800aac4:	3fd00000 	.word	0x3fd00000
 800aac8:	3fe00000 	.word	0x3fe00000
 800aacc:	408fffff 	.word	0x408fffff
 800aad0:	4ad3      	ldr	r2, [pc, #844]	@ (800ae20 <__ieee754_pow+0x760>)
 800aad2:	402a      	ands	r2, r5
 800aad4:	2a00      	cmp	r2, #0
 800aad6:	f040 817a 	bne.w	800adce <__ieee754_pow+0x70e>
 800aada:	4bd2      	ldr	r3, [pc, #840]	@ (800ae24 <__ieee754_pow+0x764>)
 800aadc:	2200      	movs	r2, #0
 800aade:	f7f5 fcfb 	bl	80004d8 <__aeabi_dmul>
 800aae2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800aae6:	460b      	mov	r3, r1
 800aae8:	151a      	asrs	r2, r3, #20
 800aaea:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800aaee:	4422      	add	r2, r4
 800aaf0:	920a      	str	r2, [sp, #40]	@ 0x28
 800aaf2:	4acd      	ldr	r2, [pc, #820]	@ (800ae28 <__ieee754_pow+0x768>)
 800aaf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaf8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800aafc:	4293      	cmp	r3, r2
 800aafe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab02:	dd08      	ble.n	800ab16 <__ieee754_pow+0x456>
 800ab04:	4ac9      	ldr	r2, [pc, #804]	@ (800ae2c <__ieee754_pow+0x76c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	f340 8163 	ble.w	800add2 <__ieee754_pow+0x712>
 800ab0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab0e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ab12:	3301      	adds	r3, #1
 800ab14:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab16:	2600      	movs	r6, #0
 800ab18:	00f3      	lsls	r3, r6, #3
 800ab1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab1c:	4bc4      	ldr	r3, [pc, #784]	@ (800ae30 <__ieee754_pow+0x770>)
 800ab1e:	4629      	mov	r1, r5
 800ab20:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab24:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ab2e:	4623      	mov	r3, r4
 800ab30:	4682      	mov	sl, r0
 800ab32:	f7f5 fb19 	bl	8000168 <__aeabi_dsub>
 800ab36:	4652      	mov	r2, sl
 800ab38:	462b      	mov	r3, r5
 800ab3a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ab3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab42:	f7f5 fb13 	bl	800016c <__adddf3>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	49b9      	ldr	r1, [pc, #740]	@ (800ae34 <__ieee754_pow+0x774>)
 800ab4e:	f7f5 fded 	bl	800072c <__aeabi_ddiv>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab5e:	f7f5 fcbb 	bl	80004d8 <__aeabi_dmul>
 800ab62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab66:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ab6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	2200      	movs	r2, #0
 800ab72:	46ab      	mov	fp, r5
 800ab74:	106d      	asrs	r5, r5, #1
 800ab76:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ab7a:	9304      	str	r3, [sp, #16]
 800ab7c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ab80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ab84:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	461d      	mov	r5, r3
 800ab90:	f7f5 fca2 	bl	80004d8 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab9c:	f7f5 fae4 	bl	8000168 <__aeabi_dsub>
 800aba0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aba4:	4606      	mov	r6, r0
 800aba6:	460f      	mov	r7, r1
 800aba8:	4620      	mov	r0, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	f7f5 fadc 	bl	8000168 <__aeabi_dsub>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4650      	mov	r0, sl
 800abb6:	4659      	mov	r1, fp
 800abb8:	f7f5 fad6 	bl	8000168 <__aeabi_dsub>
 800abbc:	4642      	mov	r2, r8
 800abbe:	464b      	mov	r3, r9
 800abc0:	f7f5 fc8a 	bl	80004d8 <__aeabi_dmul>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4630      	mov	r0, r6
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f5 facc 	bl	8000168 <__aeabi_dsub>
 800abd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800abd4:	f7f5 fc80 	bl	80004d8 <__aeabi_dmul>
 800abd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abe0:	4610      	mov	r0, r2
 800abe2:	4619      	mov	r1, r3
 800abe4:	f7f5 fc78 	bl	80004d8 <__aeabi_dmul>
 800abe8:	a37b      	add	r3, pc, #492	@ (adr r3, 800add8 <__ieee754_pow+0x718>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	f7f5 fc71 	bl	80004d8 <__aeabi_dmul>
 800abf6:	a37a      	add	r3, pc, #488	@ (adr r3, 800ade0 <__ieee754_pow+0x720>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f7f5 fab6 	bl	800016c <__adddf3>
 800ac00:	4622      	mov	r2, r4
 800ac02:	462b      	mov	r3, r5
 800ac04:	f7f5 fc68 	bl	80004d8 <__aeabi_dmul>
 800ac08:	a377      	add	r3, pc, #476	@ (adr r3, 800ade8 <__ieee754_pow+0x728>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f7f5 faad 	bl	800016c <__adddf3>
 800ac12:	4622      	mov	r2, r4
 800ac14:	462b      	mov	r3, r5
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	a375      	add	r3, pc, #468	@ (adr r3, 800adf0 <__ieee754_pow+0x730>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 faa4 	bl	800016c <__adddf3>
 800ac24:	4622      	mov	r2, r4
 800ac26:	462b      	mov	r3, r5
 800ac28:	f7f5 fc56 	bl	80004d8 <__aeabi_dmul>
 800ac2c:	a372      	add	r3, pc, #456	@ (adr r3, 800adf8 <__ieee754_pow+0x738>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 fa9b 	bl	800016c <__adddf3>
 800ac36:	4622      	mov	r2, r4
 800ac38:	462b      	mov	r3, r5
 800ac3a:	f7f5 fc4d 	bl	80004d8 <__aeabi_dmul>
 800ac3e:	a370      	add	r3, pc, #448	@ (adr r3, 800ae00 <__ieee754_pow+0x740>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fa92 	bl	800016c <__adddf3>
 800ac48:	4622      	mov	r2, r4
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	460f      	mov	r7, r1
 800ac4e:	462b      	mov	r3, r5
 800ac50:	4620      	mov	r0, r4
 800ac52:	4629      	mov	r1, r5
 800ac54:	f7f5 fc40 	bl	80004d8 <__aeabi_dmul>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	4639      	mov	r1, r7
 800ac60:	f7f5 fc3a 	bl	80004d8 <__aeabi_dmul>
 800ac64:	4604      	mov	r4, r0
 800ac66:	460d      	mov	r5, r1
 800ac68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	464b      	mov	r3, r9
 800ac70:	f7f5 fa7c 	bl	800016c <__adddf3>
 800ac74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac78:	f7f5 fc2e 	bl	80004d8 <__aeabi_dmul>
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	462b      	mov	r3, r5
 800ac80:	f7f5 fa74 	bl	800016c <__adddf3>
 800ac84:	4642      	mov	r2, r8
 800ac86:	4682      	mov	sl, r0
 800ac88:	468b      	mov	fp, r1
 800ac8a:	464b      	mov	r3, r9
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	4649      	mov	r1, r9
 800ac90:	f7f5 fc22 	bl	80004d8 <__aeabi_dmul>
 800ac94:	2200      	movs	r2, #0
 800ac96:	4b68      	ldr	r3, [pc, #416]	@ (800ae38 <__ieee754_pow+0x778>)
 800ac98:	4606      	mov	r6, r0
 800ac9a:	460f      	mov	r7, r1
 800ac9c:	f7f5 fa66 	bl	800016c <__adddf3>
 800aca0:	4652      	mov	r2, sl
 800aca2:	465b      	mov	r3, fp
 800aca4:	f7f5 fa62 	bl	800016c <__adddf3>
 800aca8:	2400      	movs	r4, #0
 800acaa:	460d      	mov	r5, r1
 800acac:	4622      	mov	r2, r4
 800acae:	460b      	mov	r3, r1
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 fc10 	bl	80004d8 <__aeabi_dmul>
 800acb8:	2200      	movs	r2, #0
 800acba:	4680      	mov	r8, r0
 800acbc:	4689      	mov	r9, r1
 800acbe:	4620      	mov	r0, r4
 800acc0:	4629      	mov	r1, r5
 800acc2:	4b5d      	ldr	r3, [pc, #372]	@ (800ae38 <__ieee754_pow+0x778>)
 800acc4:	f7f5 fa50 	bl	8000168 <__aeabi_dsub>
 800acc8:	4632      	mov	r2, r6
 800acca:	463b      	mov	r3, r7
 800accc:	f7f5 fa4c 	bl	8000168 <__aeabi_dsub>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4650      	mov	r0, sl
 800acd6:	4659      	mov	r1, fp
 800acd8:	f7f5 fa46 	bl	8000168 <__aeabi_dsub>
 800acdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace0:	f7f5 fbfa 	bl	80004d8 <__aeabi_dmul>
 800ace4:	4622      	mov	r2, r4
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acee:	462b      	mov	r3, r5
 800acf0:	f7f5 fbf2 	bl	80004d8 <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 fa36 	bl	800016c <__adddf3>
 800ad00:	2400      	movs	r4, #0
 800ad02:	4606      	mov	r6, r0
 800ad04:	460f      	mov	r7, r1
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f7f5 fa2d 	bl	800016c <__adddf3>
 800ad12:	a33d      	add	r3, pc, #244	@ (adr r3, 800ae08 <__ieee754_pow+0x748>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	f7f5 fbdc 	bl	80004d8 <__aeabi_dmul>
 800ad20:	4642      	mov	r2, r8
 800ad22:	464b      	mov	r3, r9
 800ad24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 fa1c 	bl	8000168 <__aeabi_dsub>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	4630      	mov	r0, r6
 800ad36:	4639      	mov	r1, r7
 800ad38:	f7f5 fa16 	bl	8000168 <__aeabi_dsub>
 800ad3c:	a334      	add	r3, pc, #208	@ (adr r3, 800ae10 <__ieee754_pow+0x750>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 fbc9 	bl	80004d8 <__aeabi_dmul>
 800ad46:	a334      	add	r3, pc, #208	@ (adr r3, 800ae18 <__ieee754_pow+0x758>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	460f      	mov	r7, r1
 800ad50:	4620      	mov	r0, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	f7f5 fbc0 	bl	80004d8 <__aeabi_dmul>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 fa04 	bl	800016c <__adddf3>
 800ad64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad66:	4b35      	ldr	r3, [pc, #212]	@ (800ae3c <__ieee754_pow+0x77c>)
 800ad68:	2400      	movs	r4, #0
 800ad6a:	4413      	add	r3, r2
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 f9fc 	bl	800016c <__adddf3>
 800ad74:	4682      	mov	sl, r0
 800ad76:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad78:	468b      	mov	fp, r1
 800ad7a:	f7f5 fb43 	bl	8000404 <__aeabi_i2d>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad84:	4b2e      	ldr	r3, [pc, #184]	@ (800ae40 <__ieee754_pow+0x780>)
 800ad86:	4413      	add	r3, r2
 800ad88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad8c:	4652      	mov	r2, sl
 800ad8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad92:	465b      	mov	r3, fp
 800ad94:	f7f5 f9ea 	bl	800016c <__adddf3>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	464b      	mov	r3, r9
 800ad9c:	f7f5 f9e6 	bl	800016c <__adddf3>
 800ada0:	4632      	mov	r2, r6
 800ada2:	463b      	mov	r3, r7
 800ada4:	f7f5 f9e2 	bl	800016c <__adddf3>
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	4620      	mov	r0, r4
 800adae:	460d      	mov	r5, r1
 800adb0:	f7f5 f9da 	bl	8000168 <__aeabi_dsub>
 800adb4:	4642      	mov	r2, r8
 800adb6:	464b      	mov	r3, r9
 800adb8:	f7f5 f9d6 	bl	8000168 <__aeabi_dsub>
 800adbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adc0:	f7f5 f9d2 	bl	8000168 <__aeabi_dsub>
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4650      	mov	r0, sl
 800adca:	4659      	mov	r1, fp
 800adcc:	e618      	b.n	800aa00 <__ieee754_pow+0x340>
 800adce:	2400      	movs	r4, #0
 800add0:	e68a      	b.n	800aae8 <__ieee754_pow+0x428>
 800add2:	2601      	movs	r6, #1
 800add4:	e6a0      	b.n	800ab18 <__ieee754_pow+0x458>
 800add6:	bf00      	nop
 800add8:	4a454eef 	.word	0x4a454eef
 800addc:	3fca7e28 	.word	0x3fca7e28
 800ade0:	93c9db65 	.word	0x93c9db65
 800ade4:	3fcd864a 	.word	0x3fcd864a
 800ade8:	a91d4101 	.word	0xa91d4101
 800adec:	3fd17460 	.word	0x3fd17460
 800adf0:	518f264d 	.word	0x518f264d
 800adf4:	3fd55555 	.word	0x3fd55555
 800adf8:	db6fabff 	.word	0xdb6fabff
 800adfc:	3fdb6db6 	.word	0x3fdb6db6
 800ae00:	33333303 	.word	0x33333303
 800ae04:	3fe33333 	.word	0x3fe33333
 800ae08:	e0000000 	.word	0xe0000000
 800ae0c:	3feec709 	.word	0x3feec709
 800ae10:	dc3a03fd 	.word	0xdc3a03fd
 800ae14:	3feec709 	.word	0x3feec709
 800ae18:	145b01f5 	.word	0x145b01f5
 800ae1c:	be3e2fe0 	.word	0xbe3e2fe0
 800ae20:	7ff00000 	.word	0x7ff00000
 800ae24:	43400000 	.word	0x43400000
 800ae28:	0003988e 	.word	0x0003988e
 800ae2c:	000bb679 	.word	0x000bb679
 800ae30:	0800b778 	.word	0x0800b778
 800ae34:	3ff00000 	.word	0x3ff00000
 800ae38:	40080000 	.word	0x40080000
 800ae3c:	0800b758 	.word	0x0800b758
 800ae40:	0800b768 	.word	0x0800b768
 800ae44:	a39a      	add	r3, pc, #616	@ (adr r3, 800b0b0 <__ieee754_pow+0x9f0>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	f7f5 f98d 	bl	800016c <__adddf3>
 800ae52:	4642      	mov	r2, r8
 800ae54:	e9cd 0100 	strd	r0, r1, [sp]
 800ae58:	464b      	mov	r3, r9
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7f5 f983 	bl	8000168 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae6a:	f7f5 fdc5 	bl	80009f8 <__aeabi_dcmpgt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f47f ae09 	bne.w	800aa86 <__ieee754_pow+0x3c6>
 800ae74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae78:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ae7c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ae80:	fa43 fa0a 	asr.w	sl, r3, sl
 800ae84:	44da      	add	sl, fp
 800ae86:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ae8a:	489b      	ldr	r0, [pc, #620]	@ (800b0f8 <__ieee754_pow+0xa38>)
 800ae8c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ae90:	4108      	asrs	r0, r1
 800ae92:	ea00 030a 	and.w	r3, r0, sl
 800ae96:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ae9a:	f1c1 0114 	rsb	r1, r1, #20
 800ae9e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800aea2:	4640      	mov	r0, r8
 800aea4:	fa4a fa01 	asr.w	sl, sl, r1
 800aea8:	f1bb 0f00 	cmp.w	fp, #0
 800aeac:	4649      	mov	r1, r9
 800aeae:	f04f 0200 	mov.w	r2, #0
 800aeb2:	bfb8      	it	lt
 800aeb4:	f1ca 0a00 	rsblt	sl, sl, #0
 800aeb8:	f7f5 f956 	bl	8000168 <__aeabi_dsub>
 800aebc:	4680      	mov	r8, r0
 800aebe:	4689      	mov	r9, r1
 800aec0:	2400      	movs	r4, #0
 800aec2:	4632      	mov	r2, r6
 800aec4:	463b      	mov	r3, r7
 800aec6:	4640      	mov	r0, r8
 800aec8:	4649      	mov	r1, r9
 800aeca:	f7f5 f94f 	bl	800016c <__adddf3>
 800aece:	a37a      	add	r3, pc, #488	@ (adr r3, 800b0b8 <__ieee754_pow+0x9f8>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	4620      	mov	r0, r4
 800aed6:	460d      	mov	r5, r1
 800aed8:	f7f5 fafe 	bl	80004d8 <__aeabi_dmul>
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	e9cd 0100 	strd	r0, r1, [sp]
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	f7f5 f93e 	bl	8000168 <__aeabi_dsub>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4630      	mov	r0, r6
 800aef2:	4639      	mov	r1, r7
 800aef4:	f7f5 f938 	bl	8000168 <__aeabi_dsub>
 800aef8:	a371      	add	r3, pc, #452	@ (adr r3, 800b0c0 <__ieee754_pow+0xa00>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 faeb 	bl	80004d8 <__aeabi_dmul>
 800af02:	a371      	add	r3, pc, #452	@ (adr r3, 800b0c8 <__ieee754_pow+0xa08>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	4680      	mov	r8, r0
 800af0a:	4689      	mov	r9, r1
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 fae2 	bl	80004d8 <__aeabi_dmul>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4640      	mov	r0, r8
 800af1a:	4649      	mov	r1, r9
 800af1c:	f7f5 f926 	bl	800016c <__adddf3>
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af2c:	f7f5 f91e 	bl	800016c <__adddf3>
 800af30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af34:	4680      	mov	r8, r0
 800af36:	4689      	mov	r9, r1
 800af38:	f7f5 f916 	bl	8000168 <__aeabi_dsub>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4620      	mov	r0, r4
 800af42:	4629      	mov	r1, r5
 800af44:	f7f5 f910 	bl	8000168 <__aeabi_dsub>
 800af48:	4642      	mov	r2, r8
 800af4a:	4606      	mov	r6, r0
 800af4c:	460f      	mov	r7, r1
 800af4e:	464b      	mov	r3, r9
 800af50:	4640      	mov	r0, r8
 800af52:	4649      	mov	r1, r9
 800af54:	f7f5 fac0 	bl	80004d8 <__aeabi_dmul>
 800af58:	a35d      	add	r3, pc, #372	@ (adr r3, 800b0d0 <__ieee754_pow+0xa10>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	4604      	mov	r4, r0
 800af60:	460d      	mov	r5, r1
 800af62:	f7f5 fab9 	bl	80004d8 <__aeabi_dmul>
 800af66:	a35c      	add	r3, pc, #368	@ (adr r3, 800b0d8 <__ieee754_pow+0xa18>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 f8fc 	bl	8000168 <__aeabi_dsub>
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	f7f5 fab0 	bl	80004d8 <__aeabi_dmul>
 800af78:	a359      	add	r3, pc, #356	@ (adr r3, 800b0e0 <__ieee754_pow+0xa20>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 f8f5 	bl	800016c <__adddf3>
 800af82:	4622      	mov	r2, r4
 800af84:	462b      	mov	r3, r5
 800af86:	f7f5 faa7 	bl	80004d8 <__aeabi_dmul>
 800af8a:	a357      	add	r3, pc, #348	@ (adr r3, 800b0e8 <__ieee754_pow+0xa28>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f7f5 f8ea 	bl	8000168 <__aeabi_dsub>
 800af94:	4622      	mov	r2, r4
 800af96:	462b      	mov	r3, r5
 800af98:	f7f5 fa9e 	bl	80004d8 <__aeabi_dmul>
 800af9c:	a354      	add	r3, pc, #336	@ (adr r3, 800b0f0 <__ieee754_pow+0xa30>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	f7f5 f8e3 	bl	800016c <__adddf3>
 800afa6:	4622      	mov	r2, r4
 800afa8:	462b      	mov	r3, r5
 800afaa:	f7f5 fa95 	bl	80004d8 <__aeabi_dmul>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 f8d7 	bl	8000168 <__aeabi_dsub>
 800afba:	4604      	mov	r4, r0
 800afbc:	460d      	mov	r5, r1
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4640      	mov	r0, r8
 800afc4:	4649      	mov	r1, r9
 800afc6:	f7f5 fa87 	bl	80004d8 <__aeabi_dmul>
 800afca:	2200      	movs	r2, #0
 800afcc:	e9cd 0100 	strd	r0, r1, [sp]
 800afd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afd4:	4620      	mov	r0, r4
 800afd6:	4629      	mov	r1, r5
 800afd8:	f7f5 f8c6 	bl	8000168 <__aeabi_dsub>
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afe4:	f7f5 fba2 	bl	800072c <__aeabi_ddiv>
 800afe8:	4632      	mov	r2, r6
 800afea:	4604      	mov	r4, r0
 800afec:	460d      	mov	r5, r1
 800afee:	463b      	mov	r3, r7
 800aff0:	4640      	mov	r0, r8
 800aff2:	4649      	mov	r1, r9
 800aff4:	f7f5 fa70 	bl	80004d8 <__aeabi_dmul>
 800aff8:	4632      	mov	r2, r6
 800affa:	463b      	mov	r3, r7
 800affc:	f7f5 f8b6 	bl	800016c <__adddf3>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 f8ae 	bl	8000168 <__aeabi_dsub>
 800b00c:	4642      	mov	r2, r8
 800b00e:	464b      	mov	r3, r9
 800b010:	f7f5 f8aa 	bl	8000168 <__aeabi_dsub>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	2000      	movs	r0, #0
 800b01a:	4938      	ldr	r1, [pc, #224]	@ (800b0fc <__ieee754_pow+0xa3c>)
 800b01c:	f7f5 f8a4 	bl	8000168 <__aeabi_dsub>
 800b020:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b024:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b028:	da2e      	bge.n	800b088 <__ieee754_pow+0x9c8>
 800b02a:	4652      	mov	r2, sl
 800b02c:	f000 f870 	bl	800b110 <scalbn>
 800b030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b034:	f7ff bbed 	b.w	800a812 <__ieee754_pow+0x152>
 800b038:	4c31      	ldr	r4, [pc, #196]	@ (800b100 <__ieee754_pow+0xa40>)
 800b03a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b03e:	42a3      	cmp	r3, r4
 800b040:	d91a      	bls.n	800b078 <__ieee754_pow+0x9b8>
 800b042:	4b30      	ldr	r3, [pc, #192]	@ (800b104 <__ieee754_pow+0xa44>)
 800b044:	440b      	add	r3, r1
 800b046:	4303      	orrs	r3, r0
 800b048:	d009      	beq.n	800b05e <__ieee754_pow+0x99e>
 800b04a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	f7f5 fcb3 	bl	80009bc <__aeabi_dcmplt>
 800b056:	3800      	subs	r0, #0
 800b058:	bf18      	it	ne
 800b05a:	2001      	movne	r0, #1
 800b05c:	e444      	b.n	800a8e8 <__ieee754_pow+0x228>
 800b05e:	4642      	mov	r2, r8
 800b060:	464b      	mov	r3, r9
 800b062:	f7f5 f881 	bl	8000168 <__aeabi_dsub>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 fcbb 	bl	80009e4 <__aeabi_dcmpge>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d1eb      	bne.n	800b04a <__ieee754_pow+0x98a>
 800b072:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b108 <__ieee754_pow+0xa48>
 800b076:	e6fd      	b.n	800ae74 <__ieee754_pow+0x7b4>
 800b078:	469a      	mov	sl, r3
 800b07a:	4b24      	ldr	r3, [pc, #144]	@ (800b10c <__ieee754_pow+0xa4c>)
 800b07c:	459a      	cmp	sl, r3
 800b07e:	f63f aef9 	bhi.w	800ae74 <__ieee754_pow+0x7b4>
 800b082:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b086:	e71b      	b.n	800aec0 <__ieee754_pow+0x800>
 800b088:	4621      	mov	r1, r4
 800b08a:	e7d1      	b.n	800b030 <__ieee754_pow+0x970>
 800b08c:	2000      	movs	r0, #0
 800b08e:	491b      	ldr	r1, [pc, #108]	@ (800b0fc <__ieee754_pow+0xa3c>)
 800b090:	f7ff bb34 	b.w	800a6fc <__ieee754_pow+0x3c>
 800b094:	2000      	movs	r0, #0
 800b096:	2100      	movs	r1, #0
 800b098:	f7ff bb30 	b.w	800a6fc <__ieee754_pow+0x3c>
 800b09c:	4650      	mov	r0, sl
 800b09e:	4659      	mov	r1, fp
 800b0a0:	f7ff bb2c 	b.w	800a6fc <__ieee754_pow+0x3c>
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	f7ff bb79 	b.w	800a79c <__ieee754_pow+0xdc>
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	f7ff bb64 	b.w	800a778 <__ieee754_pow+0xb8>
 800b0b0:	652b82fe 	.word	0x652b82fe
 800b0b4:	3c971547 	.word	0x3c971547
 800b0b8:	00000000 	.word	0x00000000
 800b0bc:	3fe62e43 	.word	0x3fe62e43
 800b0c0:	fefa39ef 	.word	0xfefa39ef
 800b0c4:	3fe62e42 	.word	0x3fe62e42
 800b0c8:	0ca86c39 	.word	0x0ca86c39
 800b0cc:	be205c61 	.word	0xbe205c61
 800b0d0:	72bea4d0 	.word	0x72bea4d0
 800b0d4:	3e663769 	.word	0x3e663769
 800b0d8:	c5d26bf1 	.word	0xc5d26bf1
 800b0dc:	3ebbbd41 	.word	0x3ebbbd41
 800b0e0:	af25de2c 	.word	0xaf25de2c
 800b0e4:	3f11566a 	.word	0x3f11566a
 800b0e8:	16bebd93 	.word	0x16bebd93
 800b0ec:	3f66c16c 	.word	0x3f66c16c
 800b0f0:	5555553e 	.word	0x5555553e
 800b0f4:	3fc55555 	.word	0x3fc55555
 800b0f8:	fff00000 	.word	0xfff00000
 800b0fc:	3ff00000 	.word	0x3ff00000
 800b100:	4090cbff 	.word	0x4090cbff
 800b104:	3f6f3400 	.word	0x3f6f3400
 800b108:	4090cc00 	.word	0x4090cc00
 800b10c:	3fe00000 	.word	0x3fe00000

0800b110 <scalbn>:
 800b110:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b114:	4616      	mov	r6, r2
 800b116:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b11a:	4683      	mov	fp, r0
 800b11c:	468c      	mov	ip, r1
 800b11e:	460b      	mov	r3, r1
 800b120:	b982      	cbnz	r2, 800b144 <scalbn+0x34>
 800b122:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b126:	4303      	orrs	r3, r0
 800b128:	d039      	beq.n	800b19e <scalbn+0x8e>
 800b12a:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e8 <scalbn+0xd8>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	f7f5 f9d3 	bl	80004d8 <__aeabi_dmul>
 800b132:	4b2e      	ldr	r3, [pc, #184]	@ (800b1ec <scalbn+0xdc>)
 800b134:	4683      	mov	fp, r0
 800b136:	429e      	cmp	r6, r3
 800b138:	468c      	mov	ip, r1
 800b13a:	da0d      	bge.n	800b158 <scalbn+0x48>
 800b13c:	a326      	add	r3, pc, #152	@ (adr r3, 800b1d8 <scalbn+0xc8>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	e01b      	b.n	800b17c <scalbn+0x6c>
 800b144:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b148:	42ba      	cmp	r2, r7
 800b14a:	d109      	bne.n	800b160 <scalbn+0x50>
 800b14c:	4602      	mov	r2, r0
 800b14e:	f7f5 f80d 	bl	800016c <__adddf3>
 800b152:	4683      	mov	fp, r0
 800b154:	468c      	mov	ip, r1
 800b156:	e022      	b.n	800b19e <scalbn+0x8e>
 800b158:	460b      	mov	r3, r1
 800b15a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b15e:	3a36      	subs	r2, #54	@ 0x36
 800b160:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b164:	428e      	cmp	r6, r1
 800b166:	dd0c      	ble.n	800b182 <scalbn+0x72>
 800b168:	a31d      	add	r3, pc, #116	@ (adr r3, 800b1e0 <scalbn+0xd0>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	461c      	mov	r4, r3
 800b170:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b174:	f361 74df 	bfi	r4, r1, #31, #1
 800b178:	4621      	mov	r1, r4
 800b17a:	481d      	ldr	r0, [pc, #116]	@ (800b1f0 <scalbn+0xe0>)
 800b17c:	f7f5 f9ac 	bl	80004d8 <__aeabi_dmul>
 800b180:	e7e7      	b.n	800b152 <scalbn+0x42>
 800b182:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b186:	4432      	add	r2, r6
 800b188:	428a      	cmp	r2, r1
 800b18a:	dced      	bgt.n	800b168 <scalbn+0x58>
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	dd0a      	ble.n	800b1a6 <scalbn+0x96>
 800b190:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b194:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b198:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b19c:	46ac      	mov	ip, r5
 800b19e:	4658      	mov	r0, fp
 800b1a0:	4661      	mov	r1, ip
 800b1a2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b1a6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b1aa:	da09      	bge.n	800b1c0 <scalbn+0xb0>
 800b1ac:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b1b0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b1b4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b1b8:	480e      	ldr	r0, [pc, #56]	@ (800b1f4 <scalbn+0xe4>)
 800b1ba:	f041 011f 	orr.w	r1, r1, #31
 800b1be:	e7bd      	b.n	800b13c <scalbn+0x2c>
 800b1c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b1c4:	3236      	adds	r2, #54	@ 0x36
 800b1c6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b1ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b1ce:	4658      	mov	r0, fp
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <scalbn+0xe8>)
 800b1d6:	e7d1      	b.n	800b17c <scalbn+0x6c>
 800b1d8:	c2f8f359 	.word	0xc2f8f359
 800b1dc:	01a56e1f 	.word	0x01a56e1f
 800b1e0:	8800759c 	.word	0x8800759c
 800b1e4:	7e37e43c 	.word	0x7e37e43c
 800b1e8:	43500000 	.word	0x43500000
 800b1ec:	ffff3cb0 	.word	0xffff3cb0
 800b1f0:	8800759c 	.word	0x8800759c
 800b1f4:	c2f8f359 	.word	0xc2f8f359
 800b1f8:	3c900000 	.word	0x3c900000

0800b1fc <with_errno>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	4604      	mov	r4, r0
 800b200:	460d      	mov	r5, r1
 800b202:	4616      	mov	r6, r2
 800b204:	f7fc ff36 	bl	8008074 <__errno>
 800b208:	4629      	mov	r1, r5
 800b20a:	6006      	str	r6, [r0, #0]
 800b20c:	4620      	mov	r0, r4
 800b20e:	bd70      	pop	{r4, r5, r6, pc}

0800b210 <xflow>:
 800b210:	b513      	push	{r0, r1, r4, lr}
 800b212:	4604      	mov	r4, r0
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	b10c      	cbz	r4, 800b21e <xflow+0xe>
 800b21a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b21e:	e9cd 2300 	strd	r2, r3, [sp]
 800b222:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b226:	f7f5 f957 	bl	80004d8 <__aeabi_dmul>
 800b22a:	2222      	movs	r2, #34	@ 0x22
 800b22c:	b002      	add	sp, #8
 800b22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b232:	f7ff bfe3 	b.w	800b1fc <with_errno>

0800b236 <__math_uflow>:
 800b236:	2200      	movs	r2, #0
 800b238:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b23c:	f7ff bfe8 	b.w	800b210 <xflow>

0800b240 <__math_oflow>:
 800b240:	2200      	movs	r2, #0
 800b242:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b246:	f7ff bfe3 	b.w	800b210 <xflow>
	...

0800b24c <_init>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	bf00      	nop
 800b250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b252:	bc08      	pop	{r3}
 800b254:	469e      	mov	lr, r3
 800b256:	4770      	bx	lr

0800b258 <_fini>:
 800b258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25a:	bf00      	nop
 800b25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25e:	bc08      	pop	{r3}
 800b260:	469e      	mov	lr, r3
 800b262:	4770      	bx	lr
