
SELF_BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004d44  08004d44  00005d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004e10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000007c  08004e8c  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004e8c  000062d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f539  00000000  00000000  000060a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fd  00000000  00000000  000155de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000178e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf4  00000000  00000000  000187f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000245f  00000000  00000000  000193ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012efd  00000000  00000000  0001b84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce76  00000000  00000000  0002e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb5be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000bb604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bfb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d2c 	.word	0x08004d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004d2c 	.word	0x08004d2c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fda0 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f834 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f92a 	bl	80003c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016c:	f000 f86c 	bl	8000248 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f8fc 	bl	800036c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000174:	f000 f896 	bl	80002a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Send Hello message to UART to test transmission
  if(HAL_UART_Transmit(&huart1, (uint8_t*)hello_msg, strlen(hello_msg), HAL_MAX_DELAY) != HAL_OK)
 8000178:	4813      	ldr	r0, [pc, #76]	@ (80001c8 <main+0x6c>)
 800017a:	f7ff ffe7 	bl	800014c <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29a      	uxth	r2, r3
 8000182:	f04f 33ff 	mov.w	r3, #4294967295
 8000186:	4910      	ldr	r1, [pc, #64]	@ (80001c8 <main+0x6c>)
 8000188:	4810      	ldr	r0, [pc, #64]	@ (80001cc <main+0x70>)
 800018a:	f003 fb4b 	bl	8003824 <HAL_UART_Transmit>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <main+0x3c>
  {
	  Error_Handler();
 8000194:	f000 f954 	bl	8000440 <Error_Handler>
  }

  //Init IMU
  if(!mpu6050Init()) Error_Handler();
 8000198:	f000 faba 	bl	8000710 <mpu6050Init>
 800019c:	4603      	mov	r3, r0
 800019e:	f083 0301 	eor.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <main+0x50>
 80001a8:	f000 f94a 	bl	8000440 <Error_Handler>

  //Init both motors
  if(!motorInit()) Error_Handler();
 80001ac:	f000 f94e 	bl	800044c <motorInit>
 80001b0:	4603      	mov	r3, r0
 80001b2:	f083 0301 	eor.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <main+0x64>
 80001bc:	f000 f940 	bl	8000440 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	motorTest();
 80001c0:	f000 f95e 	bl	8000480 <motorTest>
 80001c4:	e7fc      	b.n	80001c0 <main+0x64>
 80001c6:	bf00      	nop
 80001c8:	20000000 	.word	0x20000000
 80001cc:	20000134 	.word	0x20000134

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	@ 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	@ 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f004 f914 	bl	800440c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fa:	2310      	movs	r3, #16
 80001fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fe:	2300      	movs	r3, #0
 8000200:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fa8c 	bl	8002724 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000212:	f000 f915 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fcfa 	bl	8002c28 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023a:	f000 f901 	bl	8000440 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	@ 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800024c:	4b12      	ldr	r3, [pc, #72]	@ (8000298 <MX_I2C1_Init+0x50>)
 800024e:	4a13      	ldr	r2, [pc, #76]	@ (800029c <MX_I2C1_Init+0x54>)
 8000250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <MX_I2C1_Init+0x50>)
 8000254:	4a12      	ldr	r2, [pc, #72]	@ (80002a0 <MX_I2C1_Init+0x58>)
 8000256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000264:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <MX_I2C1_Init+0x50>)
 8000266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800026a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000272:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000278:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800027e:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <MX_I2C1_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <MX_I2C1_Init+0x50>)
 8000286:	f001 f8c5 	bl	8001414 <HAL_I2C_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000290:	f000 f8d6 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000098 	.word	0x20000098
 800029c:	40005400 	.word	0x40005400
 80002a0:	000186a0 	.word	0x000186a0

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	@ 0x28
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002aa:	f107 0320 	add.w	r3, r7, #32
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
 80002c2:	615a      	str	r2, [r3, #20]
 80002c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c6:	4b28      	ldr	r3, [pc, #160]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002ce:	4b26      	ldr	r3, [pc, #152]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b24      	ldr	r3, [pc, #144]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002da:	4b23      	ldr	r3, [pc, #140]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e2:	4b21      	ldr	r3, [pc, #132]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002ee:	481e      	ldr	r0, [pc, #120]	@ (8000368 <MX_TIM2_Init+0xc4>)
 80002f0:	f002 fe28 	bl	8002f44 <HAL_TIM_PWM_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80002fa:	f000 f8a1 	bl	8000440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fe:	2300      	movs	r3, #0
 8000300:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000302:	2300      	movs	r3, #0
 8000304:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000306:	f107 0320 	add.w	r3, r7, #32
 800030a:	4619      	mov	r1, r3
 800030c:	4816      	ldr	r0, [pc, #88]	@ (8000368 <MX_TIM2_Init+0xc4>)
 800030e:	f003 f9db 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000318:	f000 f892 	bl	8000440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800031c:	2360      	movs	r3, #96	@ 0x60
 800031e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	4619      	mov	r1, r3
 8000332:	480d      	ldr	r0, [pc, #52]	@ (8000368 <MX_TIM2_Init+0xc4>)
 8000334:	f002 fef8 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800033e:	f000 f87f 	bl	8000440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2204      	movs	r2, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4807      	ldr	r0, [pc, #28]	@ (8000368 <MX_TIM2_Init+0xc4>)
 800034a:	f002 feed 	bl	8003128 <HAL_TIM_PWM_ConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000354:	f000 f874 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000358:	4803      	ldr	r0, [pc, #12]	@ (8000368 <MX_TIM2_Init+0xc4>)
 800035a:	f000 fb81 	bl	8000a60 <HAL_TIM_MspPostInit>

}
 800035e:	bf00      	nop
 8000360:	3728      	adds	r7, #40	@ 0x28
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200000ec 	.word	0x200000ec

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	@ (80003bc <MX_USART1_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f003 f9ee 	bl	8003784 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f847 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000134 	.word	0x20000134
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b086      	sub	sp, #24
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0308 	add.w	r3, r7, #8
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <MX_GPIO_Init+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a17      	ldr	r2, [pc, #92]	@ (8000438 <MX_GPIO_Init+0x78>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_GPIO_Init+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <MX_GPIO_Init+0x78>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a11      	ldr	r2, [pc, #68]	@ (8000438 <MX_GPIO_Init+0x78>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <MX_GPIO_Init+0x78>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800040a:	480c      	ldr	r0, [pc, #48]	@ (800043c <MX_GPIO_Init+0x7c>)
 800040c:	f000 ffea 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000410:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000414:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800041a:	2302      	movs	r3, #2
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	@ (800043c <MX_GPIO_Init+0x7c>)
 800042a:	f000 fe57 	bl	80010dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	bf00      	nop
 800044a:	e7fd      	b.n	8000448 <Error_Handler+0x8>

0800044c <motorInit>:
#include "motor.h"

extern TIM_HandleTypeDef htim2;

bool motorInit()
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	return HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1)
 8000450:	2100      	movs	r1, #0
 8000452:	480a      	ldr	r0, [pc, #40]	@ (800047c <motorInit+0x30>)
 8000454:	f002 fdc6 	bl	8002fe4 <HAL_TIM_PWM_Start>
 8000458:	4603      	mov	r3, r0
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800045a:	2b00      	cmp	r3, #0
 800045c:	d108      	bne.n	8000470 <motorInit+0x24>
 800045e:	2104      	movs	r1, #4
 8000460:	4806      	ldr	r0, [pc, #24]	@ (800047c <motorInit+0x30>)
 8000462:	f002 fdbf 	bl	8002fe4 <HAL_TIM_PWM_Start>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d101      	bne.n	8000470 <motorInit+0x24>
 800046c:	2301      	movs	r3, #1
 800046e:	e000      	b.n	8000472 <motorInit+0x26>
 8000470:	2300      	movs	r3, #0
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	b2db      	uxtb	r3, r3
}
 8000478:	4618      	mov	r0, r3
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000ec 	.word	0x200000ec

08000480 <motorTest>:

void motorTest()
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	static uint8_t test_motor_idx = 0;

	switch(test_motor_idx)
 8000484:	4b2d      	ldr	r3, [pc, #180]	@ (800053c <motorTest+0xbc>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b05      	cmp	r3, #5
 800048a:	d851      	bhi.n	8000530 <motorTest+0xb0>
 800048c:	a201      	add	r2, pc, #4	@ (adr r2, 8000494 <motorTest+0x14>)
 800048e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000492:	bf00      	nop
 8000494:	080004ad 	.word	0x080004ad
 8000498:	080004c3 	.word	0x080004c3
 800049c:	080004db 	.word	0x080004db
 80004a0:	080004f1 	.word	0x080004f1
 80004a4:	08000509 	.word	0x08000509
 80004a8:	0800051f 	.word	0x0800051f
	{
		case 0:
		{
			motorRequestMovement(30, LEFT);
 80004ac:	2100      	movs	r1, #0
 80004ae:	201e      	movs	r0, #30
 80004b0:	f000 f846 	bl	8000540 <motorRequestMovement>
			test_motor_idx++;
 80004b4:	4b21      	ldr	r3, [pc, #132]	@ (800053c <motorTest+0xbc>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <motorTest+0xbc>)
 80004be:	701a      	strb	r2, [r3, #0]
			break;
 80004c0:	e036      	b.n	8000530 <motorTest+0xb0>
		}
		case 1:
		{
			motorRequestMovement(-30, LEFT);
 80004c2:	2100      	movs	r1, #0
 80004c4:	f06f 001d 	mvn.w	r0, #29
 80004c8:	f000 f83a 	bl	8000540 <motorRequestMovement>
			test_motor_idx++;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <motorTest+0xbc>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b19      	ldr	r3, [pc, #100]	@ (800053c <motorTest+0xbc>)
 80004d6:	701a      	strb	r2, [r3, #0]
			break;
 80004d8:	e02a      	b.n	8000530 <motorTest+0xb0>
		}
		case 2:
		{
			motorRequestMovement(30, RIGHT);
 80004da:	2101      	movs	r1, #1
 80004dc:	201e      	movs	r0, #30
 80004de:	f000 f82f 	bl	8000540 <motorRequestMovement>
			test_motor_idx++;
 80004e2:	4b16      	ldr	r3, [pc, #88]	@ (800053c <motorTest+0xbc>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	3301      	adds	r3, #1
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b14      	ldr	r3, [pc, #80]	@ (800053c <motorTest+0xbc>)
 80004ec:	701a      	strb	r2, [r3, #0]
			break;
 80004ee:	e01f      	b.n	8000530 <motorTest+0xb0>
		}
		case 3:
		{
			motorRequestMovement(-30, RIGHT);
 80004f0:	2101      	movs	r1, #1
 80004f2:	f06f 001d 	mvn.w	r0, #29
 80004f6:	f000 f823 	bl	8000540 <motorRequestMovement>
			test_motor_idx++;
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <motorTest+0xbc>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3301      	adds	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <motorTest+0xbc>)
 8000504:	701a      	strb	r2, [r3, #0]
			break;
 8000506:	e013      	b.n	8000530 <motorTest+0xb0>
		}
		case 4:
		{
			motorRequestMovement(30, BOTH);
 8000508:	2102      	movs	r1, #2
 800050a:	201e      	movs	r0, #30
 800050c:	f000 f818 	bl	8000540 <motorRequestMovement>
			test_motor_idx++;
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <motorTest+0xbc>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <motorTest+0xbc>)
 800051a:	701a      	strb	r2, [r3, #0]
			break;
 800051c:	e008      	b.n	8000530 <motorTest+0xb0>
		}
		case 5:
		{
			motorRequestMovement(-30, BOTH);
 800051e:	2102      	movs	r1, #2
 8000520:	f06f 001d 	mvn.w	r0, #29
 8000524:	f000 f80c 	bl	8000540 <motorRequestMovement>
			test_motor_idx = 0;
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <motorTest+0xbc>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			break;
 800052e:	bf00      	nop
		}
	}
	HAL_Delay(2000);
 8000530:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000534:	f000 fc18 	bl	8000d68 <HAL_Delay>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000017c 	.word	0x2000017c

08000540 <motorRequestMovement>:

void motorRequestMovement(int8_t speed, uint8_t motor)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	uint8_t abs_speed = abs(speed);
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	bfb8      	it	lt
 8000558:	425b      	neglt	r3, r3
 800055a:	73fb      	strb	r3, [r7, #15]
	uint32_t ccr_value = (abs_speed * htim2.Init.Period)/100;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	4a69      	ldr	r2, [pc, #420]	@ (8000704 <motorRequestMovement+0x1c4>)
 8000560:	68d2      	ldr	r2, [r2, #12]
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	4a68      	ldr	r2, [pc, #416]	@ (8000708 <motorRequestMovement+0x1c8>)
 8000568:	fba2 2303 	umull	r2, r3, r2, r3
 800056c:	095b      	lsrs	r3, r3, #5
 800056e:	60bb      	str	r3, [r7, #8]
	switch(motor)
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b02      	cmp	r3, #2
 8000574:	f000 8084 	beq.w	8000680 <motorRequestMovement+0x140>
 8000578:	2b02      	cmp	r3, #2
 800057a:	f300 80bf 	bgt.w	80006fc <motorRequestMovement+0x1bc>
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <motorRequestMovement+0x48>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d03e      	beq.n	8000604 <motorRequestMovement+0xc4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
			}
	}
}
 8000586:	e0b9      	b.n	80006fc <motorRequestMovement+0x1bc>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8000588:	4b5e      	ldr	r3, [pc, #376]	@ (8000704 <motorRequestMovement+0x1c4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8000590:	4b5c      	ldr	r3, [pc, #368]	@ (8000704 <motorRequestMovement+0x1c4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8000598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	db18      	blt.n	80005d2 <motorRequestMovement+0x92>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a6:	4859      	ldr	r0, [pc, #356]	@ (800070c <motorRequestMovement+0x1cc>)
 80005a8:	f000 ff1c 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b2:	4856      	ldr	r0, [pc, #344]	@ (800070c <motorRequestMovement+0x1cc>)
 80005b4:	f000 ff16 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005be:	4853      	ldr	r0, [pc, #332]	@ (800070c <motorRequestMovement+0x1cc>)
 80005c0:	f000 ff10 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ca:	4850      	ldr	r0, [pc, #320]	@ (800070c <motorRequestMovement+0x1cc>)
 80005cc:	f000 ff0a 	bl	80013e4 <HAL_GPIO_WritePin>
			break;
 80005d0:	e094      	b.n	80006fc <motorRequestMovement+0x1bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d8:	484c      	ldr	r0, [pc, #304]	@ (800070c <motorRequestMovement+0x1cc>)
 80005da:	f000 ff03 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005e4:	4849      	ldr	r0, [pc, #292]	@ (800070c <motorRequestMovement+0x1cc>)
 80005e6:	f000 fefd 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005f0:	4846      	ldr	r0, [pc, #280]	@ (800070c <motorRequestMovement+0x1cc>)
 80005f2:	f000 fef7 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005fc:	4843      	ldr	r0, [pc, #268]	@ (800070c <motorRequestMovement+0x1cc>)
 80005fe:	f000 fef1 	bl	80013e4 <HAL_GPIO_WritePin>
			break;
 8000602:	e07b      	b.n	80006fc <motorRequestMovement+0x1bc>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8000604:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <motorRequestMovement+0x1c4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 800060c:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <motorRequestMovement+0x1c4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db18      	blt.n	800064e <motorRequestMovement+0x10e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000622:	483a      	ldr	r0, [pc, #232]	@ (800070c <motorRequestMovement+0x1cc>)
 8000624:	f000 fede 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4837      	ldr	r0, [pc, #220]	@ (800070c <motorRequestMovement+0x1cc>)
 8000630:	f000 fed8 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800063a:	4834      	ldr	r0, [pc, #208]	@ (800070c <motorRequestMovement+0x1cc>)
 800063c:	f000 fed2 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000646:	4831      	ldr	r0, [pc, #196]	@ (800070c <motorRequestMovement+0x1cc>)
 8000648:	f000 fecc 	bl	80013e4 <HAL_GPIO_WritePin>
			break;
 800064c:	e056      	b.n	80006fc <motorRequestMovement+0x1bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000654:	482d      	ldr	r0, [pc, #180]	@ (800070c <motorRequestMovement+0x1cc>)
 8000656:	f000 fec5 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000660:	482a      	ldr	r0, [pc, #168]	@ (800070c <motorRequestMovement+0x1cc>)
 8000662:	f000 febf 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066c:	4827      	ldr	r0, [pc, #156]	@ (800070c <motorRequestMovement+0x1cc>)
 800066e:	f000 feb9 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000678:	4824      	ldr	r0, [pc, #144]	@ (800070c <motorRequestMovement+0x1cc>)
 800067a:	f000 feb3 	bl	80013e4 <HAL_GPIO_WritePin>
			break;
 800067e:	e03d      	b.n	80006fc <motorRequestMovement+0x1bc>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 8000680:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <motorRequestMovement+0x1c4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <motorRequestMovement+0x1c4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db18      	blt.n	80006ca <motorRequestMovement+0x18a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	481b      	ldr	r0, [pc, #108]	@ (800070c <motorRequestMovement+0x1cc>)
 80006a0:	f000 fea0 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006aa:	4818      	ldr	r0, [pc, #96]	@ (800070c <motorRequestMovement+0x1cc>)
 80006ac:	f000 fe9a 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b6:	4815      	ldr	r0, [pc, #84]	@ (800070c <motorRequestMovement+0x1cc>)
 80006b8:	f000 fe94 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c2:	4812      	ldr	r0, [pc, #72]	@ (800070c <motorRequestMovement+0x1cc>)
 80006c4:	f000 fe8e 	bl	80013e4 <HAL_GPIO_WritePin>
}
 80006c8:	e018      	b.n	80006fc <motorRequestMovement+0x1bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d0:	480e      	ldr	r0, [pc, #56]	@ (800070c <motorRequestMovement+0x1cc>)
 80006d2:	f000 fe87 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006dc:	480b      	ldr	r0, [pc, #44]	@ (800070c <motorRequestMovement+0x1cc>)
 80006de:	f000 fe81 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e8:	4808      	ldr	r0, [pc, #32]	@ (800070c <motorRequestMovement+0x1cc>)
 80006ea:	f000 fe7b 	bl	80013e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <motorRequestMovement+0x1cc>)
 80006f6:	f000 fe75 	bl	80013e4 <HAL_GPIO_WritePin>
}
 80006fa:	e7ff      	b.n	80006fc <motorRequestMovement+0x1bc>
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000ec 	.word	0x200000ec
 8000708:	51eb851f 	.word	0x51eb851f
 800070c:	40010800 	.word	0x40010800

08000710 <mpu6050Init>:
 */

#include "mpu6050.h"

bool mpu6050Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0b8      	sub	sp, #224	@ 0xe0
 8000714:	af04      	add	r7, sp, #16
	//Check if device is ready
	char msg[200];
	uint8_t reg_buff = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, HAL_MAX_DELAY) != HAL_OK)
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	2201      	movs	r2, #1
 8000720:	21d0      	movs	r1, #208	@ 0xd0
 8000722:	487c      	ldr	r0, [pc, #496]	@ (8000914 <mpu6050Init+0x204>)
 8000724:	f001 fb1c 	bl	8001d60 <HAL_I2C_IsDeviceReady>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <mpu6050Init+0x22>
	{
		return false;
 800072e:	2300      	movs	r3, #0
 8000730:	e0eb      	b.n	800090a <mpu6050Init+0x1fa>
	}
	//RESET MODULE
	reg_buff = 0x1<<7;
 8000732:	2380      	movs	r3, #128	@ 0x80
 8000734:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	9302      	str	r3, [sp, #8]
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	226b      	movs	r2, #107	@ 0x6b
 8000748:	21d0      	movs	r1, #208	@ 0xd0
 800074a:	4872      	ldr	r0, [pc, #456]	@ (8000914 <mpu6050Init+0x204>)
 800074c:	f000 ffa6 	bl	800169c <HAL_I2C_Mem_Write>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <mpu6050Init+0x4a>
	{
		return false;
 8000756:	2300      	movs	r3, #0
 8000758:	e0d7      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 800075a:	2032      	movs	r0, #50	@ 0x32
 800075c:	f000 fb04 	bl	8000d68 <HAL_Delay>

	//Remove from SLEEP MODE
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, 0, 1, HAL_MAX_DELAY) != HAL_OK)
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	9302      	str	r3, [sp, #8]
 8000766:	2301      	movs	r3, #1
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	2300      	movs	r3, #0
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2301      	movs	r3, #1
 8000770:	226b      	movs	r2, #107	@ 0x6b
 8000772:	21d0      	movs	r1, #208	@ 0xd0
 8000774:	4867      	ldr	r0, [pc, #412]	@ (8000914 <mpu6050Init+0x204>)
 8000776:	f000 ff91 	bl	800169c <HAL_I2C_Mem_Write>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <mpu6050Init+0x74>
	{
		return false;
 8000780:	2300      	movs	r3, #0
 8000782:	e0c2      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8000784:	2032      	movs	r0, #50	@ 0x32
 8000786:	f000 faef 	bl	8000d68 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	2301      	movs	r3, #1
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	226b      	movs	r2, #107	@ 0x6b
 800079c:	21d0      	movs	r1, #208	@ 0xd0
 800079e:	485d      	ldr	r0, [pc, #372]	@ (8000914 <mpu6050Init+0x204>)
 80007a0:	f001 f876 	bl	8001890 <HAL_I2C_Mem_Read>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <mpu6050Init+0x9e>
	{
		return false;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e0ad      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 80007ae:	2032      	movs	r0, #50	@ 0x32
 80007b0:	f000 fada 	bl	8000d68 <HAL_Delay>

	//Accelerometer configuration
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2301      	movs	r3, #1
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2301      	movs	r3, #1
 80007c4:	221c      	movs	r2, #28
 80007c6:	21d0      	movs	r1, #208	@ 0xd0
 80007c8:	4852      	ldr	r0, [pc, #328]	@ (8000914 <mpu6050Init+0x204>)
 80007ca:	f001 f861 	bl	8001890 <HAL_I2C_Mem_Read>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <mpu6050Init+0xc8>
	{
		return false;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e098      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 80007d8:	2032      	movs	r0, #50	@ 0x32
 80007da:	f000 fac5 	bl	8000d68 <HAL_Delay>
	reg_buff |= (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	2301      	movs	r3, #1
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	221c      	movs	r2, #28
 80007fa:	21d0      	movs	r1, #208	@ 0xd0
 80007fc:	4845      	ldr	r0, [pc, #276]	@ (8000914 <mpu6050Init+0x204>)
 80007fe:	f000 ff4d 	bl	800169c <HAL_I2C_Mem_Write>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <mpu6050Init+0xfc>
	{
		return false;
 8000808:	2300      	movs	r3, #0
 800080a:	e07e      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 800080c:	2032      	movs	r0, #50	@ 0x32
 800080e:	f000 faab 	bl	8000d68 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	221c      	movs	r2, #28
 8000824:	21d0      	movs	r1, #208	@ 0xd0
 8000826:	483b      	ldr	r0, [pc, #236]	@ (8000914 <mpu6050Init+0x204>)
 8000828:	f001 f832 	bl	8001890 <HAL_I2C_Mem_Read>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <mpu6050Init+0x126>
	{
		return false;
 8000832:	2300      	movs	r3, #0
 8000834:	e069      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8000836:	2032      	movs	r0, #50	@ 0x32
 8000838:	f000 fa96 	bl	8000d68 <HAL_Delay>
	if(reg_buff != (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL))
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d015      	beq.n	800086e <mpu6050Init+0x15e>
	{
		sprintf(msg,"MPU6050_ACCEL_CONFIG NOT SET CORRECTLY\n\r");
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4934      	ldr	r1, [pc, #208]	@ (8000918 <mpu6050Init+0x208>)
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fdbf 	bl	80043cc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fc7a 	bl	800014c <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f107 0108 	add.w	r1, r7, #8
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	482d      	ldr	r0, [pc, #180]	@ (800091c <mpu6050Init+0x20c>)
 8000866:	f002 ffdd 	bl	8003824 <HAL_UART_Transmit>
		return false;
 800086a:	2300      	movs	r3, #0
 800086c:	e04d      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 800086e:	2032      	movs	r0, #50	@ 0x32
 8000870:	f000 fa7a 	bl	8000d68 <HAL_Delay>

	//Gyroscope configuration

	reg_buff = 8;
 8000874:	2308      	movs	r3, #8
 8000876:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8000878:	f04f 33ff 	mov.w	r3, #4294967295
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	221b      	movs	r2, #27
 800088a:	21d0      	movs	r1, #208	@ 0xd0
 800088c:	4821      	ldr	r0, [pc, #132]	@ (8000914 <mpu6050Init+0x204>)
 800088e:	f000 ff05 	bl	800169c <HAL_I2C_Mem_Write>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <mpu6050Init+0x18c>
	{
		return false;
 8000898:	2300      	movs	r3, #0
 800089a:	e036      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 800089c:	2032      	movs	r0, #50	@ 0x32
 800089e:	f000 fa63 	bl	8000d68 <HAL_Delay>
	reg_buff = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	2301      	movs	r3, #1
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	221b      	movs	r2, #27
 80008b8:	21d0      	movs	r1, #208	@ 0xd0
 80008ba:	4816      	ldr	r0, [pc, #88]	@ (8000914 <mpu6050Init+0x204>)
 80008bc:	f000 ffe8 	bl	8001890 <HAL_I2C_Mem_Read>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <mpu6050Init+0x1ba>
	{
		return false;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e01f      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 80008ca:	2032      	movs	r0, #50	@ 0x32
 80008cc:	f000 fa4c 	bl	8000d68 <HAL_Delay>
	if(reg_buff != 8)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d015      	beq.n	8000902 <mpu6050Init+0x1f2>
	{
		sprintf(msg,"MPU6050_GYRO_CONFIG NOT SET CORRECTLY\n\r");
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	4911      	ldr	r1, [pc, #68]	@ (8000920 <mpu6050Init+0x210>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fd75 	bl	80043cc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fc30 	bl	800014c <strlen>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	f107 0108 	add.w	r1, r7, #8
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	4808      	ldr	r0, [pc, #32]	@ (800091c <mpu6050Init+0x20c>)
 80008fa:	f002 ff93 	bl	8003824 <HAL_UART_Transmit>
		return false;
 80008fe:	2300      	movs	r3, #0
 8000900:	e003      	b.n	800090a <mpu6050Init+0x1fa>
	}
	HAL_Delay(50);
 8000902:	2032      	movs	r0, #50	@ 0x32
 8000904:	f000 fa30 	bl	8000d68 <HAL_Delay>
	return true;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	37d0      	adds	r7, #208	@ 0xd0
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000098 	.word	0x20000098
 8000918:	08004d44 	.word	0x08004d44
 800091c:	20000134 	.word	0x20000134
 8000920:	08004d70 	.word	0x08004d70

08000924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_MspInit+0x5c>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <HAL_MspInit+0x5c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_MspInit+0x5c>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_MspInit+0x5c>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <HAL_MspInit+0x5c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_MspInit+0x5c>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_MspInit+0x60>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_MspInit+0x60>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	40010000 	.word	0x40010000

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <HAL_I2C_MspInit+0x90>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d132      	bne.n	8000a0e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <HAL_I2C_MspInit+0x94>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <HAL_I2C_MspInit+0x94>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <HAL_I2C_MspInit+0x94>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c6:	2312      	movs	r3, #18
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4812      	ldr	r0, [pc, #72]	@ (8000a20 <HAL_I2C_MspInit+0x98>)
 80009d6:	f000 fb81 	bl	80010dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_I2C_MspInit+0x9c>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a24 <HAL_I2C_MspInit+0x9c>)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_I2C_MspInit+0x94>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_I2C_MspInit+0x94>)
 80009fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_I2C_MspInit+0x94>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	@ 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	40010000 	.word	0x40010000

08000a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a38:	d10b      	bne.n	8000a52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x34>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x34>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_TIM_PWM_MspInit+0x34>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a7e:	d117      	bne.n	8000ab0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_TIM_MspPostInit+0x58>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <HAL_TIM_MspPostInit+0x58>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <HAL_TIM_MspPostInit+0x58>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <HAL_TIM_MspPostInit+0x5c>)
 8000aac:	f000 fb16 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010800 	.word	0x40010800

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <HAL_UART_MspInit+0xa4>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d13d      	bne.n	8000b5c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae0:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <HAL_UART_MspInit+0xa8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	@ (8000b68 <HAL_UART_MspInit+0xa8>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <HAL_UART_MspInit+0xa8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <HAL_UART_MspInit+0xa8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <HAL_UART_MspInit+0xa8>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <HAL_UART_MspInit+0xa8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <HAL_UART_MspInit+0xac>)
 8000b24:	f000 fada 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <HAL_UART_MspInit+0xac>)
 8000b3c:	f000 face 	bl	80010dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <HAL_UART_MspInit+0xb0>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b48:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b56:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_UART_MspInit+0xb0>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	40010000 	.word	0x40010000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8b4 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <USART1_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f002 feab 	bl	800392c <HAL_UART_IRQHandler>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000134 	.word	0x20000134

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f003 fc04 	bl	800441c <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20005000 	.word	0x20005000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	20000180 	.word	0x20000180
 8000c48:	200002d0 	.word	0x200002d0

08000c4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff fff8 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c5e:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c60:	4a0c      	ldr	r2, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a09      	ldr	r2, [pc, #36]	@ (8000c98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c74:	4c09      	ldr	r4, [pc, #36]	@ (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fbd1 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff fa69 	bl	800015c <main>
  bx lr
 8000c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c94:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8000c98:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c9c:	200002d0 	.word	0x200002d0

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f92b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe30 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f935 	bl	8000f5e <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000020 	.word	0x20000020
 8000d28:	20000028 	.word	0x20000028
 8000d2c:	20000024 	.word	0x20000024

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x1c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a03      	ldr	r2, [pc, #12]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20000028 	.word	0x20000028
 8000d50:	20000184 	.word	0x20000184

08000d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b02      	ldr	r3, [pc, #8]	@ (8000d64 <HAL_GetTick+0x10>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000184 	.word	0x20000184

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff fff0 	bl	8000d54 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffe0 	bl	8000d54 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000028 	.word	0x20000028

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff90 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff49 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb0 	bl	8000ecc <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d008      	beq.n	8000fa0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2204      	movs	r2, #4
 8000f92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e020      	b.n	8000fe2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 020e 	bic.w	r2, r2, #14
 8000fae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d005      	beq.n	8001010 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2204      	movs	r2, #4
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e051      	b.n	80010b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 020e 	bic.w	r2, r2, #14
 800101e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0201 	bic.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a22      	ldr	r2, [pc, #136]	@ (80010c0 <HAL_DMA_Abort_IT+0xd4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d029      	beq.n	800108e <HAL_DMA_Abort_IT+0xa2>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <HAL_DMA_Abort_IT+0xd8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d022      	beq.n	800108a <HAL_DMA_Abort_IT+0x9e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <HAL_DMA_Abort_IT+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01a      	beq.n	8001084 <HAL_DMA_Abort_IT+0x98>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1e      	ldr	r2, [pc, #120]	@ (80010cc <HAL_DMA_Abort_IT+0xe0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d012      	beq.n	800107e <HAL_DMA_Abort_IT+0x92>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <HAL_DMA_Abort_IT+0xe4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00a      	beq.n	8001078 <HAL_DMA_Abort_IT+0x8c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <HAL_DMA_Abort_IT+0xe8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d102      	bne.n	8001072 <HAL_DMA_Abort_IT+0x86>
 800106c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001070:	e00e      	b.n	8001090 <HAL_DMA_Abort_IT+0xa4>
 8001072:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001076:	e00b      	b.n	8001090 <HAL_DMA_Abort_IT+0xa4>
 8001078:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800107c:	e008      	b.n	8001090 <HAL_DMA_Abort_IT+0xa4>
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	e005      	b.n	8001090 <HAL_DMA_Abort_IT+0xa4>
 8001084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001088:	e002      	b.n	8001090 <HAL_DMA_Abort_IT+0xa4>
 800108a:	2310      	movs	r3, #16
 800108c:	e000      	b.n	8001090 <HAL_DMA_Abort_IT+0xa4>
 800108e:	2301      	movs	r3, #1
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <HAL_DMA_Abort_IT+0xec>)
 8001092:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	4798      	blx	r3
    } 
  }
  return status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020008 	.word	0x40020008
 80010c4:	4002001c 	.word	0x4002001c
 80010c8:	40020030 	.word	0x40020030
 80010cc:	40020044 	.word	0x40020044
 80010d0:	40020058 	.word	0x40020058
 80010d4:	4002006c 	.word	0x4002006c
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b08b      	sub	sp, #44	@ 0x2c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	e169      	b.n	80013c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f0:	2201      	movs	r2, #1
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 8158 	bne.w	80013be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a9a      	ldr	r2, [pc, #616]	@ (800137c <HAL_GPIO_Init+0x2a0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d05e      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001118:	4a98      	ldr	r2, [pc, #608]	@ (800137c <HAL_GPIO_Init+0x2a0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d875      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 800111e:	4a98      	ldr	r2, [pc, #608]	@ (8001380 <HAL_GPIO_Init+0x2a4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d058      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001124:	4a96      	ldr	r2, [pc, #600]	@ (8001380 <HAL_GPIO_Init+0x2a4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d86f      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 800112a:	4a96      	ldr	r2, [pc, #600]	@ (8001384 <HAL_GPIO_Init+0x2a8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d052      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001130:	4a94      	ldr	r2, [pc, #592]	@ (8001384 <HAL_GPIO_Init+0x2a8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d869      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 8001136:	4a94      	ldr	r2, [pc, #592]	@ (8001388 <HAL_GPIO_Init+0x2ac>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d04c      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 800113c:	4a92      	ldr	r2, [pc, #584]	@ (8001388 <HAL_GPIO_Init+0x2ac>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d863      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 8001142:	4a92      	ldr	r2, [pc, #584]	@ (800138c <HAL_GPIO_Init+0x2b0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d046      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001148:	4a90      	ldr	r2, [pc, #576]	@ (800138c <HAL_GPIO_Init+0x2b0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d85d      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d82a      	bhi.n	80011a8 <HAL_GPIO_Init+0xcc>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d859      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 8001156:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <HAL_GPIO_Init+0x80>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	080011d7 	.word	0x080011d7
 8001160:	080011b1 	.word	0x080011b1
 8001164:	080011c3 	.word	0x080011c3
 8001168:	08001205 	.word	0x08001205
 800116c:	0800120b 	.word	0x0800120b
 8001170:	0800120b 	.word	0x0800120b
 8001174:	0800120b 	.word	0x0800120b
 8001178:	0800120b 	.word	0x0800120b
 800117c:	0800120b 	.word	0x0800120b
 8001180:	0800120b 	.word	0x0800120b
 8001184:	0800120b 	.word	0x0800120b
 8001188:	0800120b 	.word	0x0800120b
 800118c:	0800120b 	.word	0x0800120b
 8001190:	0800120b 	.word	0x0800120b
 8001194:	0800120b 	.word	0x0800120b
 8001198:	0800120b 	.word	0x0800120b
 800119c:	0800120b 	.word	0x0800120b
 80011a0:	080011b9 	.word	0x080011b9
 80011a4:	080011cd 	.word	0x080011cd
 80011a8:	4a79      	ldr	r2, [pc, #484]	@ (8001390 <HAL_GPIO_Init+0x2b4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ae:	e02c      	b.n	800120a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	623b      	str	r3, [r7, #32]
          break;
 80011b6:	e029      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	3304      	adds	r3, #4
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e024      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	3308      	adds	r3, #8
 80011c8:	623b      	str	r3, [r7, #32]
          break;
 80011ca:	e01f      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	330c      	adds	r3, #12
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	e01a      	b.n	800120c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011de:	2304      	movs	r3, #4
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e013      	b.n	800120c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d105      	bne.n	80011f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	611a      	str	r2, [r3, #16]
          break;
 80011f6:	e009      	b.n	800120c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f8:	2308      	movs	r3, #8
 80011fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	615a      	str	r2, [r3, #20]
          break;
 8001202:	e003      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x130>
          break;
 800120a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2bff      	cmp	r3, #255	@ 0xff
 8001210:	d801      	bhi.n	8001216 <HAL_GPIO_Init+0x13a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	e001      	b.n	800121a <HAL_GPIO_Init+0x13e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2bff      	cmp	r3, #255	@ 0xff
 8001220:	d802      	bhi.n	8001228 <HAL_GPIO_Init+0x14c>
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	e002      	b.n	800122e <HAL_GPIO_Init+0x152>
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	3b08      	subs	r3, #8
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	210f      	movs	r1, #15
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	6a39      	ldr	r1, [r7, #32]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	431a      	orrs	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80b1 	beq.w	80013be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800125c:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <HAL_GPIO_Init+0x2b8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a4c      	ldr	r2, [pc, #304]	@ (8001394 <HAL_GPIO_Init+0x2b8>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <HAL_GPIO_Init+0x2b8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001274:	4a48      	ldr	r2, [pc, #288]	@ (8001398 <HAL_GPIO_Init+0x2bc>)
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a40      	ldr	r2, [pc, #256]	@ (800139c <HAL_GPIO_Init+0x2c0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d013      	beq.n	80012c8 <HAL_GPIO_Init+0x1ec>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a3f      	ldr	r2, [pc, #252]	@ (80013a0 <HAL_GPIO_Init+0x2c4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d00d      	beq.n	80012c4 <HAL_GPIO_Init+0x1e8>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a3e      	ldr	r2, [pc, #248]	@ (80013a4 <HAL_GPIO_Init+0x2c8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d007      	beq.n	80012c0 <HAL_GPIO_Init+0x1e4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a3d      	ldr	r2, [pc, #244]	@ (80013a8 <HAL_GPIO_Init+0x2cc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d101      	bne.n	80012bc <HAL_GPIO_Init+0x1e0>
 80012b8:	2303      	movs	r3, #3
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x1ee>
 80012bc:	2304      	movs	r3, #4
 80012be:	e004      	b.n	80012ca <HAL_GPIO_Init+0x1ee>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e002      	b.n	80012ca <HAL_GPIO_Init+0x1ee>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <HAL_GPIO_Init+0x1ee>
 80012c8:	2300      	movs	r3, #0
 80012ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012cc:	f002 0203 	and.w	r2, r2, #3
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	4093      	lsls	r3, r2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012da:	492f      	ldr	r1, [pc, #188]	@ (8001398 <HAL_GPIO_Init+0x2bc>)
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	492c      	ldr	r1, [pc, #176]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	43db      	mvns	r3, r3
 800130a:	4928      	ldr	r1, [pc, #160]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 800130c:	4013      	ands	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	4922      	ldr	r1, [pc, #136]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	60cb      	str	r3, [r1, #12]
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	491e      	ldr	r1, [pc, #120]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 8001334:	4013      	ands	r3, r2
 8001336:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4918      	ldr	r1, [pc, #96]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	4914      	ldr	r1, [pc, #80]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d021      	beq.n	80013b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	490e      	ldr	r1, [pc, #56]	@ (80013ac <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e021      	b.n	80013be <HAL_GPIO_Init+0x2e2>
 800137a:	bf00      	nop
 800137c:	10320000 	.word	0x10320000
 8001380:	10310000 	.word	0x10310000
 8001384:	10220000 	.word	0x10220000
 8001388:	10210000 	.word	0x10210000
 800138c:	10120000 	.word	0x10120000
 8001390:	10110000 	.word	0x10110000
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	40011000 	.word	0x40011000
 80013a8:	40011400 	.word	0x40011400
 80013ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_GPIO_Init+0x304>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	4909      	ldr	r1, [pc, #36]	@ (80013e0 <HAL_GPIO_Init+0x304>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	3301      	adds	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f47f ae8e 	bne.w	80010f0 <HAL_GPIO_Init+0x14>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	372c      	adds	r7, #44	@ 0x2c
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40010400 	.word	0x40010400

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	611a      	str	r2, [r3, #16]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e12b      	b.n	800167e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff faa4 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001478:	f001 fd1e 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a81      	ldr	r2, [pc, #516]	@ (8001688 <HAL_I2C_Init+0x274>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d807      	bhi.n	8001498 <HAL_I2C_Init+0x84>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a80      	ldr	r2, [pc, #512]	@ (800168c <HAL_I2C_Init+0x278>)
 800148c:	4293      	cmp	r3, r2
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e006      	b.n	80014a6 <HAL_I2C_Init+0x92>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4a7d      	ldr	r2, [pc, #500]	@ (8001690 <HAL_I2C_Init+0x27c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	bf94      	ite	ls
 80014a0:	2301      	movls	r3, #1
 80014a2:	2300      	movhi	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0e7      	b.n	800167e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a78      	ldr	r2, [pc, #480]	@ (8001694 <HAL_I2C_Init+0x280>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0c9b      	lsrs	r3, r3, #18
 80014b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <HAL_I2C_Init+0x274>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d802      	bhi.n	80014e8 <HAL_I2C_Init+0xd4>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	e009      	b.n	80014fc <HAL_I2C_Init+0xe8>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a69      	ldr	r2, [pc, #420]	@ (8001698 <HAL_I2C_Init+0x284>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	3301      	adds	r3, #1
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	430b      	orrs	r3, r1
 8001502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800150e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	495c      	ldr	r1, [pc, #368]	@ (8001688 <HAL_I2C_Init+0x274>)
 8001518:	428b      	cmp	r3, r1
 800151a:	d819      	bhi.n	8001550 <HAL_I2C_Init+0x13c>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e59      	subs	r1, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fbb1 f3f3 	udiv	r3, r1, r3
 800152a:	1c59      	adds	r1, r3, #1
 800152c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001530:	400b      	ands	r3, r1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <HAL_I2C_Init+0x138>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1e59      	subs	r1, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fbb1 f3f3 	udiv	r3, r1, r3
 8001544:	3301      	adds	r3, #1
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	e051      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 800154c:	2304      	movs	r3, #4
 800154e:	e04f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <HAL_I2C_Init+0x168>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	fbb0 f3f3 	udiv	r3, r0, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e012      	b.n	80015a2 <HAL_I2C_Init+0x18e>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	0099      	lsls	r1, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x196>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e022      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10e      	bne.n	80015d0 <HAL_I2C_Init+0x1bc>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1e58      	subs	r0, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	0099      	lsls	r1, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	6809      	ldr	r1, [r1, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800161e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6911      	ldr	r1, [r2, #16]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68d2      	ldr	r2, [r2, #12]
 800162a:	4311      	orrs	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	000186a0 	.word	0x000186a0
 800168c:	001e847f 	.word	0x001e847f
 8001690:	003d08ff 	.word	0x003d08ff
 8001694:	431bde83 	.word	0x431bde83
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	460b      	mov	r3, r1
 80016b0:	813b      	strh	r3, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016b6:	f7ff fb4d 	bl	8000d54 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 80d9 	bne.w	800187c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	496d      	ldr	r1, [pc, #436]	@ (8001888 <HAL_I2C_Mem_Write+0x1ec>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 fdef 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e0cc      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Mem_Write+0x56>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e0c5      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d007      	beq.n	8001718 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2221      	movs	r2, #33	@ 0x21
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	@ 0x40
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a4d      	ldr	r2, [pc, #308]	@ (800188c <HAL_I2C_Mem_Write+0x1f0>)
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fc26 	bl	8001fbc <I2C_RequestMemoryWrite>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d052      	beq.n	800181c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e081      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 feb4 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	2b04      	cmp	r3, #4
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06b      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d11b      	bne.n	800181c <HAL_I2C_Mem_Write+0x180>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1aa      	bne.n	800177a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fea7 	bl	800257c <I2C_WaitOnBTFFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	2b04      	cmp	r3, #4
 800183a:	d107      	bne.n	800184c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e016      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2220      	movs	r2, #32
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800187c:	2302      	movs	r3, #2
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00100002 	.word	0x00100002
 800188c:	ffff0000 	.word	0xffff0000

08001890 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	@ 0x30
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	817b      	strh	r3, [r7, #10]
 80018a2:	460b      	mov	r3, r1
 80018a4:	813b      	strh	r3, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ae:	f7ff fa51 	bl	8000d54 <HAL_GetTick>
 80018b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b20      	cmp	r3, #32
 80018be:	f040 8244 	bne.w	8001d4a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2319      	movs	r3, #25
 80018c8:	2201      	movs	r2, #1
 80018ca:	4982      	ldr	r1, [pc, #520]	@ (8001ad4 <HAL_I2C_Mem_Read+0x244>)
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fcf3 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80018d8:	2302      	movs	r3, #2
 80018da:	e237      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_I2C_Mem_Read+0x5a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e230      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d007      	beq.n	8001910 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2222      	movs	r2, #34	@ 0x22
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2240      	movs	r2, #64	@ 0x40
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a62      	ldr	r2, [pc, #392]	@ (8001ad8 <HAL_I2C_Mem_Read+0x248>)
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001952:	88f8      	ldrh	r0, [r7, #6]
 8001954:	893a      	ldrh	r2, [r7, #8]
 8001956:	8979      	ldrh	r1, [r7, #10]
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	4603      	mov	r3, r0
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fbc0 	bl	80020e8 <I2C_RequestMemoryRead>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1ec      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001976:	2b00      	cmp	r3, #0
 8001978:	d113      	bne.n	80019a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e1c0      	b.n	8001d24 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d11e      	bne.n	80019e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ba:	b672      	cpsid	i
}
 80019bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019e4:	b662      	cpsie	i
}
 80019e6:	e035      	b.n	8001a54 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d11e      	bne.n	8001a2e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a2a:	b662      	cpsie	i
}
 8001a2c:	e012      	b.n	8001a54 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a3c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a54:	e166      	b.n	8001d24 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	f200 811f 	bhi.w	8001c9e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d123      	bne.n	8001ab0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fdcd 	bl	800260c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e167      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001aae:	e139      	b.n	8001d24 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d152      	bne.n	8001b5e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4906      	ldr	r1, [pc, #24]	@ (8001adc <HAL_I2C_Mem_Read+0x24c>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fbf8 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e13c      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
 8001ad2:	bf00      	nop
 8001ad4:	00100002 	.word	0x00100002
 8001ad8:	ffff0000 	.word	0xffff0000
 8001adc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b26:	b662      	cpsie	i
}
 8001b28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b5c:	e0e2      	b.n	8001d24 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b64:	2200      	movs	r2, #0
 8001b66:	497b      	ldr	r1, [pc, #492]	@ (8001d54 <HAL_I2C_Mem_Read+0x4c4>)
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fba5 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e9      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001bbe:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <HAL_I2C_Mem_Read+0x4c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	4a65      	ldr	r2, [pc, #404]	@ (8001d5c <HAL_I2C_Mem_Read+0x4cc>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0a1a      	lsrs	r2, r3, #8
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00da      	lsls	r2, r3, #3
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d118      	bne.n	8001c16 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c06:	b662      	cpsie	i
}
 8001c08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e09a      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d1d9      	bne.n	8001bd8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c66:	b662      	cpsie	i
}
 8001c68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c9c:	e042      	b.n	8001d24 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fcb2 	bl	800260c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e04c      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d118      	bne.n	8001d24 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f ae94 	bne.w	8001a56 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
  }
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	00010004 	.word	0x00010004
 8001d58:	20000020 	.word	0x20000020
 8001d5c:	14f8b589 	.word	0x14f8b589

08001d60 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7fe fff0 	bl	8000d54 <HAL_GetTick>
 8001d74:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	f040 8111 	bne.w	8001faa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2319      	movs	r3, #25
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4988      	ldr	r1, [pc, #544]	@ (8001fb4 <HAL_I2C_IsDeviceReady+0x254>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fa90 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e104      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_I2C_IsDeviceReady+0x50>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0fd      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d007      	beq.n	8001dd6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2224      	movs	r2, #36	@ 0x24
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a70      	ldr	r2, [pc, #448]	@ (8001fb8 <HAL_I2C_IsDeviceReady+0x258>)
 8001df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e08:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fa4e 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00d      	beq.n	8001e3e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e30:	d103      	bne.n	8001e3a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0b6      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e3e:	897b      	ldrh	r3, [r7, #10]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e4c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ff81 	bl	8000d54 <HAL_GetTick>
 8001e52:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e82:	e025      	b.n	8001ed0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e84:	f7fe ff66 	bl	8000d54 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d302      	bcc.n	8001e9a <HAL_I2C_IsDeviceReady+0x13a>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	22a0      	movs	r2, #160	@ 0xa0
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eda:	d005      	beq.n	8001ee8 <HAL_I2C_IsDeviceReady+0x188>
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_I2C_IsDeviceReady+0x188>
 8001ee2:	7dbb      	ldrb	r3, [r7, #22]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0cd      	beq.n	8001e84 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d129      	bne.n	8001f52 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2319      	movs	r3, #25
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4921      	ldr	r1, [pc, #132]	@ (8001fb4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f9c2 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e036      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e02c      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f60:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f6a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2319      	movs	r3, #25
 8001f72:	2201      	movs	r2, #1
 8001f74:	490f      	ldr	r1, [pc, #60]	@ (8001fb4 <HAL_I2C_IsDeviceReady+0x254>)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 f99e 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e012      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	f4ff af32 	bcc.w	8001dfa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	00100002 	.word	0x00100002
 8001fb8:	ffff0000 	.word	0xffff0000

08001fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	817b      	strh	r3, [r7, #10]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	813b      	strh	r3, [r7, #8]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f960 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00d      	beq.n	800201a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800200c:	d103      	bne.n	8002016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e05f      	b.n	80020da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	6a3a      	ldr	r2, [r7, #32]
 800202e:	492d      	ldr	r1, [pc, #180]	@ (80020e4 <I2C_RequestMemoryWrite+0x128>)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f9bb 	bl	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e04c      	b.n	80020da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fa46 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	2b04      	cmp	r3, #4
 800206c:	d107      	bne.n	800207e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800207c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e02b      	b.n	80020da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002088:	893b      	ldrh	r3, [r7, #8]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	e021      	b.n	80020d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002094:	893b      	ldrh	r3, [r7, #8]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	b29b      	uxth	r3, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fa20 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d107      	bne.n	80020ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e005      	b.n	80020da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ce:	893b      	ldrh	r3, [r7, #8]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	00010002 	.word	0x00010002

080020e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	817b      	strh	r3, [r7, #10]
 80020fa:	460b      	mov	r3, r1
 80020fc:	813b      	strh	r3, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	2200      	movs	r2, #0
 800212a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f8c2 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002148:	d103      	bne.n	8002152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002150:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0aa      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002156:	897b      	ldrh	r3, [r7, #10]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	4952      	ldr	r1, [pc, #328]	@ (80022b4 <I2C_RequestMemoryRead+0x1cc>)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f91d 	bl	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e097      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002194:	6a39      	ldr	r1, [r7, #32]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f9a8 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d107      	bne.n	80021ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e076      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021c4:	893b      	ldrh	r3, [r7, #8]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	e021      	b.n	8002214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021d0:	893b      	ldrh	r3, [r7, #8]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e0:	6a39      	ldr	r1, [r7, #32]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f982 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d107      	bne.n	8002206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e050      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800220a:	893b      	ldrh	r3, [r7, #8]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002216:	6a39      	ldr	r1, [r7, #32]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f967 	bl	80024ec <I2C_WaitOnTXEFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00d      	beq.n	8002240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	2b04      	cmp	r3, #4
 800222a:	d107      	bne.n	800223c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e035      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800224e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	2200      	movs	r2, #0
 8002258:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f82b 	bl	80022b8 <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002276:	d103      	bne.n	8002280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e013      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002284:	897b      	ldrh	r3, [r7, #10]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	6a3a      	ldr	r2, [r7, #32]
 8002298:	4906      	ldr	r1, [pc, #24]	@ (80022b4 <I2C_RequestMemoryRead+0x1cc>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f886 	bl	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	00010002 	.word	0x00010002

080022b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c8:	e048      	b.n	800235c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d044      	beq.n	800235c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7fe fd3f 	bl	8000d54 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d139      	bne.n	800235c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d10d      	bne.n	800230e <I2C_WaitOnFlagUntilTimeout+0x56>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	43da      	mvns	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4013      	ands	r3, r2
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	e00c      	b.n	8002328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	43da      	mvns	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4013      	ands	r3, r2
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	429a      	cmp	r2, r3
 800232c:	d116      	bne.n	800235c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e023      	b.n	80023a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10d      	bne.n	8002382 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	43da      	mvns	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4013      	ands	r3, r2
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	e00c      	b.n	800239c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	43da      	mvns	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4013      	ands	r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d093      	beq.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ba:	e071      	b.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ca:	d123      	bne.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e067      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d041      	beq.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241c:	f7fe fc9a 	bl	8000d54 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d302      	bcc.n	8002432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d136      	bne.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10c      	bne.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4013      	ands	r3, r2
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	e00b      	b.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	43da      	mvns	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4013      	ands	r3, r2
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d016      	beq.n	80024a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e021      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10c      	bne.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	43da      	mvns	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4013      	ands	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e00b      	b.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f af6d 	bne.w	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024f8:	e034      	b.n	8002564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8e3 	bl	80026c6 <I2C_IsAcknowledgeFailed>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e034      	b.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d028      	beq.n	8002564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002512:	f7fe fc1f 	bl	8000d54 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	429a      	cmp	r2, r3
 8002520:	d302      	bcc.n	8002528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11d      	bne.n	8002564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002532:	2b80      	cmp	r3, #128	@ 0x80
 8002534:	d016      	beq.n	8002564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e007      	b.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256e:	2b80      	cmp	r3, #128	@ 0x80
 8002570:	d1c3      	bne.n	80024fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002588:	e034      	b.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f89b 	bl	80026c6 <I2C_IsAcknowledgeFailed>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e034      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d028      	beq.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a2:	f7fe fbd7 	bl	8000d54 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11d      	bne.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d016      	beq.n	80025f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e007      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d1c3      	bne.n	800258a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002618:	e049      	b.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d119      	bne.n	800265c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e030      	b.n	80026be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7fe fb7a 	bl	8000d54 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d11d      	bne.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b40      	cmp	r3, #64	@ 0x40
 800267e:	d016      	beq.n	80026ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f043 0220 	orr.w	r2, r3, #32
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e007      	b.n	80026be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d1ae      	bne.n	800261a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026dc:	d11b      	bne.n	8002716 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e272      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8087 	beq.w	8002852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002744:	4b92      	ldr	r3, [pc, #584]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b04      	cmp	r3, #4
 800274e:	d00c      	beq.n	800276a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002750:	4b8f      	ldr	r3, [pc, #572]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 030c 	and.w	r3, r3, #12
 8002758:	2b08      	cmp	r3, #8
 800275a:	d112      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
 800275c:	4b8c      	ldr	r3, [pc, #560]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002768:	d10b      	bne.n	8002782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	4b89      	ldr	r3, [pc, #548]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d06c      	beq.n	8002850 <HAL_RCC_OscConfig+0x12c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d168      	bne.n	8002850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e24c      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x76>
 800278c:	4b80      	ldr	r3, [pc, #512]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a7f      	ldr	r2, [pc, #508]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e02e      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x98>
 80027a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7a      	ldr	r2, [pc, #488]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b78      	ldr	r3, [pc, #480]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a77      	ldr	r2, [pc, #476]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e01d      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0xbc>
 80027c6:	4b72      	ldr	r3, [pc, #456]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a71      	ldr	r2, [pc, #452]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e00b      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b68      	ldr	r3, [pc, #416]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a67      	ldr	r2, [pc, #412]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe faa8 	bl	8000d54 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe faa4 	bl	8000d54 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	@ 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e200      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0xe4>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fa94 	bl	8000d54 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fa90 	bl	8000d54 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1ec      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002842:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x10c>
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d063      	beq.n	8002926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800285e:	4b4c      	ldr	r3, [pc, #304]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800286a:	4b49      	ldr	r3, [pc, #292]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b08      	cmp	r3, #8
 8002874:	d11c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x18c>
 8002876:	4b46      	ldr	r3, [pc, #280]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d116      	bne.n	80028b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e1c0      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289a:	4b3d      	ldr	r3, [pc, #244]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4939      	ldr	r1, [pc, #228]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	e03a      	b.n	8002926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d020      	beq.n	80028fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fa49 	bl	8000d54 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fe fa45 	bl	8000d54 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e1a1      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4927      	ldr	r1, [pc, #156]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fa:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fa28 	bl	8000d54 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fa24 	bl	8000d54 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e180      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d03a      	beq.n	80029a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <HAL_RCC_OscConfig+0x274>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002940:	f7fe fa08 	bl	8000d54 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002948:	f7fe fa04 	bl	8000d54 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e160      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_OscConfig+0x26c>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002966:	2001      	movs	r0, #1
 8002968:	f000 face 	bl	8002f08 <RCC_Delay>
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_RCC_OscConfig+0x274>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe f9ee 	bl	8000d54 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297a:	e00f      	b.n	800299c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe f9ea 	bl	8000d54 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d908      	bls.n	800299c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e146      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	42420000 	.word	0x42420000
 8002998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	4b92      	ldr	r3, [pc, #584]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e9      	bne.n	800297c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a6 	beq.w	8002b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ba:	4b8b      	ldr	r3, [pc, #556]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10d      	bne.n	80029e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b88      	ldr	r3, [pc, #544]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a87      	ldr	r2, [pc, #540]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]
 80029d2:	4b85      	ldr	r3, [pc, #532]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e2:	4b82      	ldr	r3, [pc, #520]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 80029f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fa:	f7fe f9ab 	bl	8000d54 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a02:	f7fe f9a7 	bl	8000d54 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b64      	cmp	r3, #100	@ 0x64
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e103      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <HAL_RCC_OscConfig+0x4c8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x312>
 8002a28:	4b6f      	ldr	r3, [pc, #444]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e02d      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x334>
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a69      	ldr	r2, [pc, #420]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4b67      	ldr	r3, [pc, #412]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a66      	ldr	r2, [pc, #408]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	e01c      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0x356>
 8002a60:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a60      	ldr	r2, [pc, #384]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	6213      	str	r3, [r2, #32]
 8002a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4a5d      	ldr	r2, [pc, #372]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	e00b      	b.n	8002a92 <HAL_RCC_OscConfig+0x36e>
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6213      	str	r3, [r2, #32]
 8002a86:	4b58      	ldr	r3, [pc, #352]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a57      	ldr	r2, [pc, #348]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d015      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe f95b 	bl	8000d54 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe f957 	bl	8000d54 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0b1      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ee      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x37e>
 8002ac4:	e014      	b.n	8002af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe f945 	bl	8000d54 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe f941 	bl	8000d54 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e09b      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	4b40      	ldr	r3, [pc, #256]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b3c      	ldr	r3, [pc, #240]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a3b      	ldr	r2, [pc, #236]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8087 	beq.w	8002c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d061      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d146      	bne.n	8002bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe f915 	bl	8000d54 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2e:	f7fe f911 	bl	8000d54 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e06d      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b40:	4b29      	ldr	r3, [pc, #164]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b56:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4921      	ldr	r1, [pc, #132]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b68:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a19      	ldr	r1, [r3, #32]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	491b      	ldr	r1, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe f8e5 	bl	8000d54 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe f8e1 	bl	8000d54 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e03d      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x46a>
 8002bac:	e035      	b.n	8002c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b10      	ldr	r3, [pc, #64]	@ (8002bf0 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f8ce 	bl	8000d54 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe f8ca 	bl	8000d54 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e026      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x498>
 8002bda:	e01e      	b.n	8002c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e019      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_OscConfig+0x500>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0d0      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d910      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b67      	ldr	r3, [pc, #412]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4965      	ldr	r1, [pc, #404]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c84:	4b59      	ldr	r3, [pc, #356]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a58      	ldr	r2, [pc, #352]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c9c:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca8:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	494d      	ldr	r1, [pc, #308]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d040      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d115      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e07f      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d107      	bne.n	8002cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce6:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d109      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e073      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e06b      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d06:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4936      	ldr	r1, [pc, #216]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d18:	f7fe f81c 	bl	8000d54 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe f818 	bl	8000d54 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e053      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 020c 	and.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1eb      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d210      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	4922      	ldr	r1, [pc, #136]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e032      	b.n	8002dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4916      	ldr	r1, [pc, #88]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	490e      	ldr	r1, [pc, #56]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db6:	f000 f821 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	490a      	ldr	r1, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	5ccb      	ldrb	r3, [r1, r3]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	4a09      	ldr	r2, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1cc>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_ClockConfig+0x1d0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd ff7a 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08004da0 	.word	0x08004da0
 8002df4:	20000020 	.word	0x20000020
 8002df8:	20000024 	.word	0x20000024

08002dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d002      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x30>
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d003      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x36>
 8002e2a:	e027      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e2e:	613b      	str	r3, [r7, #16]
      break;
 8002e30:	e027      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0c9b      	lsrs	r3, r3, #18
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0c5b      	lsrs	r3, r3, #17
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	4a11      	ldr	r2, [pc, #68]	@ (8002e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e5e:	fb03 f202 	mul.w	r2, r3, r2
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e004      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	613b      	str	r3, [r7, #16]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	613b      	str	r3, [r7, #16]
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	693b      	ldr	r3, [r7, #16]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	007a1200 	.word	0x007a1200
 8002e98:	08004db8 	.word	0x08004db8
 8002e9c:	08004dc8 	.word	0x08004dc8
 8002ea0:	003d0900 	.word	0x003d0900

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b02      	ldr	r3, [pc, #8]	@ (8002eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	20000020 	.word	0x20000020

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff2 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08004db0 	.word	0x08004db0

08002ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee4:	f7ff ffde 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0adb      	lsrs	r3, r3, #11
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08004db0 	.word	0x08004db0

08002f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f10:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <RCC_Delay+0x34>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <RCC_Delay+0x38>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0a5b      	lsrs	r3, r3, #9
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f24:	bf00      	nop
  }
  while (Delay --);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e5a      	subs	r2, r3, #1
 8002f2a:	60fa      	str	r2, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f9      	bne.n	8002f24 <RCC_Delay+0x1c>
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000020 	.word	0x20000020
 8002f40:	10624dd3 	.word	0x10624dd3

08002f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e041      	b.n	8002fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fd5c 	bl	8000a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f000 f992 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_TIM_PWM_Start+0x24>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	bf14      	ite	ne
 8003000:	2301      	movne	r3, #1
 8003002:	2300      	moveq	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e022      	b.n	800304e <HAL_TIM_PWM_Start+0x6a>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d109      	bne.n	8003022 <HAL_TIM_PWM_Start+0x3e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e015      	b.n	800304e <HAL_TIM_PWM_Start+0x6a>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start+0x58>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e008      	b.n	800304e <HAL_TIM_PWM_Start+0x6a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e05e      	b.n	8003114 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_TIM_PWM_Start+0x82>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003064:	e013      	b.n	800308e <HAL_TIM_PWM_Start+0xaa>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start+0x92>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003074:	e00b      	b.n	800308e <HAL_TIM_PWM_Start+0xaa>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d104      	bne.n	8003086 <HAL_TIM_PWM_Start+0xa2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003084:	e003      	b.n	800308e <HAL_TIM_PWM_Start+0xaa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2201      	movs	r2, #1
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 faf2 	bl	8003680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1e      	ldr	r2, [pc, #120]	@ (800311c <HAL_TIM_PWM_Start+0x138>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	@ (800311c <HAL_TIM_PWM_Start+0x138>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d00e      	beq.n	80030de <HAL_TIM_PWM_Start+0xfa>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c8:	d009      	beq.n	80030de <HAL_TIM_PWM_Start+0xfa>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <HAL_TIM_PWM_Start+0x13c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_TIM_PWM_Start+0xfa>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <HAL_TIM_PWM_Start+0x140>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d111      	bne.n	8003102 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b06      	cmp	r3, #6
 80030ee:	d010      	beq.n	8003112 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003100:	e007      	b.n	8003112 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40012c00 	.word	0x40012c00
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800

08003128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003142:	2302      	movs	r3, #2
 8003144:	e0ae      	b.n	80032a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	f200 809f 	bhi.w	8003294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003191 	.word	0x08003191
 8003160:	08003295 	.word	0x08003295
 8003164:	08003295 	.word	0x08003295
 8003168:	08003295 	.word	0x08003295
 800316c:	080031d1 	.word	0x080031d1
 8003170:	08003295 	.word	0x08003295
 8003174:	08003295 	.word	0x08003295
 8003178:	08003295 	.word	0x08003295
 800317c:	08003213 	.word	0x08003213
 8003180:	08003295 	.word	0x08003295
 8003184:	08003295 	.word	0x08003295
 8003188:	08003295 	.word	0x08003295
 800318c:	08003253 	.word	0x08003253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f8ea 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
      break;
 80031ce:	e064      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f930 	bl	800343c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	021a      	lsls	r2, r3, #8
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
      break;
 8003210:	e043      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f979 	bl	8003510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0208 	orr.w	r2, r2, #8
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
      break;
 8003250:	e023      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f9c3 	bl	80035e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800326c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	021a      	lsls	r2, r3, #8
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	61da      	str	r2, [r3, #28]
      break;
 8003292:	e002      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <TIM_Base_SetConfig+0xb8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00b      	beq.n	80032dc <TIM_Base_SetConfig+0x30>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x30>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a26      	ldr	r2, [pc, #152]	@ (8003368 <TIM_Base_SetConfig+0xbc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a25      	ldr	r2, [pc, #148]	@ (800336c <TIM_Base_SetConfig+0xc0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <TIM_Base_SetConfig+0xb8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0x62>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a19      	ldr	r2, [pc, #100]	@ (8003368 <TIM_Base_SetConfig+0xbc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a18      	ldr	r2, [pc, #96]	@ (800336c <TIM_Base_SetConfig+0xc0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <TIM_Base_SetConfig+0xb8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d103      	bne.n	8003354 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	615a      	str	r2, [r3, #20]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f023 0201 	bic.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003438 <TIM_OC1_SetConfig+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10c      	bne.n	80033e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0308 	bic.w	r3, r3, #8
 80033d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <TIM_OC1_SetConfig+0xc8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40012c00 	.word	0x40012c00

0800343c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f023 0210 	bic.w	r2, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0320 	bic.w	r3, r3, #32
 8003486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1d      	ldr	r2, [pc, #116]	@ (800350c <TIM_OC2_SetConfig+0xd0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10d      	bne.n	80034b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a14      	ldr	r2, [pc, #80]	@ (800350c <TIM_OC2_SetConfig+0xd0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d113      	bne.n	80034e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00

08003510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1d      	ldr	r2, [pc, #116]	@ (80035e0 <TIM_OC3_SetConfig+0xd0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10d      	bne.n	800358a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a14      	ldr	r2, [pc, #80]	@ (80035e0 <TIM_OC3_SetConfig+0xd0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d113      	bne.n	80035ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800362e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	031b      	lsls	r3, r3, #12
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0f      	ldr	r2, [pc, #60]	@ (800367c <TIM_OC4_SetConfig+0x98>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d109      	bne.n	8003658 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	40012c00 	.word	0x40012c00

08003680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2201      	movs	r2, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1a      	ldr	r2, [r3, #32]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	401a      	ands	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 031f 	and.w	r3, r3, #31
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e046      	b.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a12      	ldr	r2, [pc, #72]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a10      	ldr	r2, [pc, #64]	@ (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10c      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800

08003784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e042      	b.n	800381c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd f988 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	@ 0x24
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fd71 	bl	80042b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	@ 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	d16d      	bne.n	8003920 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_UART_Transmit+0x2c>
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e066      	b.n	8003922 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2221      	movs	r2, #33	@ 0x21
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003862:	f7fd fa77 	bl	8000d54 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387c:	d108      	bne.n	8003890 <HAL_UART_Transmit+0x6c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e003      	b.n	8003898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003898:	e02a      	b.n	80038f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2180      	movs	r1, #128	@ 0x80
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 faf9 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e036      	b.n	8003922 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	3302      	adds	r3, #2
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e007      	b.n	80038e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3301      	adds	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1cf      	bne.n	800389a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	2140      	movs	r1, #64	@ 0x40
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fac9 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e006      	b.n	8003922 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b0ba      	sub	sp, #232	@ 0xe8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800396a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_UART_IRQHandler+0x66>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fbd1 	bl	8004132 <UART_Receive_IT>
      return;
 8003990:	e25b      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80de 	beq.w	8003b58 <HAL_UART_IRQHandler+0x22c>
 800399c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80d1 	beq.w	8003b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_UART_IRQHandler+0xae>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_UART_IRQHandler+0xd2>
 80039e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xf6>
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d011      	beq.n	8003a52 <HAL_UART_IRQHandler+0x126>
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f043 0208 	orr.w	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 81f2 	beq.w	8003e40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_UART_IRQHandler+0x14e>
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fb5c 	bl	8004132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x17a>
 8003a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d04f      	beq.n	8003b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa66 	bl	8003f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d041      	beq.n	8003b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3314      	adds	r3, #20
 8003ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1d9      	bne.n	8003aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d013      	beq.n	8003b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	4a7e      	ldr	r2, [pc, #504]	@ (8003d0c <HAL_UART_IRQHandler+0x3e0>)
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fa66 	bl	8000fec <HAL_DMA_Abort_IT>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b30:	4610      	mov	r0, r2
 8003b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e00e      	b.n	8003b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f99c 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e00a      	b.n	8003b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f998 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	e006      	b.n	8003b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f994 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b52:	e175      	b.n	8003e40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	bf00      	nop
    return;
 8003b56:	e173      	b.n	8003e40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 814f 	bne.w	8003e00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8148 	beq.w	8003e00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8141 	beq.w	8003e00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80b6 	beq.w	8003d10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8145 	beq.w	8003e44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	f080 813e 	bcs.w	8003e44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	f000 8088 	beq.w	8003cec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bea:	e853 3f00 	ldrex	r3, [r3]
 8003bee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c08:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c14:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1d9      	bne.n	8003bdc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3314      	adds	r3, #20
 8003c48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c4c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e1      	bne.n	8003c28 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3314      	adds	r3, #20
 8003c6a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3314      	adds	r3, #20
 8003c84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c88:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c8e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e3      	bne.n	8003c64 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cbc:	f023 0310 	bic.w	r3, r3, #16
 8003cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cce:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cd0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e3      	bne.n	8003caa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd f945 	bl	8000f76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8bf 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d08:	e09c      	b.n	8003e44 <HAL_UART_IRQHandler+0x518>
 8003d0a:	bf00      	nop
 8003d0c:	0800403d 	.word	0x0800403d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 808e 	beq.w	8003e48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8089 	beq.w	8003e48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e3      	bne.n	8003d36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d92:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0310 	bic.w	r3, r3, #16
 8003dca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003dd8:	61fa      	str	r2, [r7, #28]
 8003dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	617b      	str	r3, [r7, #20]
   return(result);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e3      	bne.n	8003db4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f844 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dfe:	e023      	b.n	8003e48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_UART_IRQHandler+0x4f4>
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f923 	bl	8004064 <UART_Transmit_IT>
    return;
 8003e1e:	e014      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_UART_IRQHandler+0x51e>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f962 	bl	8004102 <UART_EndTransmit_IT>
    return;
 8003e3e:	e004      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e48:	bf00      	nop
  }
}
 8003e4a:	37e8      	adds	r7, #232	@ 0xe8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b090      	sub	sp, #64	@ 0x40
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	e050      	b.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d04c      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ebc:	f7fc ff4a 	bl	8000d54 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d241      	bcs.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eec:	637a      	str	r2, [r7, #52]	@ 0x34
 8003eee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e5      	bne.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f20:	623a      	str	r2, [r7, #32]
 8003f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	69f9      	ldr	r1, [r7, #28]
 8003f26:	6a3a      	ldr	r2, [r7, #32]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e00f      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d09f      	beq.n	8003eae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3740      	adds	r7, #64	@ 0x40
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b095      	sub	sp, #84	@ 0x54
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d119      	bne.n	8004024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f023 0310 	bic.w	r3, r3, #16
 8004006:	647b      	str	r3, [r7, #68]	@ 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004010:	61ba      	str	r2, [r7, #24]
 8004012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6979      	ldr	r1, [r7, #20]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	613b      	str	r3, [r7, #16]
   return(result);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e5      	bne.n	8003ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004032:	bf00      	nop
 8004034:	3754      	adds	r7, #84	@ 0x54
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ff0c 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b21      	cmp	r3, #33	@ 0x21
 8004076:	d13e      	bne.n	80040f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004080:	d114      	bne.n	80040ac <UART_Transmit_IT+0x48>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d110      	bne.n	80040ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800409e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	1c9a      	adds	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]
 80040aa:	e008      	b.n	80040be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	1c59      	adds	r1, r3, #1
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6211      	str	r1, [r2, #32]
 80040b6:	781a      	ldrb	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4619      	mov	r1, r3
 80040cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fe94 	bl	8003e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b08c      	sub	sp, #48	@ 0x30
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b22      	cmp	r3, #34	@ 0x22
 8004144:	f040 80ae 	bne.w	80042a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	d117      	bne.n	8004182 <UART_Receive_IT+0x50>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d113      	bne.n	8004182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	b29a      	uxth	r2, r3
 8004172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004180:	e026      	b.n	80041d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004194:	d007      	beq.n	80041a6 <UART_Receive_IT+0x74>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <UART_Receive_IT+0x82>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e008      	b.n	80041c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d15d      	bne.n	80042a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0220 	bic.w	r2, r2, #32
 80041f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	2b01      	cmp	r3, #1
 8004228:	d135      	bne.n	8004296 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	623a      	str	r2, [r7, #32]
 8004252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	61bb      	str	r3, [r7, #24]
   return(result);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d10a      	bne.n	8004288 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fdf9 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
 8004294:	e002      	b.n	800429c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fde3 	bl	8003e62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e002      	b.n	80042a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3730      	adds	r7, #48	@ 0x30
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80042ea:	f023 030c 	bic.w	r3, r3, #12
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2c      	ldr	r2, [pc, #176]	@ (80043c4 <UART_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7fe fde2 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	e002      	b.n	8004326 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe fdca 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8004324:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <UART_SetConfig+0x118>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	0119      	lsls	r1, r3, #4
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f2f3 	udiv	r2, r2, r3
 800435c:	4b1a      	ldr	r3, [pc, #104]	@ (80043c8 <UART_SetConfig+0x118>)
 800435e:	fba3 0302 	umull	r0, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2064      	movs	r0, #100	@ 0x64
 8004366:	fb00 f303 	mul.w	r3, r0, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3332      	adds	r3, #50	@ 0x32
 8004370:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <UART_SetConfig+0x118>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800437c:	4419      	add	r1, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009a      	lsls	r2, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	fbb2 f2f3 	udiv	r2, r2, r3
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <UART_SetConfig+0x118>)
 8004396:	fba3 0302 	umull	r0, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2064      	movs	r0, #100	@ 0x64
 800439e:	fb00 f303 	mul.w	r3, r0, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	@ 0x32
 80043a8:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <UART_SetConfig+0x118>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	440a      	add	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40013800 	.word	0x40013800
 80043c8:	51eb851f 	.word	0x51eb851f

080043cc <siprintf>:
 80043cc:	b40e      	push	{r1, r2, r3}
 80043ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043d2:	b500      	push	{lr}
 80043d4:	b09c      	sub	sp, #112	@ 0x70
 80043d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80043d8:	9002      	str	r0, [sp, #8]
 80043da:	9006      	str	r0, [sp, #24]
 80043dc:	9107      	str	r1, [sp, #28]
 80043de:	9104      	str	r1, [sp, #16]
 80043e0:	4808      	ldr	r0, [pc, #32]	@ (8004404 <siprintf+0x38>)
 80043e2:	4909      	ldr	r1, [pc, #36]	@ (8004408 <siprintf+0x3c>)
 80043e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e8:	9105      	str	r1, [sp, #20]
 80043ea:	6800      	ldr	r0, [r0, #0]
 80043ec:	a902      	add	r1, sp, #8
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	f000 f992 	bl	8004718 <_svfiprintf_r>
 80043f4:	2200      	movs	r2, #0
 80043f6:	9b02      	ldr	r3, [sp, #8]
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	b01c      	add	sp, #112	@ 0x70
 80043fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004400:	b003      	add	sp, #12
 8004402:	4770      	bx	lr
 8004404:	2000002c 	.word	0x2000002c
 8004408:	ffff0208 	.word	0xffff0208

0800440c <memset>:
 800440c:	4603      	mov	r3, r0
 800440e:	4402      	add	r2, r0
 8004410:	4293      	cmp	r3, r2
 8004412:	d100      	bne.n	8004416 <memset+0xa>
 8004414:	4770      	bx	lr
 8004416:	f803 1b01 	strb.w	r1, [r3], #1
 800441a:	e7f9      	b.n	8004410 <memset+0x4>

0800441c <__errno>:
 800441c:	4b01      	ldr	r3, [pc, #4]	@ (8004424 <__errno+0x8>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000002c 	.word	0x2000002c

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	2600      	movs	r6, #0
 800442c:	4d0c      	ldr	r5, [pc, #48]	@ (8004460 <__libc_init_array+0x38>)
 800442e:	4c0d      	ldr	r4, [pc, #52]	@ (8004464 <__libc_init_array+0x3c>)
 8004430:	1b64      	subs	r4, r4, r5
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	f000 fc78 	bl	8004d2c <_init>
 800443c:	2600      	movs	r6, #0
 800443e:	4d0a      	ldr	r5, [pc, #40]	@ (8004468 <__libc_init_array+0x40>)
 8004440:	4c0a      	ldr	r4, [pc, #40]	@ (800446c <__libc_init_array+0x44>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08004e08 	.word	0x08004e08
 8004464:	08004e08 	.word	0x08004e08
 8004468:	08004e08 	.word	0x08004e08
 800446c:	08004e0c 	.word	0x08004e0c

08004470 <__retarget_lock_acquire_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_release_recursive>:
 8004472:	4770      	bx	lr

08004474 <_free_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4605      	mov	r5, r0
 8004478:	2900      	cmp	r1, #0
 800447a:	d040      	beq.n	80044fe <_free_r+0x8a>
 800447c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004480:	1f0c      	subs	r4, r1, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfb8      	it	lt
 8004486:	18e4      	addlt	r4, r4, r3
 8004488:	f000 f8de 	bl	8004648 <__malloc_lock>
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <_free_r+0x8c>)
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	b933      	cbnz	r3, 80044a0 <_free_r+0x2c>
 8004492:	6063      	str	r3, [r4, #4]
 8004494:	6014      	str	r4, [r2, #0]
 8004496:	4628      	mov	r0, r5
 8004498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800449c:	f000 b8da 	b.w	8004654 <__malloc_unlock>
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d908      	bls.n	80044b6 <_free_r+0x42>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf01      	itttt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	1809      	addeq	r1, r1, r0
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	e7ed      	b.n	8004492 <_free_r+0x1e>
 80044b6:	461a      	mov	r2, r3
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	b10b      	cbz	r3, 80044c0 <_free_r+0x4c>
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d9fa      	bls.n	80044b6 <_free_r+0x42>
 80044c0:	6811      	ldr	r1, [r2, #0]
 80044c2:	1850      	adds	r0, r2, r1
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d10b      	bne.n	80044e0 <_free_r+0x6c>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	4401      	add	r1, r0
 80044cc:	1850      	adds	r0, r2, r1
 80044ce:	4283      	cmp	r3, r0
 80044d0:	6011      	str	r1, [r2, #0]
 80044d2:	d1e0      	bne.n	8004496 <_free_r+0x22>
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4408      	add	r0, r1
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	6053      	str	r3, [r2, #4]
 80044de:	e7da      	b.n	8004496 <_free_r+0x22>
 80044e0:	d902      	bls.n	80044e8 <_free_r+0x74>
 80044e2:	230c      	movs	r3, #12
 80044e4:	602b      	str	r3, [r5, #0]
 80044e6:	e7d6      	b.n	8004496 <_free_r+0x22>
 80044e8:	6820      	ldr	r0, [r4, #0]
 80044ea:	1821      	adds	r1, r4, r0
 80044ec:	428b      	cmp	r3, r1
 80044ee:	bf01      	itttt	eq
 80044f0:	6819      	ldreq	r1, [r3, #0]
 80044f2:	685b      	ldreq	r3, [r3, #4]
 80044f4:	1809      	addeq	r1, r1, r0
 80044f6:	6021      	streq	r1, [r4, #0]
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6054      	str	r4, [r2, #4]
 80044fc:	e7cb      	b.n	8004496 <_free_r+0x22>
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	200002cc 	.word	0x200002cc

08004504 <sbrk_aligned>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4e0f      	ldr	r6, [pc, #60]	@ (8004544 <sbrk_aligned+0x40>)
 8004508:	460c      	mov	r4, r1
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	4605      	mov	r5, r0
 800450e:	b911      	cbnz	r1, 8004516 <sbrk_aligned+0x12>
 8004510:	f000 fbaa 	bl	8004c68 <_sbrk_r>
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fba5 	bl	8004c68 <_sbrk_r>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d103      	bne.n	800452a <sbrk_aligned+0x26>
 8004522:	f04f 34ff 	mov.w	r4, #4294967295
 8004526:	4620      	mov	r0, r4
 8004528:	bd70      	pop	{r4, r5, r6, pc}
 800452a:	1cc4      	adds	r4, r0, #3
 800452c:	f024 0403 	bic.w	r4, r4, #3
 8004530:	42a0      	cmp	r0, r4
 8004532:	d0f8      	beq.n	8004526 <sbrk_aligned+0x22>
 8004534:	1a21      	subs	r1, r4, r0
 8004536:	4628      	mov	r0, r5
 8004538:	f000 fb96 	bl	8004c68 <_sbrk_r>
 800453c:	3001      	adds	r0, #1
 800453e:	d1f2      	bne.n	8004526 <sbrk_aligned+0x22>
 8004540:	e7ef      	b.n	8004522 <sbrk_aligned+0x1e>
 8004542:	bf00      	nop
 8004544:	200002c8 	.word	0x200002c8

08004548 <_malloc_r>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	1ccd      	adds	r5, r1, #3
 800454e:	f025 0503 	bic.w	r5, r5, #3
 8004552:	3508      	adds	r5, #8
 8004554:	2d0c      	cmp	r5, #12
 8004556:	bf38      	it	cc
 8004558:	250c      	movcc	r5, #12
 800455a:	2d00      	cmp	r5, #0
 800455c:	4606      	mov	r6, r0
 800455e:	db01      	blt.n	8004564 <_malloc_r+0x1c>
 8004560:	42a9      	cmp	r1, r5
 8004562:	d904      	bls.n	800456e <_malloc_r+0x26>
 8004564:	230c      	movs	r3, #12
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	2000      	movs	r0, #0
 800456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004644 <_malloc_r+0xfc>
 8004572:	f000 f869 	bl	8004648 <__malloc_lock>
 8004576:	f8d8 3000 	ldr.w	r3, [r8]
 800457a:	461c      	mov	r4, r3
 800457c:	bb44      	cbnz	r4, 80045d0 <_malloc_r+0x88>
 800457e:	4629      	mov	r1, r5
 8004580:	4630      	mov	r0, r6
 8004582:	f7ff ffbf 	bl	8004504 <sbrk_aligned>
 8004586:	1c43      	adds	r3, r0, #1
 8004588:	4604      	mov	r4, r0
 800458a:	d158      	bne.n	800463e <_malloc_r+0xf6>
 800458c:	f8d8 4000 	ldr.w	r4, [r8]
 8004590:	4627      	mov	r7, r4
 8004592:	2f00      	cmp	r7, #0
 8004594:	d143      	bne.n	800461e <_malloc_r+0xd6>
 8004596:	2c00      	cmp	r4, #0
 8004598:	d04b      	beq.n	8004632 <_malloc_r+0xea>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	4639      	mov	r1, r7
 800459e:	4630      	mov	r0, r6
 80045a0:	eb04 0903 	add.w	r9, r4, r3
 80045a4:	f000 fb60 	bl	8004c68 <_sbrk_r>
 80045a8:	4581      	cmp	r9, r0
 80045aa:	d142      	bne.n	8004632 <_malloc_r+0xea>
 80045ac:	6821      	ldr	r1, [r4, #0]
 80045ae:	4630      	mov	r0, r6
 80045b0:	1a6d      	subs	r5, r5, r1
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7ff ffa6 	bl	8004504 <sbrk_aligned>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d03a      	beq.n	8004632 <_malloc_r+0xea>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	442b      	add	r3, r5
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	f8d8 3000 	ldr.w	r3, [r8]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	bb62      	cbnz	r2, 8004624 <_malloc_r+0xdc>
 80045ca:	f8c8 7000 	str.w	r7, [r8]
 80045ce:	e00f      	b.n	80045f0 <_malloc_r+0xa8>
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	1b52      	subs	r2, r2, r5
 80045d4:	d420      	bmi.n	8004618 <_malloc_r+0xd0>
 80045d6:	2a0b      	cmp	r2, #11
 80045d8:	d917      	bls.n	800460a <_malloc_r+0xc2>
 80045da:	1961      	adds	r1, r4, r5
 80045dc:	42a3      	cmp	r3, r4
 80045de:	6025      	str	r5, [r4, #0]
 80045e0:	bf18      	it	ne
 80045e2:	6059      	strne	r1, [r3, #4]
 80045e4:	6863      	ldr	r3, [r4, #4]
 80045e6:	bf08      	it	eq
 80045e8:	f8c8 1000 	streq.w	r1, [r8]
 80045ec:	5162      	str	r2, [r4, r5]
 80045ee:	604b      	str	r3, [r1, #4]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f82f 	bl	8004654 <__malloc_unlock>
 80045f6:	f104 000b 	add.w	r0, r4, #11
 80045fa:	1d23      	adds	r3, r4, #4
 80045fc:	f020 0007 	bic.w	r0, r0, #7
 8004600:	1ac2      	subs	r2, r0, r3
 8004602:	bf1c      	itt	ne
 8004604:	1a1b      	subne	r3, r3, r0
 8004606:	50a3      	strne	r3, [r4, r2]
 8004608:	e7af      	b.n	800456a <_malloc_r+0x22>
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	42a3      	cmp	r3, r4
 800460e:	bf0c      	ite	eq
 8004610:	f8c8 2000 	streq.w	r2, [r8]
 8004614:	605a      	strne	r2, [r3, #4]
 8004616:	e7eb      	b.n	80045f0 <_malloc_r+0xa8>
 8004618:	4623      	mov	r3, r4
 800461a:	6864      	ldr	r4, [r4, #4]
 800461c:	e7ae      	b.n	800457c <_malloc_r+0x34>
 800461e:	463c      	mov	r4, r7
 8004620:	687f      	ldr	r7, [r7, #4]
 8004622:	e7b6      	b.n	8004592 <_malloc_r+0x4a>
 8004624:	461a      	mov	r2, r3
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	42a3      	cmp	r3, r4
 800462a:	d1fb      	bne.n	8004624 <_malloc_r+0xdc>
 800462c:	2300      	movs	r3, #0
 800462e:	6053      	str	r3, [r2, #4]
 8004630:	e7de      	b.n	80045f0 <_malloc_r+0xa8>
 8004632:	230c      	movs	r3, #12
 8004634:	4630      	mov	r0, r6
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f000 f80c 	bl	8004654 <__malloc_unlock>
 800463c:	e794      	b.n	8004568 <_malloc_r+0x20>
 800463e:	6005      	str	r5, [r0, #0]
 8004640:	e7d6      	b.n	80045f0 <_malloc_r+0xa8>
 8004642:	bf00      	nop
 8004644:	200002cc 	.word	0x200002cc

08004648 <__malloc_lock>:
 8004648:	4801      	ldr	r0, [pc, #4]	@ (8004650 <__malloc_lock+0x8>)
 800464a:	f7ff bf11 	b.w	8004470 <__retarget_lock_acquire_recursive>
 800464e:	bf00      	nop
 8004650:	200002c4 	.word	0x200002c4

08004654 <__malloc_unlock>:
 8004654:	4801      	ldr	r0, [pc, #4]	@ (800465c <__malloc_unlock+0x8>)
 8004656:	f7ff bf0c 	b.w	8004472 <__retarget_lock_release_recursive>
 800465a:	bf00      	nop
 800465c:	200002c4 	.word	0x200002c4

08004660 <__ssputs_r>:
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	461f      	mov	r7, r3
 8004666:	688e      	ldr	r6, [r1, #8]
 8004668:	4682      	mov	sl, r0
 800466a:	42be      	cmp	r6, r7
 800466c:	460c      	mov	r4, r1
 800466e:	4690      	mov	r8, r2
 8004670:	680b      	ldr	r3, [r1, #0]
 8004672:	d82d      	bhi.n	80046d0 <__ssputs_r+0x70>
 8004674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800467c:	d026      	beq.n	80046cc <__ssputs_r+0x6c>
 800467e:	6965      	ldr	r5, [r4, #20]
 8004680:	6909      	ldr	r1, [r1, #16]
 8004682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004686:	eba3 0901 	sub.w	r9, r3, r1
 800468a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800468e:	1c7b      	adds	r3, r7, #1
 8004690:	444b      	add	r3, r9
 8004692:	106d      	asrs	r5, r5, #1
 8004694:	429d      	cmp	r5, r3
 8004696:	bf38      	it	cc
 8004698:	461d      	movcc	r5, r3
 800469a:	0553      	lsls	r3, r2, #21
 800469c:	d527      	bpl.n	80046ee <__ssputs_r+0x8e>
 800469e:	4629      	mov	r1, r5
 80046a0:	f7ff ff52 	bl	8004548 <_malloc_r>
 80046a4:	4606      	mov	r6, r0
 80046a6:	b360      	cbz	r0, 8004702 <__ssputs_r+0xa2>
 80046a8:	464a      	mov	r2, r9
 80046aa:	6921      	ldr	r1, [r4, #16]
 80046ac:	f000 fafa 	bl	8004ca4 <memcpy>
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ba:	81a3      	strh	r3, [r4, #12]
 80046bc:	6126      	str	r6, [r4, #16]
 80046be:	444e      	add	r6, r9
 80046c0:	6026      	str	r6, [r4, #0]
 80046c2:	463e      	mov	r6, r7
 80046c4:	6165      	str	r5, [r4, #20]
 80046c6:	eba5 0509 	sub.w	r5, r5, r9
 80046ca:	60a5      	str	r5, [r4, #8]
 80046cc:	42be      	cmp	r6, r7
 80046ce:	d900      	bls.n	80046d2 <__ssputs_r+0x72>
 80046d0:	463e      	mov	r6, r7
 80046d2:	4632      	mov	r2, r6
 80046d4:	4641      	mov	r1, r8
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	f000 faac 	bl	8004c34 <memmove>
 80046dc:	2000      	movs	r0, #0
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	1b9b      	subs	r3, r3, r6
 80046e2:	60a3      	str	r3, [r4, #8]
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	4433      	add	r3, r6
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ee:	462a      	mov	r2, r5
 80046f0:	f000 fae6 	bl	8004cc0 <_realloc_r>
 80046f4:	4606      	mov	r6, r0
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d1e0      	bne.n	80046bc <__ssputs_r+0x5c>
 80046fa:	4650      	mov	r0, sl
 80046fc:	6921      	ldr	r1, [r4, #16]
 80046fe:	f7ff feb9 	bl	8004474 <_free_r>
 8004702:	230c      	movs	r3, #12
 8004704:	f8ca 3000 	str.w	r3, [sl]
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	e7e9      	b.n	80046ea <__ssputs_r+0x8a>
	...

08004718 <_svfiprintf_r>:
 8004718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	4698      	mov	r8, r3
 800471e:	898b      	ldrh	r3, [r1, #12]
 8004720:	4607      	mov	r7, r0
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	460d      	mov	r5, r1
 8004726:	4614      	mov	r4, r2
 8004728:	b09d      	sub	sp, #116	@ 0x74
 800472a:	d510      	bpl.n	800474e <_svfiprintf_r+0x36>
 800472c:	690b      	ldr	r3, [r1, #16]
 800472e:	b973      	cbnz	r3, 800474e <_svfiprintf_r+0x36>
 8004730:	2140      	movs	r1, #64	@ 0x40
 8004732:	f7ff ff09 	bl	8004548 <_malloc_r>
 8004736:	6028      	str	r0, [r5, #0]
 8004738:	6128      	str	r0, [r5, #16]
 800473a:	b930      	cbnz	r0, 800474a <_svfiprintf_r+0x32>
 800473c:	230c      	movs	r3, #12
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	b01d      	add	sp, #116	@ 0x74
 8004746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474a:	2340      	movs	r3, #64	@ 0x40
 800474c:	616b      	str	r3, [r5, #20]
 800474e:	2300      	movs	r3, #0
 8004750:	9309      	str	r3, [sp, #36]	@ 0x24
 8004752:	2320      	movs	r3, #32
 8004754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004758:	2330      	movs	r3, #48	@ 0x30
 800475a:	f04f 0901 	mov.w	r9, #1
 800475e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004762:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80048fc <_svfiprintf_r+0x1e4>
 8004766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800476a:	4623      	mov	r3, r4
 800476c:	469a      	mov	sl, r3
 800476e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004772:	b10a      	cbz	r2, 8004778 <_svfiprintf_r+0x60>
 8004774:	2a25      	cmp	r2, #37	@ 0x25
 8004776:	d1f9      	bne.n	800476c <_svfiprintf_r+0x54>
 8004778:	ebba 0b04 	subs.w	fp, sl, r4
 800477c:	d00b      	beq.n	8004796 <_svfiprintf_r+0x7e>
 800477e:	465b      	mov	r3, fp
 8004780:	4622      	mov	r2, r4
 8004782:	4629      	mov	r1, r5
 8004784:	4638      	mov	r0, r7
 8004786:	f7ff ff6b 	bl	8004660 <__ssputs_r>
 800478a:	3001      	adds	r0, #1
 800478c:	f000 80a7 	beq.w	80048de <_svfiprintf_r+0x1c6>
 8004790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004792:	445a      	add	r2, fp
 8004794:	9209      	str	r2, [sp, #36]	@ 0x24
 8004796:	f89a 3000 	ldrb.w	r3, [sl]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 809f 	beq.w	80048de <_svfiprintf_r+0x1c6>
 80047a0:	2300      	movs	r3, #0
 80047a2:	f04f 32ff 	mov.w	r2, #4294967295
 80047a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047aa:	f10a 0a01 	add.w	sl, sl, #1
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	9307      	str	r3, [sp, #28]
 80047b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80047b8:	4654      	mov	r4, sl
 80047ba:	2205      	movs	r2, #5
 80047bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c0:	484e      	ldr	r0, [pc, #312]	@ (80048fc <_svfiprintf_r+0x1e4>)
 80047c2:	f000 fa61 	bl	8004c88 <memchr>
 80047c6:	9a04      	ldr	r2, [sp, #16]
 80047c8:	b9d8      	cbnz	r0, 8004802 <_svfiprintf_r+0xea>
 80047ca:	06d0      	lsls	r0, r2, #27
 80047cc:	bf44      	itt	mi
 80047ce:	2320      	movmi	r3, #32
 80047d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047d4:	0711      	lsls	r1, r2, #28
 80047d6:	bf44      	itt	mi
 80047d8:	232b      	movmi	r3, #43	@ 0x2b
 80047da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047de:	f89a 3000 	ldrb.w	r3, [sl]
 80047e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80047e4:	d015      	beq.n	8004812 <_svfiprintf_r+0xfa>
 80047e6:	4654      	mov	r4, sl
 80047e8:	2000      	movs	r0, #0
 80047ea:	f04f 0c0a 	mov.w	ip, #10
 80047ee:	9a07      	ldr	r2, [sp, #28]
 80047f0:	4621      	mov	r1, r4
 80047f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f6:	3b30      	subs	r3, #48	@ 0x30
 80047f8:	2b09      	cmp	r3, #9
 80047fa:	d94b      	bls.n	8004894 <_svfiprintf_r+0x17c>
 80047fc:	b1b0      	cbz	r0, 800482c <_svfiprintf_r+0x114>
 80047fe:	9207      	str	r2, [sp, #28]
 8004800:	e014      	b.n	800482c <_svfiprintf_r+0x114>
 8004802:	eba0 0308 	sub.w	r3, r0, r8
 8004806:	fa09 f303 	lsl.w	r3, r9, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	46a2      	mov	sl, r4
 800480e:	9304      	str	r3, [sp, #16]
 8004810:	e7d2      	b.n	80047b8 <_svfiprintf_r+0xa0>
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	1d19      	adds	r1, r3, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	9103      	str	r1, [sp, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	bfbb      	ittet	lt
 800481e:	425b      	neglt	r3, r3
 8004820:	f042 0202 	orrlt.w	r2, r2, #2
 8004824:	9307      	strge	r3, [sp, #28]
 8004826:	9307      	strlt	r3, [sp, #28]
 8004828:	bfb8      	it	lt
 800482a:	9204      	strlt	r2, [sp, #16]
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004830:	d10a      	bne.n	8004848 <_svfiprintf_r+0x130>
 8004832:	7863      	ldrb	r3, [r4, #1]
 8004834:	2b2a      	cmp	r3, #42	@ 0x2a
 8004836:	d132      	bne.n	800489e <_svfiprintf_r+0x186>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	3402      	adds	r4, #2
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	9203      	str	r2, [sp, #12]
 8004842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004900 <_svfiprintf_r+0x1e8>
 800484c:	2203      	movs	r2, #3
 800484e:	4650      	mov	r0, sl
 8004850:	7821      	ldrb	r1, [r4, #0]
 8004852:	f000 fa19 	bl	8004c88 <memchr>
 8004856:	b138      	cbz	r0, 8004868 <_svfiprintf_r+0x150>
 8004858:	2240      	movs	r2, #64	@ 0x40
 800485a:	9b04      	ldr	r3, [sp, #16]
 800485c:	eba0 000a 	sub.w	r0, r0, sl
 8004860:	4082      	lsls	r2, r0
 8004862:	4313      	orrs	r3, r2
 8004864:	3401      	adds	r4, #1
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486c:	2206      	movs	r2, #6
 800486e:	4825      	ldr	r0, [pc, #148]	@ (8004904 <_svfiprintf_r+0x1ec>)
 8004870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004874:	f000 fa08 	bl	8004c88 <memchr>
 8004878:	2800      	cmp	r0, #0
 800487a:	d036      	beq.n	80048ea <_svfiprintf_r+0x1d2>
 800487c:	4b22      	ldr	r3, [pc, #136]	@ (8004908 <_svfiprintf_r+0x1f0>)
 800487e:	bb1b      	cbnz	r3, 80048c8 <_svfiprintf_r+0x1b0>
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	3307      	adds	r3, #7
 8004884:	f023 0307 	bic.w	r3, r3, #7
 8004888:	3308      	adds	r3, #8
 800488a:	9303      	str	r3, [sp, #12]
 800488c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800488e:	4433      	add	r3, r6
 8004890:	9309      	str	r3, [sp, #36]	@ 0x24
 8004892:	e76a      	b.n	800476a <_svfiprintf_r+0x52>
 8004894:	460c      	mov	r4, r1
 8004896:	2001      	movs	r0, #1
 8004898:	fb0c 3202 	mla	r2, ip, r2, r3
 800489c:	e7a8      	b.n	80047f0 <_svfiprintf_r+0xd8>
 800489e:	2300      	movs	r3, #0
 80048a0:	f04f 0c0a 	mov.w	ip, #10
 80048a4:	4619      	mov	r1, r3
 80048a6:	3401      	adds	r4, #1
 80048a8:	9305      	str	r3, [sp, #20]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b0:	3a30      	subs	r2, #48	@ 0x30
 80048b2:	2a09      	cmp	r2, #9
 80048b4:	d903      	bls.n	80048be <_svfiprintf_r+0x1a6>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0c6      	beq.n	8004848 <_svfiprintf_r+0x130>
 80048ba:	9105      	str	r1, [sp, #20]
 80048bc:	e7c4      	b.n	8004848 <_svfiprintf_r+0x130>
 80048be:	4604      	mov	r4, r0
 80048c0:	2301      	movs	r3, #1
 80048c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048c6:	e7f0      	b.n	80048aa <_svfiprintf_r+0x192>
 80048c8:	ab03      	add	r3, sp, #12
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	462a      	mov	r2, r5
 80048ce:	4638      	mov	r0, r7
 80048d0:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <_svfiprintf_r+0x1f4>)
 80048d2:	a904      	add	r1, sp, #16
 80048d4:	f3af 8000 	nop.w
 80048d8:	1c42      	adds	r2, r0, #1
 80048da:	4606      	mov	r6, r0
 80048dc:	d1d6      	bne.n	800488c <_svfiprintf_r+0x174>
 80048de:	89ab      	ldrh	r3, [r5, #12]
 80048e0:	065b      	lsls	r3, r3, #25
 80048e2:	f53f af2d 	bmi.w	8004740 <_svfiprintf_r+0x28>
 80048e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048e8:	e72c      	b.n	8004744 <_svfiprintf_r+0x2c>
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	462a      	mov	r2, r5
 80048f0:	4638      	mov	r0, r7
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <_svfiprintf_r+0x1f4>)
 80048f4:	a904      	add	r1, sp, #16
 80048f6:	f000 f87d 	bl	80049f4 <_printf_i>
 80048fa:	e7ed      	b.n	80048d8 <_svfiprintf_r+0x1c0>
 80048fc:	08004dca 	.word	0x08004dca
 8004900:	08004dd0 	.word	0x08004dd0
 8004904:	08004dd4 	.word	0x08004dd4
 8004908:	00000000 	.word	0x00000000
 800490c:	08004661 	.word	0x08004661

08004910 <_printf_common>:
 8004910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	4616      	mov	r6, r2
 8004916:	4698      	mov	r8, r3
 8004918:	688a      	ldr	r2, [r1, #8]
 800491a:	690b      	ldr	r3, [r1, #16]
 800491c:	4607      	mov	r7, r0
 800491e:	4293      	cmp	r3, r2
 8004920:	bfb8      	it	lt
 8004922:	4613      	movlt	r3, r2
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800492a:	460c      	mov	r4, r1
 800492c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004930:	b10a      	cbz	r2, 8004936 <_printf_common+0x26>
 8004932:	3301      	adds	r3, #1
 8004934:	6033      	str	r3, [r6, #0]
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	0699      	lsls	r1, r3, #26
 800493a:	bf42      	ittt	mi
 800493c:	6833      	ldrmi	r3, [r6, #0]
 800493e:	3302      	addmi	r3, #2
 8004940:	6033      	strmi	r3, [r6, #0]
 8004942:	6825      	ldr	r5, [r4, #0]
 8004944:	f015 0506 	ands.w	r5, r5, #6
 8004948:	d106      	bne.n	8004958 <_printf_common+0x48>
 800494a:	f104 0a19 	add.w	sl, r4, #25
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	6832      	ldr	r2, [r6, #0]
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	42ab      	cmp	r3, r5
 8004956:	dc2b      	bgt.n	80049b0 <_printf_common+0xa0>
 8004958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800495c:	6822      	ldr	r2, [r4, #0]
 800495e:	3b00      	subs	r3, #0
 8004960:	bf18      	it	ne
 8004962:	2301      	movne	r3, #1
 8004964:	0692      	lsls	r2, r2, #26
 8004966:	d430      	bmi.n	80049ca <_printf_common+0xba>
 8004968:	4641      	mov	r1, r8
 800496a:	4638      	mov	r0, r7
 800496c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004970:	47c8      	blx	r9
 8004972:	3001      	adds	r0, #1
 8004974:	d023      	beq.n	80049be <_printf_common+0xae>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	6922      	ldr	r2, [r4, #16]
 800497a:	f003 0306 	and.w	r3, r3, #6
 800497e:	2b04      	cmp	r3, #4
 8004980:	bf14      	ite	ne
 8004982:	2500      	movne	r5, #0
 8004984:	6833      	ldreq	r3, [r6, #0]
 8004986:	f04f 0600 	mov.w	r6, #0
 800498a:	bf08      	it	eq
 800498c:	68e5      	ldreq	r5, [r4, #12]
 800498e:	f104 041a 	add.w	r4, r4, #26
 8004992:	bf08      	it	eq
 8004994:	1aed      	subeq	r5, r5, r3
 8004996:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800499a:	bf08      	it	eq
 800499c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bfc4      	itt	gt
 80049a4:	1a9b      	subgt	r3, r3, r2
 80049a6:	18ed      	addgt	r5, r5, r3
 80049a8:	42b5      	cmp	r5, r6
 80049aa:	d11a      	bne.n	80049e2 <_printf_common+0xd2>
 80049ac:	2000      	movs	r0, #0
 80049ae:	e008      	b.n	80049c2 <_printf_common+0xb2>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4652      	mov	r2, sl
 80049b4:	4641      	mov	r1, r8
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c8      	blx	r9
 80049ba:	3001      	adds	r0, #1
 80049bc:	d103      	bne.n	80049c6 <_printf_common+0xb6>
 80049be:	f04f 30ff 	mov.w	r0, #4294967295
 80049c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c6:	3501      	adds	r5, #1
 80049c8:	e7c1      	b.n	800494e <_printf_common+0x3e>
 80049ca:	2030      	movs	r0, #48	@ 0x30
 80049cc:	18e1      	adds	r1, r4, r3
 80049ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049d8:	4422      	add	r2, r4
 80049da:	3302      	adds	r3, #2
 80049dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049e0:	e7c2      	b.n	8004968 <_printf_common+0x58>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4622      	mov	r2, r4
 80049e6:	4641      	mov	r1, r8
 80049e8:	4638      	mov	r0, r7
 80049ea:	47c8      	blx	r9
 80049ec:	3001      	adds	r0, #1
 80049ee:	d0e6      	beq.n	80049be <_printf_common+0xae>
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7d9      	b.n	80049a8 <_printf_common+0x98>

080049f4 <_printf_i>:
 80049f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	7e0f      	ldrb	r7, [r1, #24]
 80049fa:	4691      	mov	r9, r2
 80049fc:	2f78      	cmp	r7, #120	@ 0x78
 80049fe:	4680      	mov	r8, r0
 8004a00:	460c      	mov	r4, r1
 8004a02:	469a      	mov	sl, r3
 8004a04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a0a:	d807      	bhi.n	8004a1c <_printf_i+0x28>
 8004a0c:	2f62      	cmp	r7, #98	@ 0x62
 8004a0e:	d80a      	bhi.n	8004a26 <_printf_i+0x32>
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	f000 80d3 	beq.w	8004bbc <_printf_i+0x1c8>
 8004a16:	2f58      	cmp	r7, #88	@ 0x58
 8004a18:	f000 80ba 	beq.w	8004b90 <_printf_i+0x19c>
 8004a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a24:	e03a      	b.n	8004a9c <_printf_i+0xa8>
 8004a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a2a:	2b15      	cmp	r3, #21
 8004a2c:	d8f6      	bhi.n	8004a1c <_printf_i+0x28>
 8004a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004a34 <_printf_i+0x40>)
 8004a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a34:	08004a8d 	.word	0x08004a8d
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004a1d 	.word	0x08004a1d
 8004a40:	08004a1d 	.word	0x08004a1d
 8004a44:	08004a1d 	.word	0x08004a1d
 8004a48:	08004a1d 	.word	0x08004a1d
 8004a4c:	08004aa1 	.word	0x08004aa1
 8004a50:	08004a1d 	.word	0x08004a1d
 8004a54:	08004a1d 	.word	0x08004a1d
 8004a58:	08004a1d 	.word	0x08004a1d
 8004a5c:	08004a1d 	.word	0x08004a1d
 8004a60:	08004ba3 	.word	0x08004ba3
 8004a64:	08004acb 	.word	0x08004acb
 8004a68:	08004b5d 	.word	0x08004b5d
 8004a6c:	08004a1d 	.word	0x08004a1d
 8004a70:	08004a1d 	.word	0x08004a1d
 8004a74:	08004bc5 	.word	0x08004bc5
 8004a78:	08004a1d 	.word	0x08004a1d
 8004a7c:	08004acb 	.word	0x08004acb
 8004a80:	08004a1d 	.word	0x08004a1d
 8004a84:	08004a1d 	.word	0x08004a1d
 8004a88:	08004b65 	.word	0x08004b65
 8004a8c:	6833      	ldr	r3, [r6, #0]
 8004a8e:	1d1a      	adds	r2, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6032      	str	r2, [r6, #0]
 8004a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e09e      	b.n	8004bde <_printf_i+0x1ea>
 8004aa0:	6833      	ldr	r3, [r6, #0]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	1d19      	adds	r1, r3, #4
 8004aa6:	6031      	str	r1, [r6, #0]
 8004aa8:	0606      	lsls	r6, r0, #24
 8004aaa:	d501      	bpl.n	8004ab0 <_printf_i+0xbc>
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	e003      	b.n	8004ab8 <_printf_i+0xc4>
 8004ab0:	0645      	lsls	r5, r0, #25
 8004ab2:	d5fb      	bpl.n	8004aac <_printf_i+0xb8>
 8004ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	da03      	bge.n	8004ac4 <_printf_i+0xd0>
 8004abc:	232d      	movs	r3, #45	@ 0x2d
 8004abe:	426d      	negs	r5, r5
 8004ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ac4:	230a      	movs	r3, #10
 8004ac6:	4859      	ldr	r0, [pc, #356]	@ (8004c2c <_printf_i+0x238>)
 8004ac8:	e011      	b.n	8004aee <_printf_i+0xfa>
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	6833      	ldr	r3, [r6, #0]
 8004ace:	0608      	lsls	r0, r1, #24
 8004ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ad4:	d402      	bmi.n	8004adc <_printf_i+0xe8>
 8004ad6:	0649      	lsls	r1, r1, #25
 8004ad8:	bf48      	it	mi
 8004ada:	b2ad      	uxthmi	r5, r5
 8004adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ade:	6033      	str	r3, [r6, #0]
 8004ae0:	bf14      	ite	ne
 8004ae2:	230a      	movne	r3, #10
 8004ae4:	2308      	moveq	r3, #8
 8004ae6:	4851      	ldr	r0, [pc, #324]	@ (8004c2c <_printf_i+0x238>)
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aee:	6866      	ldr	r6, [r4, #4]
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	bfa8      	it	ge
 8004af4:	6821      	ldrge	r1, [r4, #0]
 8004af6:	60a6      	str	r6, [r4, #8]
 8004af8:	bfa4      	itt	ge
 8004afa:	f021 0104 	bicge.w	r1, r1, #4
 8004afe:	6021      	strge	r1, [r4, #0]
 8004b00:	b90d      	cbnz	r5, 8004b06 <_printf_i+0x112>
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	d04b      	beq.n	8004b9e <_printf_i+0x1aa>
 8004b06:	4616      	mov	r6, r2
 8004b08:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b0c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b10:	5dc7      	ldrb	r7, [r0, r7]
 8004b12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b16:	462f      	mov	r7, r5
 8004b18:	42bb      	cmp	r3, r7
 8004b1a:	460d      	mov	r5, r1
 8004b1c:	d9f4      	bls.n	8004b08 <_printf_i+0x114>
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d10b      	bne.n	8004b3a <_printf_i+0x146>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	07df      	lsls	r7, r3, #31
 8004b26:	d508      	bpl.n	8004b3a <_printf_i+0x146>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	6861      	ldr	r1, [r4, #4]
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	bfde      	ittt	le
 8004b30:	2330      	movle	r3, #48	@ 0x30
 8004b32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b3a:	1b92      	subs	r2, r2, r6
 8004b3c:	6122      	str	r2, [r4, #16]
 8004b3e:	464b      	mov	r3, r9
 8004b40:	4621      	mov	r1, r4
 8004b42:	4640      	mov	r0, r8
 8004b44:	f8cd a000 	str.w	sl, [sp]
 8004b48:	aa03      	add	r2, sp, #12
 8004b4a:	f7ff fee1 	bl	8004910 <_printf_common>
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d14a      	bne.n	8004be8 <_printf_i+0x1f4>
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	b004      	add	sp, #16
 8004b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	2778      	movs	r7, #120	@ 0x78
 8004b66:	4832      	ldr	r0, [pc, #200]	@ (8004c30 <_printf_i+0x23c>)
 8004b68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	6831      	ldr	r1, [r6, #0]
 8004b70:	061f      	lsls	r7, r3, #24
 8004b72:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b76:	d402      	bmi.n	8004b7e <_printf_i+0x18a>
 8004b78:	065f      	lsls	r7, r3, #25
 8004b7a:	bf48      	it	mi
 8004b7c:	b2ad      	uxthmi	r5, r5
 8004b7e:	6031      	str	r1, [r6, #0]
 8004b80:	07d9      	lsls	r1, r3, #31
 8004b82:	bf44      	itt	mi
 8004b84:	f043 0320 	orrmi.w	r3, r3, #32
 8004b88:	6023      	strmi	r3, [r4, #0]
 8004b8a:	b11d      	cbz	r5, 8004b94 <_printf_i+0x1a0>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	e7ab      	b.n	8004ae8 <_printf_i+0xf4>
 8004b90:	4826      	ldr	r0, [pc, #152]	@ (8004c2c <_printf_i+0x238>)
 8004b92:	e7e9      	b.n	8004b68 <_printf_i+0x174>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f023 0320 	bic.w	r3, r3, #32
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	e7f6      	b.n	8004b8c <_printf_i+0x198>
 8004b9e:	4616      	mov	r6, r2
 8004ba0:	e7bd      	b.n	8004b1e <_printf_i+0x12a>
 8004ba2:	6833      	ldr	r3, [r6, #0]
 8004ba4:	6825      	ldr	r5, [r4, #0]
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	6961      	ldr	r1, [r4, #20]
 8004baa:	6030      	str	r0, [r6, #0]
 8004bac:	062e      	lsls	r6, r5, #24
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0x1c2>
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0x1c8>
 8004bb6:	0668      	lsls	r0, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0x1be>
 8004bba:	8019      	strh	r1, [r3, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4616      	mov	r6, r2
 8004bc0:	6123      	str	r3, [r4, #16]
 8004bc2:	e7bc      	b.n	8004b3e <_printf_i+0x14a>
 8004bc4:	6833      	ldr	r3, [r6, #0]
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	1d1a      	adds	r2, r3, #4
 8004bca:	6032      	str	r2, [r6, #0]
 8004bcc:	681e      	ldr	r6, [r3, #0]
 8004bce:	6862      	ldr	r2, [r4, #4]
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f859 	bl	8004c88 <memchr>
 8004bd6:	b108      	cbz	r0, 8004bdc <_printf_i+0x1e8>
 8004bd8:	1b80      	subs	r0, r0, r6
 8004bda:	6060      	str	r0, [r4, #4]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	2300      	movs	r3, #0
 8004be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004be6:	e7aa      	b.n	8004b3e <_printf_i+0x14a>
 8004be8:	4632      	mov	r2, r6
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	6923      	ldr	r3, [r4, #16]
 8004bf0:	47d0      	blx	sl
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d0ad      	beq.n	8004b52 <_printf_i+0x15e>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	079b      	lsls	r3, r3, #30
 8004bfa:	d413      	bmi.n	8004c24 <_printf_i+0x230>
 8004bfc:	68e0      	ldr	r0, [r4, #12]
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	4298      	cmp	r0, r3
 8004c02:	bfb8      	it	lt
 8004c04:	4618      	movlt	r0, r3
 8004c06:	e7a6      	b.n	8004b56 <_printf_i+0x162>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4640      	mov	r0, r8
 8004c10:	47d0      	blx	sl
 8004c12:	3001      	adds	r0, #1
 8004c14:	d09d      	beq.n	8004b52 <_printf_i+0x15e>
 8004c16:	3501      	adds	r5, #1
 8004c18:	68e3      	ldr	r3, [r4, #12]
 8004c1a:	9903      	ldr	r1, [sp, #12]
 8004c1c:	1a5b      	subs	r3, r3, r1
 8004c1e:	42ab      	cmp	r3, r5
 8004c20:	dcf2      	bgt.n	8004c08 <_printf_i+0x214>
 8004c22:	e7eb      	b.n	8004bfc <_printf_i+0x208>
 8004c24:	2500      	movs	r5, #0
 8004c26:	f104 0619 	add.w	r6, r4, #25
 8004c2a:	e7f5      	b.n	8004c18 <_printf_i+0x224>
 8004c2c:	08004ddb 	.word	0x08004ddb
 8004c30:	08004dec 	.word	0x08004dec

08004c34 <memmove>:
 8004c34:	4288      	cmp	r0, r1
 8004c36:	b510      	push	{r4, lr}
 8004c38:	eb01 0402 	add.w	r4, r1, r2
 8004c3c:	d902      	bls.n	8004c44 <memmove+0x10>
 8004c3e:	4284      	cmp	r4, r0
 8004c40:	4623      	mov	r3, r4
 8004c42:	d807      	bhi.n	8004c54 <memmove+0x20>
 8004c44:	1e43      	subs	r3, r0, #1
 8004c46:	42a1      	cmp	r1, r4
 8004c48:	d008      	beq.n	8004c5c <memmove+0x28>
 8004c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c52:	e7f8      	b.n	8004c46 <memmove+0x12>
 8004c54:	4601      	mov	r1, r0
 8004c56:	4402      	add	r2, r0
 8004c58:	428a      	cmp	r2, r1
 8004c5a:	d100      	bne.n	8004c5e <memmove+0x2a>
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c66:	e7f7      	b.n	8004c58 <memmove+0x24>

08004c68 <_sbrk_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4d05      	ldr	r5, [pc, #20]	@ (8004c84 <_sbrk_r+0x1c>)
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4608      	mov	r0, r1
 8004c72:	602b      	str	r3, [r5, #0]
 8004c74:	f7fb ffb4 	bl	8000be0 <_sbrk>
 8004c78:	1c43      	adds	r3, r0, #1
 8004c7a:	d102      	bne.n	8004c82 <_sbrk_r+0x1a>
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	b103      	cbz	r3, 8004c82 <_sbrk_r+0x1a>
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
 8004c84:	200002c0 	.word	0x200002c0

08004c88 <memchr>:
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b510      	push	{r4, lr}
 8004c8c:	b2c9      	uxtb	r1, r1
 8004c8e:	4402      	add	r2, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	d101      	bne.n	8004c9a <memchr+0x12>
 8004c96:	2000      	movs	r0, #0
 8004c98:	e003      	b.n	8004ca2 <memchr+0x1a>
 8004c9a:	7804      	ldrb	r4, [r0, #0]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	428c      	cmp	r4, r1
 8004ca0:	d1f6      	bne.n	8004c90 <memchr+0x8>
 8004ca2:	bd10      	pop	{r4, pc}

08004ca4 <memcpy>:
 8004ca4:	440a      	add	r2, r1
 8004ca6:	4291      	cmp	r1, r2
 8004ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cac:	d100      	bne.n	8004cb0 <memcpy+0xc>
 8004cae:	4770      	bx	lr
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb6:	4291      	cmp	r1, r2
 8004cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cbc:	d1f9      	bne.n	8004cb2 <memcpy+0xe>
 8004cbe:	bd10      	pop	{r4, pc}

08004cc0 <_realloc_r>:
 8004cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4615      	mov	r5, r2
 8004cc8:	460c      	mov	r4, r1
 8004cca:	b921      	cbnz	r1, 8004cd6 <_realloc_r+0x16>
 8004ccc:	4611      	mov	r1, r2
 8004cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd2:	f7ff bc39 	b.w	8004548 <_malloc_r>
 8004cd6:	b92a      	cbnz	r2, 8004ce4 <_realloc_r+0x24>
 8004cd8:	f7ff fbcc 	bl	8004474 <_free_r>
 8004cdc:	2400      	movs	r4, #0
 8004cde:	4620      	mov	r0, r4
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce4:	f000 f81a 	bl	8004d1c <_malloc_usable_size_r>
 8004ce8:	4285      	cmp	r5, r0
 8004cea:	4606      	mov	r6, r0
 8004cec:	d802      	bhi.n	8004cf4 <_realloc_r+0x34>
 8004cee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004cf2:	d8f4      	bhi.n	8004cde <_realloc_r+0x1e>
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7ff fc26 	bl	8004548 <_malloc_r>
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d0ec      	beq.n	8004cdc <_realloc_r+0x1c>
 8004d02:	42b5      	cmp	r5, r6
 8004d04:	462a      	mov	r2, r5
 8004d06:	4621      	mov	r1, r4
 8004d08:	bf28      	it	cs
 8004d0a:	4632      	movcs	r2, r6
 8004d0c:	f7ff ffca 	bl	8004ca4 <memcpy>
 8004d10:	4621      	mov	r1, r4
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fbae 	bl	8004474 <_free_r>
 8004d18:	463c      	mov	r4, r7
 8004d1a:	e7e0      	b.n	8004cde <_realloc_r+0x1e>

08004d1c <_malloc_usable_size_r>:
 8004d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d20:	1f18      	subs	r0, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfbc      	itt	lt
 8004d26:	580b      	ldrlt	r3, [r1, r0]
 8004d28:	18c0      	addlt	r0, r0, r3
 8004d2a:	4770      	bx	lr

08004d2c <_init>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr

08004d38 <_fini>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr
