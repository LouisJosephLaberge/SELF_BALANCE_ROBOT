
SELF_BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007264  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007378  08007378  00008378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  00009090  2**0
                  CONTENTS
  4 .ARM          00000008  080074e0  080074e0  000084e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e8  080074e8  00009090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e8  080074e8  000084e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ec  080074ec  000084ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080074f0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000090  08007580  00009090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08007580  00009304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff96  00000000  00000000  000090b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025d4  00000000  00000000  0001904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c38  00000000  00000000  0001c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001918c  00000000  00000000  0001d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142f7  00000000  00000000  00036364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8a4  00000000  00000000  0004a65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7eff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc0  00000000  00000000  000d7f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dcb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800735c 	.word	0x0800735c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800735c 	.word	0x0800735c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <filterGetRollAngle>:
#include "filter.h"

static Filter_Handler hfilter;

float filterGetRollAngle()
{
 8001030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001034:	b08e      	sub	sp, #56	@ 0x38
 8001036:	af00      	add	r7, sp, #0
	Acc_Handler acc;
	Gyro_Handler gyro;

	float roll_angle_total = 0, roll_gyro = 0, roll_acc = 0;
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	@ 0x30
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float dt_ms = HAL_GetTick() - hfilter.timestamp;
 800104a:	f001 f8d7 	bl	80021fc <HAL_GetTick>
 800104e:	4603      	mov	r3, r0
 8001050:	4a59      	ldr	r2, [pc, #356]	@ (80011b8 <filterGetRollAngle+0x188>)
 8001052:	8892      	ldrh	r2, [r2, #4]
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe1c 	bl	8000c94 <__aeabi_ui2f>
 800105c:	4603      	mov	r3, r0
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28

	hfilter.timestamp = HAL_GetTick();
 8001060:	f001 f8cc 	bl	80021fc <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <filterGetRollAngle+0x188>)
 800106a:	809a      	strh	r2, [r3, #4]

	mpu6050GetGyro(&gyro);
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fdca 	bl	8001c08 <mpu6050GetGyro>
	mpu6050GetAcc(&acc);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fd83 	bl	8001b84 <mpu6050GetAcc>

	//Apply Low-Pass filter for the Accelerometer
	filterLpAcc(&acc);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f8a0 	bl	80011c8 <filterLpAcc>

	//Apply High-Pass filter for the Gyroscope
	filterHpGyro(&gyro);
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f904 	bl	8001298 <filterHpGyro>

	//Combine both inputs giving 97% weight to gyro according to literature
	roll_gyro = gyro.filtered_y*dt_ms/1000;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe55 	bl	8000d44 <__aeabi_fmul>
 800109a:	4603      	mov	r3, r0
 800109c:	4947      	ldr	r1, [pc, #284]	@ (80011bc <filterGetRollAngle+0x18c>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff04 	bl	8000eac <__aeabi_fdiv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	633b      	str	r3, [r7, #48]	@ 0x30
	roll_acc = (180*(atan(acc.filtered_x / sqrt(pow(acc.filtered_y, 2) + pow(acc.filtered_z,2)))))/PI;
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f9bc 	bl	8000428 <__aeabi_f2d>
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9b6 	bl	8000428 <__aeabi_f2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010c4:	f005 f886 	bl	80061d4 <pow>
 80010c8:	4680      	mov	r8, r0
 80010ca:	4689      	mov	r9, r1
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9aa 	bl	8000428 <__aeabi_f2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010dc:	f005 f87a 	bl	80061d4 <pow>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4640      	mov	r0, r8
 80010e6:	4649      	mov	r1, r9
 80010e8:	f7ff f840 	bl	800016c <__adddf3>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f005 f8d6 	bl	80062a4 <sqrt>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff fb14 	bl	800072c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f005 f8f0 	bl	80062f0 <atan>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <filterGetRollAngle+0x190>)
 8001116:	f7ff f9df 	bl	80004d8 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	a31f      	add	r3, pc, #124	@ (adr r3, 80011a0 <filterGetRollAngle+0x170>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fb00 	bl	800072c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fca8 	bl	8000a88 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	roll_angle_total = (ALPHA * (hfilter.last_roll_angle + roll_gyro) + (1-ALPHA)*roll_acc);
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <filterGetRollAngle+0x188>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fcf6 	bl	8000b34 <__addsf3>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f96c 	bl	8000428 <__aeabi_f2d>
 8001150:	a315      	add	r3, pc, #84	@ (adr r3, 80011a8 <filterGetRollAngle+0x178>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9bf 	bl	80004d8 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4614      	mov	r4, r2
 8001160:	461d      	mov	r5, r3
 8001162:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001164:	f7ff f960 	bl	8000428 <__aeabi_f2d>
 8001168:	a311      	add	r3, pc, #68	@ (adr r3, 80011b0 <filterGetRollAngle+0x180>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f9b3 	bl	80004d8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4620      	mov	r0, r4
 8001178:	4629      	mov	r1, r5
 800117a:	f7fe fff7 	bl	800016c <__adddf3>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc7f 	bl	8000a88 <__aeabi_d2f>
 800118a:	4603      	mov	r3, r0
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
	hfilter.last_roll_angle = roll_angle_total;
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <filterGetRollAngle+0x188>)
 8001190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001192:	6013      	str	r3, [r2, #0]

	return roll_angle_total;
 8001194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001196:	4618      	mov	r0, r3
 8001198:	3738      	adds	r7, #56	@ 0x38
 800119a:	46bd      	mov	sp, r7
 800119c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011a0:	54524550 	.word	0x54524550
 80011a4:	400921fb 	.word	0x400921fb
 80011a8:	7ae147ae 	.word	0x7ae147ae
 80011ac:	3fefae14 	.word	0x3fefae14
 80011b0:	47ae1480 	.word	0x47ae1480
 80011b4:	3f847ae1 	.word	0x3f847ae1
 80011b8:	200000ac 	.word	0x200000ac
 80011bc:	447a0000 	.word	0x447a0000
 80011c0:	40668000 	.word	0x40668000
 80011c4:	00000000 	.word	0x00000000

080011c8 <filterLpAcc>:

void filterLpAcc(Acc_Handler* acc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	acc->filtered_x = (float)((acc->raw_x * G) / 8192);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f914 	bl	8000404 <__aeabi_i2d>
 80011dc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001288 <filterLpAcc+0xc0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff f979 	bl	80004d8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <filterLpAcc+0xc8>)
 80011f4:	f7ff fa9a 	bl	800072c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc42 	bl	8000a88 <__aeabi_d2f>
 8001204:	4602      	mov	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]
	acc->filtered_y = (float)((acc->raw_y * G) / 8192);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f8f7 	bl	8000404 <__aeabi_i2d>
 8001216:	a31c      	add	r3, pc, #112	@ (adr r3, 8001288 <filterLpAcc+0xc0>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <filterLpAcc+0xc8>)
 800122e:	f7ff fa7d 	bl	800072c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc25 	bl	8000a88 <__aeabi_d2f>
 800123e:	4602      	mov	r2, r0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
	acc->filtered_z = (float)((acc->raw_z * G) / 8192);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f8da 	bl	8000404 <__aeabi_i2d>
 8001250:	a30d      	add	r3, pc, #52	@ (adr r3, 8001288 <filterLpAcc+0xc0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f93f 	bl	80004d8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <filterLpAcc+0xc8>)
 8001268:	f7ff fa60 	bl	800072c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fc08 	bl	8000a88 <__aeabi_d2f>
 8001278:	4602      	mov	r2, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	611a      	str	r2, [r3, #16]
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	51eb851f 	.word	0x51eb851f
 800128c:	40239eb8 	.word	0x40239eb8
 8001290:	40c00000 	.word	0x40c00000
 8001294:	00000000 	.word	0x00000000

08001298 <filterHpGyro>:

void filterHpGyro(Gyro_Handler* gyro)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	gyro->filtered_x = (float)(gyro->raw_x / 65.5);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8ac 	bl	8000404 <__aeabi_i2d>
 80012ac:	a31c      	add	r3, pc, #112	@ (adr r3, 8001320 <filterHpGyro+0x88>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff fa3b 	bl	800072c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fbe3 	bl	8000a88 <__aeabi_d2f>
 80012c2:	4602      	mov	r2, r0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	609a      	str	r2, [r3, #8]
	gyro->filtered_y = (float)(gyro->raw_y / 65.5);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f898 	bl	8000404 <__aeabi_i2d>
 80012d4:	a312      	add	r3, pc, #72	@ (adr r3, 8001320 <filterHpGyro+0x88>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff fa27 	bl	800072c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fbcf 	bl	8000a88 <__aeabi_d2f>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
	gyro->filtered_z = (float)(gyro->raw_z / 65.5);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f884 	bl	8000404 <__aeabi_i2d>
 80012fc:	a308      	add	r3, pc, #32	@ (adr r3, 8001320 <filterHpGyro+0x88>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff fa13 	bl	800072c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fbbb 	bl	8000a88 <__aeabi_d2f>
 8001312:	4602      	mov	r2, r0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	00000000 	.word	0x00000000
 8001324:	40506000 	.word	0x40506000

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132c:	f000 ff0e 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001330:	f000 f844 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001334:	f000 f93a 	bl	80015ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001338:	f000 f87c 	bl	8001434 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800133c:	f000 f90c 	bl	8001558 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001340:	f000 f8a6 	bl	8001490 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Send Hello message to UART to test transmission
  if(HAL_UART_Transmit(&huart1, (uint8_t*)hello_msg, strlen(hello_msg), HAL_MAX_DELAY) != HAL_OK)
 8001344:	481b      	ldr	r0, [pc, #108]	@ (80013b4 <main+0x8c>)
 8001346:	f7fe ff03 	bl	8000150 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	4918      	ldr	r1, [pc, #96]	@ (80013b4 <main+0x8c>)
 8001354:	4818      	ldr	r0, [pc, #96]	@ (80013b8 <main+0x90>)
 8001356:	f003 fcb9 	bl	8004ccc <HAL_UART_Transmit>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <main+0x3c>
  {
	  Error_Handler();
 8001360:	f000 f964 	bl	800162c <Error_Handler>
  }

  //Init IMU
  HAL_Delay(500);
 8001364:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001368:	f000 ff52 	bl	8002210 <HAL_Delay>
  if(!mpu6050Init()) Error_Handler();
 800136c:	f000 fab6 	bl	80018dc <mpu6050Init>
 8001370:	4603      	mov	r3, r0
 8001372:	f083 0301 	eor.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <main+0x58>
 800137c:	f000 f956 	bl	800162c <Error_Handler>

  //Init both motors
  if(!motorInit()) Error_Handler();
 8001380:	f000 f95a 	bl	8001638 <motorInit>
 8001384:	4603      	mov	r3, r0
 8001386:	f083 0301 	eor.w	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <main+0x6c>
 8001390:	f000 f94c 	bl	800162c <Error_Handler>

  //Init PID controller
  if(!pidInit(1, 0, 0)) Error_Handler();
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2001      	movs	r0, #1
 800139a:	f000 fc77 	bl	8001c8c <pidInit>
 800139e:	4603      	mov	r3, r0
 80013a0:	f083 0301 	eor.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <main+0x86>
 80013aa:	f000 f93f 	bl	800162c <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	motorProcess();
 80013ae:	f000 fa4b 	bl	8001848 <motorProcess>
 80013b2:	e7fc      	b.n	80013ae <main+0x86>
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000150 	.word	0x20000150

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b090      	sub	sp, #64	@ 0x40
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	2228      	movs	r2, #40	@ 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fa72 	bl	80058b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e6:	2310      	movs	r3, #16
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0318 	add.w	r3, r7, #24
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fbea 	bl	8003bcc <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013fe:	f000 f915 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fe58 	bl	80040d0 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001426:	f000 f901 	bl	800162c <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	@ 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f001 fa23 	bl	80028bc <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 f8d6 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000b4 	.word	0x200000b4
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001496:	f107 0320 	add.w	r3, r7, #32
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014c6:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014da:	481e      	ldr	r0, [pc, #120]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014dc:	f002 ff86 	bl	80043ec <HAL_TIM_PWM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014e6:	f000 f8a1 	bl	800162c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4816      	ldr	r0, [pc, #88]	@ (8001554 <MX_TIM2_Init+0xc4>)
 80014fa:	f003 fb39 	bl	8004b70 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001504:	f000 f892 	bl	800162c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001508:	2360      	movs	r3, #96	@ 0x60
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_TIM2_Init+0xc4>)
 8001520:	f003 f856 	bl	80045d0 <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800152a:	f000 f87f 	bl	800162c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2204      	movs	r2, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <MX_TIM2_Init+0xc4>)
 8001536:	f003 f84b 	bl	80045d0 <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001540:	f000 f874 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <MX_TIM2_Init+0xc4>)
 8001546:	f000 fcdf 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	@ 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000108 	.word	0x20000108

08001558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <MX_USART1_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001590:	f003 fb4c 	bl	8004c2c <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f000 f847 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000150 	.word	0x20000150
 80015a8:	40013800 	.word	0x40013800

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <MX_GPIO_Init+0x78>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <MX_GPIO_Init+0x78>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_GPIO_Init+0x78>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_GPIO_Init+0x78>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <MX_GPIO_Init+0x78>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_GPIO_Init+0x78>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <MX_GPIO_Init+0x7c>)
 80015f8:	f001 f948 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015fc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001606:	2302      	movs	r3, #2
 8001608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2302      	movs	r3, #2
 800160c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4619      	mov	r1, r3
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_GPIO_Init+0x7c>)
 8001616:	f000 ffb5 	bl	8002584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	40010800 	.word	0x40010800

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <Error_Handler+0x8>

08001638 <motorInit>:

extern TIM_HandleTypeDef htim2;
extern Pid_Handler hpid;

bool motorInit()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	return HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1)
 800163c:	2100      	movs	r1, #0
 800163e:	480a      	ldr	r0, [pc, #40]	@ (8001668 <motorInit+0x30>)
 8001640:	f002 ff24 	bl	800448c <HAL_TIM_PWM_Start>
 8001644:	4603      	mov	r3, r0
			&& HAL_OK == HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001646:	2b00      	cmp	r3, #0
 8001648:	d108      	bne.n	800165c <motorInit+0x24>
 800164a:	2104      	movs	r1, #4
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <motorInit+0x30>)
 800164e:	f002 ff1d 	bl	800448c <HAL_TIM_PWM_Start>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <motorInit+0x24>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <motorInit+0x26>
 800165c:	2300      	movs	r3, #0
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000108 	.word	0x20000108

0800166c <motorRequestMovementSpeed>:
	}
	HAL_Delay(2000);
}

void motorRequestMovementSpeed(int8_t speed, uint8_t motor)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
	uint8_t abs_speed = abs(speed);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	bfb8      	it	lt
 8001684:	425b      	neglt	r3, r3
 8001686:	73fb      	strb	r3, [r7, #15]
	uint32_t ccr_value = (abs_speed * htim2.Init.Period)/100;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	4a6c      	ldr	r2, [pc, #432]	@ (800183c <motorRequestMovementSpeed+0x1d0>)
 800168c:	68d2      	ldr	r2, [r2, #12]
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a6b      	ldr	r2, [pc, #428]	@ (8001840 <motorRequestMovementSpeed+0x1d4>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	60bb      	str	r3, [r7, #8]
	switch(motor)
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d06d      	beq.n	800177e <motorRequestMovementSpeed+0x112>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	f300 80c6 	bgt.w	8001834 <motorRequestMovementSpeed+0x1c8>
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <motorRequestMovementSpeed+0x46>
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d033      	beq.n	8001718 <motorRequestMovementSpeed+0xac>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
			}
	}
}
 80016b0:	e0c0      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 80016b2:	4b62      	ldr	r3, [pc, #392]	@ (800183c <motorRequestMovementSpeed+0x1d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
			if(speed >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0c      	blt.n	80016dc <motorRequestMovementSpeed+0x70>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c8:	485e      	ldr	r0, [pc, #376]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80016ca:	f001 f8df 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d4:	485b      	ldr	r0, [pc, #364]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80016d6:	f001 f8d9 	bl	800288c <HAL_GPIO_WritePin>
			break;
 80016da:	e0ab      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
			}else if(speed <= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dc0c      	bgt.n	80016fe <motorRequestMovementSpeed+0x92>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ea:	4856      	ldr	r0, [pc, #344]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80016ec:	f001 f8ce 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f6:	4853      	ldr	r0, [pc, #332]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80016f8:	f001 f8c8 	bl	800288c <HAL_GPIO_WritePin>
			break;
 80016fc:	e09a      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001704:	484f      	ldr	r0, [pc, #316]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001706:	f001 f8c1 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001710:	484c      	ldr	r0, [pc, #304]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001712:	f001 f8bb 	bl	800288c <HAL_GPIO_WritePin>
			break;
 8001716:	e08d      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8001718:	4b48      	ldr	r3, [pc, #288]	@ (800183c <motorRequestMovementSpeed+0x1d0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0c      	blt.n	8001742 <motorRequestMovementSpeed+0xd6>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800172e:	4845      	ldr	r0, [pc, #276]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001730:	f001 f8ac 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800173a:	4842      	ldr	r0, [pc, #264]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 800173c:	f001 f8a6 	bl	800288c <HAL_GPIO_WritePin>
			break;
 8001740:	e078      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
			}else if(speed <= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dc0c      	bgt.n	8001764 <motorRequestMovementSpeed+0xf8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001750:	483c      	ldr	r0, [pc, #240]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001752:	f001 f89b 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175c:	4839      	ldr	r0, [pc, #228]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 800175e:	f001 f895 	bl	800288c <HAL_GPIO_WritePin>
			break;
 8001762:	e067      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800176a:	4836      	ldr	r0, [pc, #216]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 800176c:	f001 f88e 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001776:	4833      	ldr	r0, [pc, #204]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001778:	f001 f888 	bl	800288c <HAL_GPIO_WritePin>
			break;
 800177c:	e05a      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr_value);
 800177e:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <motorRequestMovementSpeed+0x1d0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ccr_value);
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <motorRequestMovementSpeed+0x1d0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	639a      	str	r2, [r3, #56]	@ 0x38
			if(speed >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db18      	blt.n	80017c8 <motorRequestMovementSpeed+0x15c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800179c:	4829      	ldr	r0, [pc, #164]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 800179e:	f001 f875 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a8:	4826      	ldr	r0, [pc, #152]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017aa:	f001 f86f 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017b4:	4823      	ldr	r0, [pc, #140]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017b6:	f001 f869 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017c0:	4820      	ldr	r0, [pc, #128]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017c2:	f001 f863 	bl	800288c <HAL_GPIO_WritePin>
}
 80017c6:	e035      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
			}else if(speed <= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dc18      	bgt.n	8001802 <motorRequestMovementSpeed+0x196>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d6:	481b      	ldr	r0, [pc, #108]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017d8:	f001 f858 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017e4:	f001 f852 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017ee:	4815      	ldr	r0, [pc, #84]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017f0:	f001 f84c 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017fa:	4812      	ldr	r0, [pc, #72]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 80017fc:	f001 f846 	bl	800288c <HAL_GPIO_WritePin>
}
 8001800:	e018      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001808:	480e      	ldr	r0, [pc, #56]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 800180a:	f001 f83f 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001814:	480b      	ldr	r0, [pc, #44]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001816:	f001 f839 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 8001822:	f001 f833 	bl	800288c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <motorRequestMovementSpeed+0x1d8>)
 800182e:	f001 f82d 	bl	800288c <HAL_GPIO_WritePin>
}
 8001832:	e7ff      	b.n	8001834 <motorRequestMovementSpeed+0x1c8>
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000108 	.word	0x20000108
 8001840:	51eb851f 	.word	0x51eb851f
 8001844:	40010800 	.word	0x40010800

08001848 <motorProcess>:

void motorProcess()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b09c      	sub	sp, #112	@ 0x70
 800184c:	af00      	add	r7, sp, #0
	char msg[100];
	pidApply();
 800184e:	f000 fa35 	bl	8001cbc <pidApply>
	double pid_perc = (hpid.output * 100) / PID_MAX;
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <motorProcess+0x88>)
 8001854:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001858:	461a      	mov	r2, r3
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fdce 	bl	8000404 <__aeabi_i2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	int8_t speed_pid_output = (int8_t)(pid_perc);
 8001870:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001874:	f7ff f8e0 	bl	8000a38 <__aeabi_d2iz>
 8001878:	4603      	mov	r3, r0
 800187a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if(hpid.change)
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <motorProcess+0x88>)
 8001880:	7e9b      	ldrb	r3, [r3, #26]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <motorProcess+0x72>
	{
		sprintf(msg, "Angle : %d \n\r", hpid.last_error);
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <motorProcess+0x88>)
 8001888:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	463b      	mov	r3, r7
 8001890:	4910      	ldr	r1, [pc, #64]	@ (80018d4 <motorProcess+0x8c>)
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ffee 	bl	8005874 <siprintf>
		if(HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fc58 	bl	8000150 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4639      	mov	r1, r7
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <motorProcess+0x90>)
 80018ac:	f003 fa0e 	bl	8004ccc <HAL_UART_Transmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <motorProcess+0x72>
		{
			Error_Handler();
 80018b6:	f7ff feb9 	bl	800162c <Error_Handler>
		}
	}
	motorRequestMovementSpeed(speed_pid_output, BOTH);
 80018ba:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80018be:	2102      	movs	r1, #2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fed3 	bl	800166c <motorRequestMovementSpeed>
}
 80018c6:	bf00      	nop
 80018c8:	3770      	adds	r7, #112	@ 0x70
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000198 	.word	0x20000198
 80018d4:	08007378 	.word	0x08007378
 80018d8:	20000150 	.word	0x20000150

080018dc <mpu6050Init>:
 */

#include "mpu6050.h"

bool mpu6050Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0b8      	sub	sp, #224	@ 0xe0
 80018e0:	af04      	add	r7, sp, #16
	//Check if device is ready
	char msg[200];
	uint8_t reg_buff = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, HAL_MAX_DELAY) != HAL_OK)
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	2201      	movs	r2, #1
 80018ec:	21d0      	movs	r1, #208	@ 0xd0
 80018ee:	48a0      	ldr	r0, [pc, #640]	@ (8001b70 <mpu6050Init+0x294>)
 80018f0:	f001 fc8a 	bl	8003208 <HAL_I2C_IsDeviceReady>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <mpu6050Init+0x22>
	{
		return false;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e133      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	//RESET MODULE
	reg_buff = 0x1<<7;
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2301      	movs	r3, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	226b      	movs	r2, #107	@ 0x6b
 8001914:	21d0      	movs	r1, #208	@ 0xd0
 8001916:	4896      	ldr	r0, [pc, #600]	@ (8001b70 <mpu6050Init+0x294>)
 8001918:	f001 f914 	bl	8002b44 <HAL_I2C_Mem_Write>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <mpu6050Init+0x4a>
	{
		return false;
 8001922:	2300      	movs	r3, #0
 8001924:	e11f      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001926:	2032      	movs	r0, #50	@ 0x32
 8001928:	f000 fc72 	bl	8002210 <HAL_Delay>

	//Remove from SLEEP MODE
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, 0, 1, HAL_MAX_DELAY) != HAL_OK)
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	2301      	movs	r3, #1
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	2300      	movs	r3, #0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	226b      	movs	r2, #107	@ 0x6b
 800193e:	21d0      	movs	r1, #208	@ 0xd0
 8001940:	488b      	ldr	r0, [pc, #556]	@ (8001b70 <mpu6050Init+0x294>)
 8001942:	f001 f8ff 	bl	8002b44 <HAL_I2C_Mem_Write>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <mpu6050Init+0x74>
	{
		return false;
 800194c:	2300      	movs	r3, #0
 800194e:	e10a      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001950:	2032      	movs	r0, #50	@ 0x32
 8001952:	f000 fc5d 	bl	8002210 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	2301      	movs	r3, #1
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	1dfb      	adds	r3, r7, #7
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	226b      	movs	r2, #107	@ 0x6b
 8001968:	21d0      	movs	r1, #208	@ 0xd0
 800196a:	4881      	ldr	r0, [pc, #516]	@ (8001b70 <mpu6050Init+0x294>)
 800196c:	f001 f9e4 	bl	8002d38 <HAL_I2C_Mem_Read>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <mpu6050Init+0x9e>
	{
		return false;
 8001976:	2300      	movs	r3, #0
 8001978:	e0f5      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 800197a:	2032      	movs	r0, #50	@ 0x32
 800197c:	f000 fc48 	bl	8002210 <HAL_Delay>

	//Accelerometer configuration
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2301      	movs	r3, #1
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	221c      	movs	r2, #28
 8001992:	21d0      	movs	r1, #208	@ 0xd0
 8001994:	4876      	ldr	r0, [pc, #472]	@ (8001b70 <mpu6050Init+0x294>)
 8001996:	f001 f9cf 	bl	8002d38 <HAL_I2C_Mem_Read>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <mpu6050Init+0xc8>
	{
		return false;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e0e0      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 80019a4:	2032      	movs	r0, #50	@ 0x32
 80019a6:	f000 fc33 	bl	8002210 <HAL_Delay>
	reg_buff |= (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	221c      	movs	r2, #28
 80019c6:	21d0      	movs	r1, #208	@ 0xd0
 80019c8:	4869      	ldr	r0, [pc, #420]	@ (8001b70 <mpu6050Init+0x294>)
 80019ca:	f001 f8bb 	bl	8002b44 <HAL_I2C_Mem_Write>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <mpu6050Init+0xfc>
	{
		return false;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e0c6      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 80019d8:	2032      	movs	r0, #50	@ 0x32
 80019da:	f000 fc19 	bl	8002210 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	2301      	movs	r3, #1
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2301      	movs	r3, #1
 80019ee:	221c      	movs	r2, #28
 80019f0:	21d0      	movs	r1, #208	@ 0xd0
 80019f2:	485f      	ldr	r0, [pc, #380]	@ (8001b70 <mpu6050Init+0x294>)
 80019f4:	f001 f9a0 	bl	8002d38 <HAL_I2C_Mem_Read>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <mpu6050Init+0x126>
	{
		return false;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e0b1      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001a02:	2032      	movs	r0, #50	@ 0x32
 8001a04:	f000 fc04 	bl	8002210 <HAL_Delay>
	if(reg_buff != (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL))
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d015      	beq.n	8001a3a <mpu6050Init+0x15e>
	{
		sprintf(msg,"MPU6050_ACCEL_CONFIG NOT SET CORRECTLY\n\r");
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4958      	ldr	r1, [pc, #352]	@ (8001b74 <mpu6050Init+0x298>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 ff2d 	bl	8005874 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb96 	bl	8000150 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0108 	add.w	r1, r7, #8
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	4851      	ldr	r0, [pc, #324]	@ (8001b78 <mpu6050Init+0x29c>)
 8001a32:	f003 f94b 	bl	8004ccc <HAL_UART_Transmit>
		return false;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e095      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001a3a:	2032      	movs	r0, #50	@ 0x32
 8001a3c:	f000 fbe8 	bl	8002210 <HAL_Delay>

	//Gyroscope configuration

	reg_buff = (MPU6050_FS_SEL_500HZ << MPU_6050_GYRO_CONFIG_FS_SEL);
 8001a40:	2308      	movs	r3, #8
 8001a42:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	221b      	movs	r2, #27
 8001a56:	21d0      	movs	r1, #208	@ 0xd0
 8001a58:	4845      	ldr	r0, [pc, #276]	@ (8001b70 <mpu6050Init+0x294>)
 8001a5a:	f001 f873 	bl	8002b44 <HAL_I2C_Mem_Write>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <mpu6050Init+0x18c>
	{
		return false;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e07e      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001a68:	2032      	movs	r0, #50	@ 0x32
 8001a6a:	f000 fbd1 	bl	8002210 <HAL_Delay>
	reg_buff = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	221b      	movs	r2, #27
 8001a84:	21d0      	movs	r1, #208	@ 0xd0
 8001a86:	483a      	ldr	r0, [pc, #232]	@ (8001b70 <mpu6050Init+0x294>)
 8001a88:	f001 f956 	bl	8002d38 <HAL_I2C_Mem_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <mpu6050Init+0x1ba>
	{
		return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e067      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001a96:	2032      	movs	r0, #50	@ 0x32
 8001a98:	f000 fbba 	bl	8002210 <HAL_Delay>
	if(reg_buff != (MPU6050_FS_SEL_500HZ << MPU_6050_GYRO_CONFIG_FS_SEL))
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d015      	beq.n	8001ace <mpu6050Init+0x1f2>
	{
		sprintf(msg,"MPU6050_GYRO_CONFIG NOT SET CORRECTLY\n\r");
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <mpu6050Init+0x2a0>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fee3 	bl	8005874 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fb4c 	bl	8000150 <strlen>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f107 0108 	add.w	r1, r7, #8
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac4:	482c      	ldr	r0, [pc, #176]	@ (8001b78 <mpu6050Init+0x29c>)
 8001ac6:	f003 f901 	bl	8004ccc <HAL_UART_Transmit>
		return false;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e04b      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001ace:	2032      	movs	r0, #50	@ 0x32
 8001ad0:	f000 fb9e 	bl	8002210 <HAL_Delay>
//		return false;
//	}
//	HAL_Delay(50);

	//DLPF configuration
	reg_buff = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	221a      	movs	r2, #26
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	4820      	ldr	r0, [pc, #128]	@ (8001b70 <mpu6050Init+0x294>)
 8001aee:	f001 f829 	bl	8002b44 <HAL_I2C_Mem_Write>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <mpu6050Init+0x220>
	{
		return false;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e034      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001afc:	2032      	movs	r0, #50	@ 0x32
 8001afe:	f000 fb87 	bl	8002210 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2301      	movs	r3, #1
 8001b12:	221a      	movs	r2, #26
 8001b14:	21d0      	movs	r1, #208	@ 0xd0
 8001b16:	4816      	ldr	r0, [pc, #88]	@ (8001b70 <mpu6050Init+0x294>)
 8001b18:	f001 f90e 	bl	8002d38 <HAL_I2C_Mem_Read>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <mpu6050Init+0x24a>
	{
		return false;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e01f      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001b26:	2032      	movs	r0, #50	@ 0x32
 8001b28:	f000 fb72 	bl	8002210 <HAL_Delay>
	if(reg_buff != 0)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <mpu6050Init+0x282>
	{
		sprintf(msg,"MPU6050_CONFIG_REG NOT SET CORRECTLY\n\r");
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4912      	ldr	r1, [pc, #72]	@ (8001b80 <mpu6050Init+0x2a4>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fe9b 	bl	8005874 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fb04 	bl	8000150 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f107 0108 	add.w	r1, r7, #8
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <mpu6050Init+0x29c>)
 8001b56:	f003 f8b9 	bl	8004ccc <HAL_UART_Transmit>
		return false;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e003      	b.n	8001b66 <mpu6050Init+0x28a>
	}
	HAL_Delay(50);
 8001b5e:	2032      	movs	r0, #50	@ 0x32
 8001b60:	f000 fb56 	bl	8002210 <HAL_Delay>

	return true;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	37d0      	adds	r7, #208	@ 0xd0
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000b4 	.word	0x200000b4
 8001b74:	08007388 	.word	0x08007388
 8001b78:	20000150 	.word	0x20000150
 8001b7c:	080073b4 	.word	0x080073b4
 8001b80:	080073dc 	.word	0x080073dc

08001b84 <mpu6050GetAcc>:

void mpu6050GetAcc(Acc_Handler* acc_buff)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af04      	add	r7, sp, #16
 8001b8a:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 8001b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c00 <mpu6050GetAcc+0x7c>)
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b96:	6018      	str	r0, [r3, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	223b      	movs	r2, #59	@ 0x3b
 8001bb0:	21d0      	movs	r1, #208	@ 0xd0
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <mpu6050GetAcc+0x80>)
 8001bb4:	f001 f8c0 	bl	8002d38 <HAL_I2C_Mem_Read>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <mpu6050GetAcc+0x3e>
	{
		Error_Handler();
 8001bbe:	f7ff fd35 	bl	800162c <Error_Handler>
	}

	acc_buff->raw_x = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 8001bc2:	7a3b      	ldrb	r3, [r7, #8]
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	801a      	strh	r2, [r3, #0]
	acc_buff->raw_y = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	805a      	strh	r2, [r3, #2]
	acc_buff->raw_z = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 8001be6:	7b3b      	ldrb	r3, [r7, #12]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	7b7b      	ldrb	r3, [r7, #13]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	809a      	strh	r2, [r3, #4]
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08007404 	.word	0x08007404
 8001c04:	200000b4 	.word	0x200000b4

08001c08 <mpu6050GetGyro>:

void mpu6050GetGyro(Gyro_Handler* gyro_buff)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <mpu6050GetGyro+0x7c>)
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c1a:	6018      	str	r0, [r3, #0]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	2306      	movs	r3, #6
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	2243      	movs	r2, #67	@ 0x43
 8001c34:	21d0      	movs	r1, #208	@ 0xd0
 8001c36:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <mpu6050GetGyro+0x80>)
 8001c38:	f001 f87e 	bl	8002d38 <HAL_I2C_Mem_Read>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <mpu6050GetGyro+0x3e>
	{
		Error_Handler();
 8001c42:	f7ff fcf3 	bl	800162c <Error_Handler>
	}

	gyro_buff->raw_x = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 8001c46:	7a3b      	ldrb	r3, [r7, #8]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	7a7b      	ldrb	r3, [r7, #9]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	801a      	strh	r2, [r3, #0]
	gyro_buff->raw_y = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 8001c58:	7abb      	ldrb	r3, [r7, #10]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	805a      	strh	r2, [r3, #2]
	gyro_buff->raw_z = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 8001c6a:	7b3b      	ldrb	r3, [r7, #12]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	7b7b      	ldrb	r3, [r7, #13]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	809a      	strh	r2, [r3, #4]
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	08007404 	.word	0x08007404
 8001c88:	200000b4 	.word	0x200000b4

08001c8c <pidInit>:
#include "motor.h"

Pid_Handler hpid;

bool pidInit(uint32_t p, uint32_t i, uint32_t d)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	hpid.p_gain = p;
 8001c98:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <pidInit+0x2c>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6013      	str	r3, [r2, #0]
	hpid.i_gain = i;
 8001c9e:	4a06      	ldr	r2, [pc, #24]	@ (8001cb8 <pidInit+0x2c>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6053      	str	r3, [r2, #4]
	hpid.d_gain = d;
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <pidInit+0x2c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6093      	str	r3, [r2, #8]

	return true;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000198 	.word	0x20000198

08001cbc <pidApply>:

void pidApply()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
	int32_t error = filterGetRollAngle();
 8001cc2:	f7ff f9b5 	bl	8001030 <filterGetRollAngle>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f98b 	bl	8000fe4 <__aeabi_f2iz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60fb      	str	r3, [r7, #12]
	uint32_t dt = HAL_GetTick() - hpid.timestamp;
 8001cd2:	f000 fa93 	bl	80021fc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <pidApply+0x10c>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	60bb      	str	r3, [r7, #8]
	hpid.change = false;
 8001ce0:	4b39      	ldr	r3, [pc, #228]	@ (8001dc8 <pidApply+0x10c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	769a      	strb	r2, [r3, #26]

	if(dt >= 25)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b18      	cmp	r3, #24
 8001cea:	d969      	bls.n	8001dc0 <pidApply+0x104>
	{
		hpid.timestamp = HAL_GetTick();
 8001cec:	f000 fa86 	bl	80021fc <HAL_GetTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a35      	ldr	r2, [pc, #212]	@ (8001dc8 <pidApply+0x10c>)
 8001cf4:	6153      	str	r3, [r2, #20]

		hpid.error_sum += error;
 8001cf6:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <pidApply+0x10c>)
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a32      	ldr	r2, [pc, #200]	@ (8001dc8 <pidApply+0x10c>)
 8001d00:	6113      	str	r3, [r2, #16]

		if(hpid.error_sum >= INTEGRAL_GAIN_MAX)
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <pidApply+0x10c>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	2b63      	cmp	r3, #99	@ 0x63
 8001d08:	dd02      	ble.n	8001d10 <pidApply+0x54>
		{
			hpid.error_sum = INTEGRAL_GAIN_MAX;
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc8 <pidApply+0x10c>)
 8001d0c:	2264      	movs	r2, #100	@ 0x64
 8001d0e:	611a      	str	r2, [r3, #16]
		}
		if(hpid.error_sum <= -INTEGRAL_GAIN_MAX)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <pidApply+0x10c>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8001d18:	da03      	bge.n	8001d22 <pidApply+0x66>
		{
			hpid.error_sum = -INTEGRAL_GAIN_MAX;
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <pidApply+0x10c>)
 8001d1c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8001d20:	611a      	str	r2, [r3, #16]
		}

		int16_t d = error - hpid.last_error;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b28      	ldr	r3, [pc, #160]	@ (8001dc8 <pidApply+0x10c>)
 8001d28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	80fb      	strh	r3, [r7, #6]
		d = d / (int16_t)dt;
 8001d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	b212      	sxth	r2, r2
 8001d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]

		hpid.output = hpid.p_gain * error
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <pidApply+0x10c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
				+ hpid.i_gain * hpid.error_sum * dt
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <pidApply+0x10c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	491b      	ldr	r1, [pc, #108]	@ (8001dc8 <pidApply+0x10c>)
 8001d5a:	6909      	ldr	r1, [r1, #16]
 8001d5c:	b289      	uxth	r1, r1
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	b289      	uxth	r1, r1
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b29a      	uxth	r2, r3
				+ hpid.d_gain * d;
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <pidApply+0x10c>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001d7c:	b289      	uxth	r1, r1
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21a      	sxth	r2, r3
		hpid.output = hpid.p_gain * error
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <pidApply+0x10c>)
 8001d8c:	831a      	strh	r2, [r3, #24]

		if(hpid.output >= PID_MAX)
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <pidApply+0x10c>)
 8001d90:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001d94:	2b09      	cmp	r3, #9
 8001d96:	dd02      	ble.n	8001d9e <pidApply+0xe2>
		{
			hpid.output = PID_MAX;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <pidApply+0x10c>)
 8001d9a:	220a      	movs	r2, #10
 8001d9c:	831a      	strh	r2, [r3, #24]
		}
		if(hpid.output <= -PID_MAX)
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <pidApply+0x10c>)
 8001da0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001da4:	f113 0f09 	cmn.w	r3, #9
 8001da8:	da03      	bge.n	8001db2 <pidApply+0xf6>
		{
			hpid.output = -PID_MAX;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <pidApply+0x10c>)
 8001dac:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8001db0:	831a      	strh	r2, [r3, #24]
		}
		hpid.last_error = error;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <pidApply+0x10c>)
 8001db8:	819a      	strh	r2, [r3, #12]
		hpid.change = true;
 8001dba:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <pidApply+0x10c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	769a      	strb	r2, [r3, #26]
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000198 	.word	0x20000198

08001dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6193      	str	r3, [r2, #24]
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a0e      	ldr	r2, [pc, #56]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <HAL_MspInit+0x5c>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_MspInit+0x60>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <HAL_MspInit+0x60>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000

08001e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <HAL_I2C_MspInit+0x90>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d132      	bne.n	8001eb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e50:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <HAL_I2C_MspInit+0x94>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_I2C_MspInit+0x94>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <HAL_I2C_MspInit+0x94>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6e:	2312      	movs	r3, #18
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4812      	ldr	r0, [pc, #72]	@ (8001ec8 <HAL_I2C_MspInit+0x98>)
 8001e7e:	f000 fb81 	bl	8002584 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_I2C_MspInit+0x9c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <HAL_I2C_MspInit+0x9c>)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_I2C_MspInit+0x94>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_I2C_MspInit+0x94>)
 8001ea4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_I2C_MspInit+0x94>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f26:	d117      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f40:	2303      	movs	r3, #3
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <HAL_TIM_MspPostInit+0x5c>)
 8001f54:	f000 fb16 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800

08001f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a22      	ldr	r2, [pc, #136]	@ (800200c <HAL_UART_MspInit+0xa4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d13d      	bne.n	8002004 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f88:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <HAL_UART_MspInit+0xa8>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a20      	ldr	r2, [pc, #128]	@ (8002010 <HAL_UART_MspInit+0xa8>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <HAL_UART_MspInit+0xa8>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <HAL_UART_MspInit+0xa8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8002010 <HAL_UART_MspInit+0xa8>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_UART_MspInit+0xa8>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fb8:	2340      	movs	r3, #64	@ 0x40
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4812      	ldr	r0, [pc, #72]	@ (8002014 <HAL_UART_MspInit+0xac>)
 8001fcc:	f000 fada 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	480c      	ldr	r0, [pc, #48]	@ (8002014 <HAL_UART_MspInit+0xac>)
 8001fe4:	f000 face 	bl	8002584 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_UART_MspInit+0xb0>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffe:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <HAL_UART_MspInit+0xb0>)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	@ 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013800 	.word	0x40013800
 8002010:	40021000 	.word	0x40021000
 8002014:	40010c00 	.word	0x40010c00
 8002018:	40010000 	.word	0x40010000

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 f8b4 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <USART1_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <USART1_IRQHandler+0x10>)
 800207a:	f002 feab 	bl	8004dd4 <HAL_UART_IRQHandler>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000150 	.word	0x20000150

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f003 fc04 	bl	80058c4 <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20005000 	.word	0x20005000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	200001b4 	.word	0x200001b4
 80020f0:	20000308 	.word	0x20000308

080020f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002100:	f7ff fff8 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002106:	490c      	ldr	r1, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002108:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <LoopFillZerobss+0x16>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800211c:	4c09      	ldr	r4, [pc, #36]	@ (8002144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212a:	f003 fbd1 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212e:	f7ff f8fb 	bl	8001328 <main>
  bx lr
 8002132:	4770      	bx	lr
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800213c:	080074f0 	.word	0x080074f0
  ldr r2, =_sbss
 8002140:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002144:	20000304 	.word	0x20000304

08002148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC1_2_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_Init+0x28>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_Init+0x28>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 f92b 	bl	80023b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	200f      	movs	r0, #15
 8002164:	f000 f808 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fe30 	bl	8001dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f935 	bl	8002406 <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f000 f90b 	bl	80023ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	@ (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000020 	.word	0x20000020
 80021d0:	20000028 	.word	0x20000028
 80021d4:	20000024 	.word	0x20000024

080021d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_IncTick+0x1c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_IncTick+0x20>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a03      	ldr	r2, [pc, #12]	@ (80021f8 <HAL_IncTick+0x20>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000028 	.word	0x20000028
 80021f8:	200001b8 	.word	0x200001b8

080021fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <HAL_GetTick+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	200001b8 	.word	0x200001b8

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff fff0 	bl	80021fc <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffe0 	bl	80021fc <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000028 	.word	0x20000028

08002258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002268:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002274:	4013      	ands	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	@ (800229c <__NVIC_SetPriorityGrouping+0x44>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a4:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <__NVIC_GetPriorityGrouping+0x18>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	f003 0307 	and.w	r3, r3, #7
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002384:	d301      	bcc.n	800238a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002386:	2301      	movs	r3, #1
 8002388:	e00f      	b.n	80023aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238a:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <SysTick_Config+0x40>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002392:	210f      	movs	r1, #15
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	f7ff ff90 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800239c:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <SysTick_Config+0x40>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <SysTick_Config+0x40>)
 80023a4:	2207      	movs	r2, #7
 80023a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff49 	bl	8002258 <__NVIC_SetPriorityGrouping>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e0:	f7ff ff5e 	bl	80022a0 <__NVIC_GetPriorityGrouping>
 80023e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f7ff ff90 	bl	8002310 <NVIC_EncodePriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff5f 	bl	80022bc <__NVIC_SetPriority>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ffb0 	bl	8002374 <SysTick_Config>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d008      	beq.n	8002448 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e020      	b.n	800248a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 020e 	bic.w	r2, r2, #14
 8002456:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d005      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e051      	b.n	800255c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 020e 	bic.w	r2, r2, #14
 80024c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a22      	ldr	r2, [pc, #136]	@ (8002568 <HAL_DMA_Abort_IT+0xd4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d029      	beq.n	8002536 <HAL_DMA_Abort_IT+0xa2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a21      	ldr	r2, [pc, #132]	@ (800256c <HAL_DMA_Abort_IT+0xd8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_Abort_IT+0x9e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002570 <HAL_DMA_Abort_IT+0xdc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01a      	beq.n	800252c <HAL_DMA_Abort_IT+0x98>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002574 <HAL_DMA_Abort_IT+0xe0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d012      	beq.n	8002526 <HAL_DMA_Abort_IT+0x92>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <HAL_DMA_Abort_IT+0xe4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00a      	beq.n	8002520 <HAL_DMA_Abort_IT+0x8c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	@ (800257c <HAL_DMA_Abort_IT+0xe8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_DMA_Abort_IT+0x86>
 8002514:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002518:	e00e      	b.n	8002538 <HAL_DMA_Abort_IT+0xa4>
 800251a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800251e:	e00b      	b.n	8002538 <HAL_DMA_Abort_IT+0xa4>
 8002520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002524:	e008      	b.n	8002538 <HAL_DMA_Abort_IT+0xa4>
 8002526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252a:	e005      	b.n	8002538 <HAL_DMA_Abort_IT+0xa4>
 800252c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002530:	e002      	b.n	8002538 <HAL_DMA_Abort_IT+0xa4>
 8002532:	2310      	movs	r3, #16
 8002534:	e000      	b.n	8002538 <HAL_DMA_Abort_IT+0xa4>
 8002536:	2301      	movs	r3, #1
 8002538:	4a11      	ldr	r2, [pc, #68]	@ (8002580 <HAL_DMA_Abort_IT+0xec>)
 800253a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
    } 
  }
  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020008 	.word	0x40020008
 800256c:	4002001c 	.word	0x4002001c
 8002570:	40020030 	.word	0x40020030
 8002574:	40020044 	.word	0x40020044
 8002578:	40020058 	.word	0x40020058
 800257c:	4002006c 	.word	0x4002006c
 8002580:	40020000 	.word	0x40020000

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b08b      	sub	sp, #44	@ 0x2c
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002596:	e169      	b.n	800286c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002598:	2201      	movs	r2, #1
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 8158 	bne.w	8002866 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a9a      	ldr	r2, [pc, #616]	@ (8002824 <HAL_GPIO_Init+0x2a0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d05e      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025c0:	4a98      	ldr	r2, [pc, #608]	@ (8002824 <HAL_GPIO_Init+0x2a0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d875      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025c6:	4a98      	ldr	r2, [pc, #608]	@ (8002828 <HAL_GPIO_Init+0x2a4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d058      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025cc:	4a96      	ldr	r2, [pc, #600]	@ (8002828 <HAL_GPIO_Init+0x2a4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d86f      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025d2:	4a96      	ldr	r2, [pc, #600]	@ (800282c <HAL_GPIO_Init+0x2a8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d052      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025d8:	4a94      	ldr	r2, [pc, #592]	@ (800282c <HAL_GPIO_Init+0x2a8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d869      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025de:	4a94      	ldr	r2, [pc, #592]	@ (8002830 <HAL_GPIO_Init+0x2ac>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d04c      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025e4:	4a92      	ldr	r2, [pc, #584]	@ (8002830 <HAL_GPIO_Init+0x2ac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d863      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025ea:	4a92      	ldr	r2, [pc, #584]	@ (8002834 <HAL_GPIO_Init+0x2b0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d046      	beq.n	800267e <HAL_GPIO_Init+0xfa>
 80025f0:	4a90      	ldr	r2, [pc, #576]	@ (8002834 <HAL_GPIO_Init+0x2b0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d85d      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025f6:	2b12      	cmp	r3, #18
 80025f8:	d82a      	bhi.n	8002650 <HAL_GPIO_Init+0xcc>
 80025fa:	2b12      	cmp	r3, #18
 80025fc:	d859      	bhi.n	80026b2 <HAL_GPIO_Init+0x12e>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <HAL_GPIO_Init+0x80>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	0800267f 	.word	0x0800267f
 8002608:	08002659 	.word	0x08002659
 800260c:	0800266b 	.word	0x0800266b
 8002610:	080026ad 	.word	0x080026ad
 8002614:	080026b3 	.word	0x080026b3
 8002618:	080026b3 	.word	0x080026b3
 800261c:	080026b3 	.word	0x080026b3
 8002620:	080026b3 	.word	0x080026b3
 8002624:	080026b3 	.word	0x080026b3
 8002628:	080026b3 	.word	0x080026b3
 800262c:	080026b3 	.word	0x080026b3
 8002630:	080026b3 	.word	0x080026b3
 8002634:	080026b3 	.word	0x080026b3
 8002638:	080026b3 	.word	0x080026b3
 800263c:	080026b3 	.word	0x080026b3
 8002640:	080026b3 	.word	0x080026b3
 8002644:	080026b3 	.word	0x080026b3
 8002648:	08002661 	.word	0x08002661
 800264c:	08002675 	.word	0x08002675
 8002650:	4a79      	ldr	r2, [pc, #484]	@ (8002838 <HAL_GPIO_Init+0x2b4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002656:	e02c      	b.n	80026b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	623b      	str	r3, [r7, #32]
          break;
 800265e:	e029      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	3304      	adds	r3, #4
 8002666:	623b      	str	r3, [r7, #32]
          break;
 8002668:	e024      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	3308      	adds	r3, #8
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e01f      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	330c      	adds	r3, #12
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e01a      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002686:	2304      	movs	r3, #4
 8002688:	623b      	str	r3, [r7, #32]
          break;
 800268a:	e013      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002694:	2308      	movs	r3, #8
 8002696:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	611a      	str	r2, [r3, #16]
          break;
 800269e:	e009      	b.n	80026b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a0:	2308      	movs	r3, #8
 80026a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	615a      	str	r2, [r3, #20]
          break;
 80026aa:	e003      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
          break;
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x130>
          break;
 80026b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2bff      	cmp	r3, #255	@ 0xff
 80026b8:	d801      	bhi.n	80026be <HAL_GPIO_Init+0x13a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	e001      	b.n	80026c2 <HAL_GPIO_Init+0x13e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2bff      	cmp	r3, #255	@ 0xff
 80026c8:	d802      	bhi.n	80026d0 <HAL_GPIO_Init+0x14c>
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x152>
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	3b08      	subs	r3, #8
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	210f      	movs	r1, #15
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	401a      	ands	r2, r3
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80b1 	beq.w	8002866 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002704:	4b4d      	ldr	r3, [pc, #308]	@ (800283c <HAL_GPIO_Init+0x2b8>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a4c      	ldr	r2, [pc, #304]	@ (800283c <HAL_GPIO_Init+0x2b8>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b4a      	ldr	r3, [pc, #296]	@ (800283c <HAL_GPIO_Init+0x2b8>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800271c:	4a48      	ldr	r2, [pc, #288]	@ (8002840 <HAL_GPIO_Init+0x2bc>)
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a40      	ldr	r2, [pc, #256]	@ (8002844 <HAL_GPIO_Init+0x2c0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_GPIO_Init+0x1ec>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3f      	ldr	r2, [pc, #252]	@ (8002848 <HAL_GPIO_Init+0x2c4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00d      	beq.n	800276c <HAL_GPIO_Init+0x1e8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3e      	ldr	r2, [pc, #248]	@ (800284c <HAL_GPIO_Init+0x2c8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <HAL_GPIO_Init+0x1e4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3d      	ldr	r2, [pc, #244]	@ (8002850 <HAL_GPIO_Init+0x2cc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_GPIO_Init+0x1e0>
 8002760:	2303      	movs	r3, #3
 8002762:	e006      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 8002764:	2304      	movs	r3, #4
 8002766:	e004      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 8002768:	2302      	movs	r3, #2
 800276a:	e002      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_GPIO_Init+0x1ee>
 8002770:	2300      	movs	r3, #0
 8002772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	4093      	lsls	r3, r2
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002782:	492f      	ldr	r1, [pc, #188]	@ (8002840 <HAL_GPIO_Init+0x2bc>)
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800279c:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	492c      	ldr	r1, [pc, #176]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4928      	ldr	r1, [pc, #160]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027c4:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	4922      	ldr	r1, [pc, #136]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60cb      	str	r3, [r1, #12]
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	43db      	mvns	r3, r3
 80027da:	491e      	ldr	r1, [pc, #120]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	4918      	ldr	r1, [pc, #96]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	43db      	mvns	r3, r3
 8002802:	4914      	ldr	r1, [pc, #80]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 8002804:	4013      	ands	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d021      	beq.n	8002858 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002814:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	490e      	ldr	r1, [pc, #56]	@ (8002854 <HAL_GPIO_Init+0x2d0>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e021      	b.n	8002866 <HAL_GPIO_Init+0x2e2>
 8002822:	bf00      	nop
 8002824:	10320000 	.word	0x10320000
 8002828:	10310000 	.word	0x10310000
 800282c:	10220000 	.word	0x10220000
 8002830:	10210000 	.word	0x10210000
 8002834:	10120000 	.word	0x10120000
 8002838:	10110000 	.word	0x10110000
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	40010800 	.word	0x40010800
 8002848:	40010c00 	.word	0x40010c00
 800284c:	40011000 	.word	0x40011000
 8002850:	40011400 	.word	0x40011400
 8002854:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_GPIO_Init+0x304>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	43db      	mvns	r3, r3
 8002860:	4909      	ldr	r1, [pc, #36]	@ (8002888 <HAL_GPIO_Init+0x304>)
 8002862:	4013      	ands	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	3301      	adds	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	f47f ae8e 	bne.w	8002598 <HAL_GPIO_Init+0x14>
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	372c      	adds	r7, #44	@ 0x2c
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	611a      	str	r2, [r3, #16]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e12b      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff faa4 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	@ 0x24
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800290e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800291e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002920:	f001 fd1e 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a81      	ldr	r2, [pc, #516]	@ (8002b30 <HAL_I2C_Init+0x274>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d807      	bhi.n	8002940 <HAL_I2C_Init+0x84>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a80      	ldr	r2, [pc, #512]	@ (8002b34 <HAL_I2C_Init+0x278>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e006      	b.n	800294e <HAL_I2C_Init+0x92>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a7d      	ldr	r2, [pc, #500]	@ (8002b38 <HAL_I2C_Init+0x27c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	bf94      	ite	ls
 8002948:	2301      	movls	r3, #1
 800294a:	2300      	movhi	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0e7      	b.n	8002b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a78      	ldr	r2, [pc, #480]	@ (8002b3c <HAL_I2C_Init+0x280>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a6a      	ldr	r2, [pc, #424]	@ (8002b30 <HAL_I2C_Init+0x274>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d802      	bhi.n	8002990 <HAL_I2C_Init+0xd4>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3301      	adds	r3, #1
 800298e:	e009      	b.n	80029a4 <HAL_I2C_Init+0xe8>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	4a69      	ldr	r2, [pc, #420]	@ (8002b40 <HAL_I2C_Init+0x284>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	3301      	adds	r3, #1
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	495c      	ldr	r1, [pc, #368]	@ (8002b30 <HAL_I2C_Init+0x274>)
 80029c0:	428b      	cmp	r3, r1
 80029c2:	d819      	bhi.n	80029f8 <HAL_I2C_Init+0x13c>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1e59      	subs	r1, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d2:	1c59      	adds	r1, r3, #1
 80029d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029d8:	400b      	ands	r3, r1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_I2C_Init+0x138>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1e59      	subs	r1, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f2:	e051      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f4:	2304      	movs	r3, #4
 80029f6:	e04f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <HAL_I2C_Init+0x168>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e012      	b.n	8002a4a <HAL_I2C_Init+0x18e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e58      	subs	r0, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	0099      	lsls	r1, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Init+0x196>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e022      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_I2C_Init+0x1bc>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1e58      	subs	r0, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	440b      	add	r3, r1
 8002a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Init+0x1dc>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	6809      	ldr	r1, [r1, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6911      	ldr	r1, [r2, #16]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	000186a0 	.word	0x000186a0
 8002b34:	001e847f 	.word	0x001e847f
 8002b38:	003d08ff 	.word	0x003d08ff
 8002b3c:	431bde83 	.word	0x431bde83
 8002b40:	10624dd3 	.word	0x10624dd3

08002b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	460b      	mov	r3, r1
 8002b58:	813b      	strh	r3, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b5e:	f7ff fb4d 	bl	80021fc <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	f040 80d9 	bne.w	8002d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2319      	movs	r3, #25
 8002b78:	2201      	movs	r2, #1
 8002b7a:	496d      	ldr	r1, [pc, #436]	@ (8002d30 <HAL_I2C_Mem_Write+0x1ec>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fdef 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e0cc      	b.n	8002d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Mem_Write+0x56>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0c5      	b.n	8002d26 <HAL_I2C_Mem_Write+0x1e2>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d007      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2221      	movs	r2, #33	@ 0x21
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2240      	movs	r2, #64	@ 0x40
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8002d34 <HAL_I2C_Mem_Write+0x1f0>)
 8002c00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c02:	88f8      	ldrh	r0, [r7, #6]
 8002c04:	893a      	ldrh	r2, [r7, #8]
 8002c06:	8979      	ldrh	r1, [r7, #10]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4603      	mov	r3, r0
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fc26 	bl	8003464 <I2C_RequestMemoryWrite>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d052      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e081      	b.n	8002d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 feb4 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d107      	bne.n	8002c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e06b      	b.n	8002d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_I2C_Mem_Write+0x180>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1aa      	bne.n	8002c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fea7 	bl	8003a24 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d107      	bne.n	8002cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e016      	b.n	8002d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	00100002 	.word	0x00100002
 8002d34:	ffff0000 	.word	0xffff0000

08002d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08c      	sub	sp, #48	@ 0x30
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	4608      	mov	r0, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	461a      	mov	r2, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	817b      	strh	r3, [r7, #10]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	813b      	strh	r3, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d56:	f7ff fa51 	bl	80021fc <HAL_GetTick>
 8002d5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 8244 	bne.w	80031f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2319      	movs	r3, #25
 8002d70:	2201      	movs	r2, #1
 8002d72:	4982      	ldr	r1, [pc, #520]	@ (8002f7c <HAL_I2C_Mem_Read+0x244>)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fcf3 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	e237      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Mem_Read+0x5a>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e230      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d007      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2222      	movs	r2, #34	@ 0x22
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2240      	movs	r2, #64	@ 0x40
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a62      	ldr	r2, [pc, #392]	@ (8002f80 <HAL_I2C_Mem_Read+0x248>)
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dfa:	88f8      	ldrh	r0, [r7, #6]
 8002dfc:	893a      	ldrh	r2, [r7, #8]
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 fbc0 	bl	8003590 <I2C_RequestMemoryRead>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e1ec      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d113      	bne.n	8002e4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e1c0      	b.n	80031cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d11e      	bne.n	8002e90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e62:	b672      	cpsid	i
}
 8002e64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e8c:	b662      	cpsie	i
}
 8002e8e:	e035      	b.n	8002efc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11e      	bne.n	8002ed6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ed2:	b662      	cpsie	i
}
 8002ed4:	e012      	b.n	8002efc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ee4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002efc:	e166      	b.n	80031cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	f200 811f 	bhi.w	8003146 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d123      	bne.n	8002f58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fdcd 	bl	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e167      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f56:	e139      	b.n	80031cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d152      	bne.n	8003006 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f66:	2200      	movs	r2, #0
 8002f68:	4906      	ldr	r1, [pc, #24]	@ (8002f84 <HAL_I2C_Mem_Read+0x24c>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fbf8 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e13c      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
 8002f7a:	bf00      	nop
 8002f7c:	00100002 	.word	0x00100002
 8002f80:	ffff0000 	.word	0xffff0000
 8002f84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f88:	b672      	cpsid	i
}
 8002f8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fce:	b662      	cpsie	i
}
 8002fd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003004:	e0e2      	b.n	80031cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	2200      	movs	r2, #0
 800300e:	497b      	ldr	r1, [pc, #492]	@ (80031fc <HAL_I2C_Mem_Read+0x4c4>)
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fba5 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0e9      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800302e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003030:	b672      	cpsid	i
}
 8003032:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003066:	4b66      	ldr	r3, [pc, #408]	@ (8003200 <HAL_I2C_Mem_Read+0x4c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	08db      	lsrs	r3, r3, #3
 800306c:	4a65      	ldr	r2, [pc, #404]	@ (8003204 <HAL_I2C_Mem_Read+0x4cc>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0a1a      	lsrs	r2, r3, #8
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00da      	lsls	r2, r3, #3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	3b01      	subs	r3, #1
 8003084:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d118      	bne.n	80030be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030ae:	b662      	cpsie	i
}
 80030b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e09a      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d1d9      	bne.n	8003080 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800310e:	b662      	cpsie	i
}
 8003110:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003144:	e042      	b.n	80031cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fcb2 	bl	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e04c      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d118      	bne.n	80031cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f ae94 	bne.w	8002efe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	@ 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	00010004 	.word	0x00010004
 8003200:	20000020 	.word	0x20000020
 8003204:	14f8b589 	.word	0x14f8b589

08003208 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7fe fff0 	bl	80021fc <HAL_GetTick>
 800321c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	f040 8111 	bne.w	8003452 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2319      	movs	r3, #25
 8003236:	2201      	movs	r2, #1
 8003238:	4988      	ldr	r1, [pc, #544]	@ (800345c <HAL_I2C_IsDeviceReady+0x254>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa90 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e104      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2C_IsDeviceReady+0x50>
 8003254:	2302      	movs	r3, #2
 8003256:	e0fd      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d007      	beq.n	800327e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2224      	movs	r2, #36	@ 0x24
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a70      	ldr	r2, [pc, #448]	@ (8003460 <HAL_I2C_IsDeviceReady+0x258>)
 80032a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fa4e 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d8:	d103      	bne.n	80032e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0b6      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fe ff81 	bl	80021fc <HAL_GetTick>
 80032fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800332a:	e025      	b.n	8003378 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fe ff66 	bl	80021fc <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <HAL_I2C_IsDeviceReady+0x13a>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22a0      	movs	r2, #160	@ 0xa0
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2ba0      	cmp	r3, #160	@ 0xa0
 8003382:	d005      	beq.n	8003390 <HAL_I2C_IsDeviceReady+0x188>
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_I2C_IsDeviceReady+0x188>
 800338a:	7dbb      	ldrb	r3, [r7, #22]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0cd      	beq.n	800332c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d129      	bne.n	80033fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2319      	movs	r3, #25
 80033d2:	2201      	movs	r2, #1
 80033d4:	4921      	ldr	r1, [pc, #132]	@ (800345c <HAL_I2C_IsDeviceReady+0x254>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9c2 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e036      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e02c      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003408:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003412:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	490f      	ldr	r1, [pc, #60]	@ (800345c <HAL_I2C_IsDeviceReady+0x254>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f99e 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e012      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3301      	adds	r3, #1
 8003432:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	f4ff af32 	bcc.w	80032a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	00100002 	.word	0x00100002
 8003460:	ffff0000 	.word	0xffff0000

08003464 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	817b      	strh	r3, [r7, #10]
 8003476:	460b      	mov	r3, r1
 8003478:	813b      	strh	r3, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800348c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	2200      	movs	r2, #0
 8003496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f960 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b4:	d103      	bne.n	80034be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e05f      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	492d      	ldr	r1, [pc, #180]	@ (800358c <I2C_RequestMemoryWrite+0x128>)
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f9bb 	bl	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04c      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa46 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02b      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003530:	893b      	ldrh	r3, [r7, #8]
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	e021      	b.n	8003580 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800353c:	893b      	ldrh	r3, [r7, #8]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b29b      	uxth	r3, r3
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354c:	6a39      	ldr	r1, [r7, #32]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fa20 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	2b04      	cmp	r3, #4
 8003560:	d107      	bne.n	8003572 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e005      	b.n	8003582 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	00010002 	.word	0x00010002

08003590 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8c2 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f0:	d103      	bne.n	80035fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0aa      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800360c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	4952      	ldr	r1, [pc, #328]	@ (800375c <I2C_RequestMemoryRead+0x1cc>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f91d 	bl	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e097      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f9a8 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e076      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	e021      	b.n	80036bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	b29b      	uxth	r3, r3
 800367e:	b2da      	uxtb	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f982 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e050      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b2:	893b      	ldrh	r3, [r7, #8]
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036be:	6a39      	ldr	r1, [r7, #32]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f967 	bl	8003994 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d107      	bne.n	80036e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e035      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	2200      	movs	r2, #0
 8003700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f82b 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800371e:	d103      	bne.n	8003728 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e013      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800372c:	897b      	ldrh	r3, [r7, #10]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	4906      	ldr	r1, [pc, #24]	@ (800375c <I2C_RequestMemoryRead+0x1cc>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f886 	bl	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	00010002 	.word	0x00010002

08003760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	e048      	b.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d044      	beq.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fd3f 	bl	80021fc <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d139      	bne.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	0c1b      	lsrs	r3, r3, #16
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d10d      	bne.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	43da      	mvns	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	e00c      	b.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	43da      	mvns	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d116      	bne.n	8003804 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e023      	b.n	800384c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10d      	bne.n	800382a <I2C_WaitOnFlagUntilTimeout+0xca>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	e00c      	b.n	8003844 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	43da      	mvns	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d093      	beq.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003862:	e071      	b.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003872:	d123      	bne.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003882:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f043 0204 	orr.w	r2, r3, #4
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e067      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d041      	beq.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7fe fc9a 	bl	80021fc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d136      	bne.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10c      	bne.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e00b      	b.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	43da      	mvns	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e021      	b.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10c      	bne.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e00b      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4013      	ands	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f af6d 	bne.w	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a0:	e034      	b.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f8e3 	bl	8003b6e <I2C_IsAcknowledgeFailed>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e034      	b.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d028      	beq.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fc1f 	bl	80021fc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11d      	bne.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d016      	beq.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e007      	b.n	8003a1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	2b80      	cmp	r3, #128	@ 0x80
 8003a18:	d1c3      	bne.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a30:	e034      	b.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f89b 	bl	8003b6e <I2C_IsAcknowledgeFailed>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e034      	b.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d028      	beq.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7fe fbd7 	bl	80021fc <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11d      	bne.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d016      	beq.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e007      	b.n	8003aac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d1c3      	bne.n	8003a32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac0:	e049      	b.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d119      	bne.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0210 	mvn.w	r2, #16
 8003ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e030      	b.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fe fb7a 	bl	80021fc <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11d      	bne.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d016      	beq.n	8003b56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d1ae      	bne.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b84:	d11b      	bne.n	8003bbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e272      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8087 	beq.w	8003cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bec:	4b92      	ldr	r3, [pc, #584]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d00c      	beq.n	8003c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bf8:	4b8f      	ldr	r3, [pc, #572]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d112      	bne.n	8003c2a <HAL_RCC_OscConfig+0x5e>
 8003c04:	4b8c      	ldr	r3, [pc, #560]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c10:	d10b      	bne.n	8003c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c12:	4b89      	ldr	r3, [pc, #548]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d06c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x12c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d168      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e24c      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x76>
 8003c34:	4b80      	ldr	r3, [pc, #512]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7f      	ldr	r2, [pc, #508]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e02e      	b.n	8003ca0 <HAL_RCC_OscConfig+0xd4>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x98>
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a7a      	ldr	r2, [pc, #488]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4b78      	ldr	r3, [pc, #480]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a77      	ldr	r2, [pc, #476]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e01d      	b.n	8003ca0 <HAL_RCC_OscConfig+0xd4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0xbc>
 8003c6e:	4b72      	ldr	r3, [pc, #456]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a71      	ldr	r2, [pc, #452]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0xd4>
 8003c88:	4b6b      	ldr	r3, [pc, #428]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b68      	ldr	r3, [pc, #416]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a67      	ldr	r2, [pc, #412]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe faa8 	bl	80021fc <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe faa4 	bl	80021fc <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e200      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe4>
 8003cce:	e014      	b.n	8003cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fa94 	bl	80021fc <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fe fa90 	bl	80021fc <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e1ec      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x10c>
 8003cf6:	e000      	b.n	8003cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d063      	beq.n	8003dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d06:	4b4c      	ldr	r3, [pc, #304]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d12:	4b49      	ldr	r3, [pc, #292]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d11c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x18c>
 8003d1e:	4b46      	ldr	r3, [pc, #280]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	4b43      	ldr	r3, [pc, #268]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_RCC_OscConfig+0x176>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e1c0      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d42:	4b3d      	ldr	r3, [pc, #244]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4939      	ldr	r1, [pc, #228]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d56:	e03a      	b.n	8003dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d020      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d60:	4b36      	ldr	r3, [pc, #216]	@ (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe fa49 	bl	80021fc <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fa45 	bl	80021fc <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1a1      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4927      	ldr	r1, [pc, #156]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]
 8003da0:	e015      	b.n	8003dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da2:	4b26      	ldr	r3, [pc, #152]	@ (8003e3c <HAL_RCC_OscConfig+0x270>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe fa28 	bl	80021fc <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db0:	f7fe fa24 	bl	80021fc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e180      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d03a      	beq.n	8003e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d019      	beq.n	8003e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de2:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <HAL_RCC_OscConfig+0x274>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de8:	f7fe fa08 	bl	80021fc <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fe fa04 	bl	80021fc <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e160      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e0e:	2001      	movs	r0, #1
 8003e10:	f000 face 	bl	80043b0 <RCC_Delay>
 8003e14:	e01c      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e16:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <HAL_RCC_OscConfig+0x274>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe f9ee 	bl	80021fc <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e22:	e00f      	b.n	8003e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fe f9ea 	bl	80021fc <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d908      	bls.n	8003e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e146      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	42420000 	.word	0x42420000
 8003e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	4b92      	ldr	r3, [pc, #584]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e9      	bne.n	8003e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80a6 	beq.w	8003faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b8b      	ldr	r3, [pc, #556]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	4a87      	ldr	r2, [pc, #540]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	61d3      	str	r3, [r2, #28]
 8003e7a:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	4b82      	ldr	r3, [pc, #520]	@ (8004094 <HAL_RCC_OscConfig+0x4c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d118      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e96:	4b7f      	ldr	r3, [pc, #508]	@ (8004094 <HAL_RCC_OscConfig+0x4c8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004094 <HAL_RCC_OscConfig+0x4c8>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea2:	f7fe f9ab 	bl	80021fc <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fe f9a7 	bl	80021fc <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b64      	cmp	r3, #100	@ 0x64
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e103      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	4b75      	ldr	r3, [pc, #468]	@ (8004094 <HAL_RCC_OscConfig+0x4c8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x312>
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6213      	str	r3, [r2, #32]
 8003edc:	e02d      	b.n	8003f3a <HAL_RCC_OscConfig+0x36e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x334>
 8003ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4a69      	ldr	r2, [pc, #420]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6213      	str	r3, [r2, #32]
 8003ef2:	4b67      	ldr	r3, [pc, #412]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a66      	ldr	r2, [pc, #408]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	f023 0304 	bic.w	r3, r3, #4
 8003efc:	6213      	str	r3, [r2, #32]
 8003efe:	e01c      	b.n	8003f3a <HAL_RCC_OscConfig+0x36e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d10c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x356>
 8003f08:	4b61      	ldr	r3, [pc, #388]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4a60      	ldr	r2, [pc, #384]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6213      	str	r3, [r2, #32]
 8003f14:	4b5e      	ldr	r3, [pc, #376]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4a5d      	ldr	r2, [pc, #372]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6213      	str	r3, [r2, #32]
 8003f20:	e00b      	b.n	8003f3a <HAL_RCC_OscConfig+0x36e>
 8003f22:	4b5b      	ldr	r3, [pc, #364]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4a5a      	ldr	r2, [pc, #360]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6213      	str	r3, [r2, #32]
 8003f2e:	4b58      	ldr	r3, [pc, #352]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4a57      	ldr	r2, [pc, #348]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d015      	beq.n	8003f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fe f95b 	bl	80021fc <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe f957 	bl	80021fc <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0b1      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	4b4b      	ldr	r3, [pc, #300]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ee      	beq.n	8003f4a <HAL_RCC_OscConfig+0x37e>
 8003f6c:	e014      	b.n	8003f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f945 	bl	80021fc <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe f941 	bl	80021fc <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e09b      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8c:	4b40      	ldr	r3, [pc, #256]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1ee      	bne.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8087 	beq.w	80040c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb4:	4b36      	ldr	r3, [pc, #216]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d061      	beq.n	8004084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d146      	bne.n	8004056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe f915 	bl	80021fc <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe f911 	bl	80021fc <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e06d      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe8:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ffc:	d108      	bne.n	8004010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4921      	ldr	r1, [pc, #132]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004010:	4b1f      	ldr	r3, [pc, #124]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a19      	ldr	r1, [r3, #32]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	430b      	orrs	r3, r1
 8004022:	491b      	ldr	r1, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004028:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <HAL_RCC_OscConfig+0x4cc>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fe f8e5 	bl	80021fc <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004036:	f7fe f8e1 	bl	80021fc <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e03d      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x46a>
 8004054:	e035      	b.n	80040c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fe f8ce 	bl	80021fc <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fe f8ca 	bl	80021fc <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e026      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x498>
 8004082:	e01e      	b.n	80040c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e019      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
 8004090:	40021000 	.word	0x40021000
 8004094:	40007000 	.word	0x40007000
 8004098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800409c:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_OscConfig+0x500>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d106      	bne.n	80040be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d0      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d910      	bls.n	8004114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b67      	ldr	r3, [pc, #412]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	4965      	ldr	r1, [pc, #404]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b63      	ldr	r3, [pc, #396]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0b8      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800412c:	4b59      	ldr	r3, [pc, #356]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a58      	ldr	r2, [pc, #352]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004144:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4a52      	ldr	r2, [pc, #328]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800414e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b50      	ldr	r3, [pc, #320]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	494d      	ldr	r1, [pc, #308]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d040      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b47      	ldr	r3, [pc, #284]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d115      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e07f      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	4b41      	ldr	r3, [pc, #260]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e073      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e06b      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ae:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f023 0203 	bic.w	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4936      	ldr	r1, [pc, #216]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041c0:	f7fe f81c 	bl	80021fc <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	e00a      	b.n	80041de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c8:	f7fe f818 	bl	80021fc <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e053      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	4b2d      	ldr	r3, [pc, #180]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 020c 	and.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1eb      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041f0:	4b27      	ldr	r3, [pc, #156]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d210      	bcs.n	8004220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b24      	ldr	r3, [pc, #144]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0207 	bic.w	r2, r3, #7
 8004206:	4922      	ldr	r1, [pc, #136]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e032      	b.n	8004286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4916      	ldr	r1, [pc, #88]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800424a:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	490e      	ldr	r1, [pc, #56]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800425e:	f000 f821 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8004262:	4602      	mov	r2, r0
 8004264:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	490a      	ldr	r1, [pc, #40]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	5ccb      	ldrb	r3, [r1, r3]
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	4a09      	ldr	r2, [pc, #36]	@ (800429c <HAL_RCC_ClockConfig+0x1cc>)
 8004278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800427a:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <HAL_RCC_ClockConfig+0x1d0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd ff7a 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40022000 	.word	0x40022000
 8004294:	40021000 	.word	0x40021000
 8004298:	0800740c 	.word	0x0800740c
 800429c:	20000020 	.word	0x20000020
 80042a0:	20000024 	.word	0x20000024

080042a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042be:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x94>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d002      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x30>
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d003      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x36>
 80042d2:	e027      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <HAL_RCC_GetSysClockFreq+0x98>)
 80042d6:	613b      	str	r3, [r7, #16]
      break;
 80042d8:	e027      	b.n	800432a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0c9b      	lsrs	r3, r3, #18
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	4a17      	ldr	r2, [pc, #92]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042f2:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x94>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	0c5b      	lsrs	r3, r3, #17
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	4a11      	ldr	r2, [pc, #68]	@ (8004344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a0d      	ldr	r2, [pc, #52]	@ (800433c <HAL_RCC_GetSysClockFreq+0x98>)
 8004306:	fb03 f202 	mul.w	r2, r3, r2
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e004      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a0c      	ldr	r2, [pc, #48]	@ (8004348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004318:	fb02 f303 	mul.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	613b      	str	r3, [r7, #16]
      break;
 8004322:	e002      	b.n	800432a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004324:	4b05      	ldr	r3, [pc, #20]	@ (800433c <HAL_RCC_GetSysClockFreq+0x98>)
 8004326:	613b      	str	r3, [r7, #16]
      break;
 8004328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800432a:	693b      	ldr	r3, [r7, #16]
}
 800432c:	4618      	mov	r0, r3
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	007a1200 	.word	0x007a1200
 8004340:	08007424 	.word	0x08007424
 8004344:	08007434 	.word	0x08007434
 8004348:	003d0900 	.word	0x003d0900

0800434c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004350:	4b02      	ldr	r3, [pc, #8]	@ (800435c <HAL_RCC_GetHCLKFreq+0x10>)
 8004352:	681b      	ldr	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	20000020 	.word	0x20000020

08004360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004364:	f7ff fff2 	bl	800434c <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4903      	ldr	r1, [pc, #12]	@ (8004384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800437c:	4618      	mov	r0, r3
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	0800741c 	.word	0x0800741c

08004388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800438c:	f7ff ffde 	bl	800434c <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	0adb      	lsrs	r3, r3, #11
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4903      	ldr	r1, [pc, #12]	@ (80043ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	0800741c 	.word	0x0800741c

080043b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <RCC_Delay+0x34>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <RCC_Delay+0x38>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	0a5b      	lsrs	r3, r3, #9
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043cc:	bf00      	nop
  }
  while (Delay --);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	60fa      	str	r2, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f9      	bne.n	80043cc <RCC_Delay+0x1c>
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	20000020 	.word	0x20000020
 80043e8:	10624dd3 	.word	0x10624dd3

080043ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e041      	b.n	8004482 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fd5c 	bl	8001ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 f992 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_TIM_PWM_Start+0x24>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	bf14      	ite	ne
 80044a8:	2301      	movne	r3, #1
 80044aa:	2300      	moveq	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e022      	b.n	80044f6 <HAL_TIM_PWM_Start+0x6a>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d109      	bne.n	80044ca <HAL_TIM_PWM_Start+0x3e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	bf14      	ite	ne
 80044c2:	2301      	movne	r3, #1
 80044c4:	2300      	moveq	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	e015      	b.n	80044f6 <HAL_TIM_PWM_Start+0x6a>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d109      	bne.n	80044e4 <HAL_TIM_PWM_Start+0x58>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	bf14      	ite	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	2300      	moveq	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e008      	b.n	80044f6 <HAL_TIM_PWM_Start+0x6a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e05e      	b.n	80045bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_TIM_PWM_Start+0x82>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800450c:	e013      	b.n	8004536 <HAL_TIM_PWM_Start+0xaa>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d104      	bne.n	800451e <HAL_TIM_PWM_Start+0x92>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800451c:	e00b      	b.n	8004536 <HAL_TIM_PWM_Start+0xaa>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800452c:	e003      	b.n	8004536 <HAL_TIM_PWM_Start+0xaa>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 faf2 	bl	8004b28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <HAL_TIM_PWM_Start+0x138>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d107      	bne.n	800455e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_TIM_PWM_Start+0x138>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_TIM_PWM_Start+0xfa>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004570:	d009      	beq.n	8004586 <HAL_TIM_PWM_Start+0xfa>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <HAL_TIM_PWM_Start+0x13c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIM_PWM_Start+0xfa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a12      	ldr	r2, [pc, #72]	@ (80045cc <HAL_TIM_PWM_Start+0x140>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d010      	beq.n	80045ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	e007      	b.n	80045ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800

080045d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0ae      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	f200 809f 	bhi.w	800473c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004639 	.word	0x08004639
 8004608:	0800473d 	.word	0x0800473d
 800460c:	0800473d 	.word	0x0800473d
 8004610:	0800473d 	.word	0x0800473d
 8004614:	08004679 	.word	0x08004679
 8004618:	0800473d 	.word	0x0800473d
 800461c:	0800473d 	.word	0x0800473d
 8004620:	0800473d 	.word	0x0800473d
 8004624:	080046bb 	.word	0x080046bb
 8004628:	0800473d 	.word	0x0800473d
 800462c:	0800473d 	.word	0x0800473d
 8004630:	0800473d 	.word	0x0800473d
 8004634:	080046fb 	.word	0x080046fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f8ea 	bl	8004818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0208 	orr.w	r2, r2, #8
 8004652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0204 	bic.w	r2, r2, #4
 8004662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6999      	ldr	r1, [r3, #24]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	619a      	str	r2, [r3, #24]
      break;
 8004676:	e064      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f930 	bl	80048e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	619a      	str	r2, [r3, #24]
      break;
 80046b8:	e043      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f979 	bl	80049b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0208 	orr.w	r2, r2, #8
 80046d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0204 	bic.w	r2, r2, #4
 80046e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
      break;
 80046f8:	e023      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f9c3 	bl	8004a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	021a      	lsls	r2, r3, #8
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	61da      	str	r2, [r3, #28]
      break;
 800473a:	e002      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800474a:	7dfb      	ldrb	r3, [r7, #23]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a29      	ldr	r2, [pc, #164]	@ (800480c <TIM_Base_SetConfig+0xb8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0x30>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0x30>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a26      	ldr	r2, [pc, #152]	@ (8004810 <TIM_Base_SetConfig+0xbc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0x30>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a25      	ldr	r2, [pc, #148]	@ (8004814 <TIM_Base_SetConfig+0xc0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d108      	bne.n	8004796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <TIM_Base_SetConfig+0xb8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00b      	beq.n	80047b6 <TIM_Base_SetConfig+0x62>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a4:	d007      	beq.n	80047b6 <TIM_Base_SetConfig+0x62>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a19      	ldr	r2, [pc, #100]	@ (8004810 <TIM_Base_SetConfig+0xbc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_Base_SetConfig+0x62>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a18      	ldr	r2, [pc, #96]	@ (8004814 <TIM_Base_SetConfig+0xc0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d108      	bne.n	80047c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <TIM_Base_SetConfig+0xb8>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d103      	bne.n	80047fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	615a      	str	r2, [r3, #20]
}
 8004802:	bf00      	nop
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800

08004818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f023 0201 	bic.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 0302 	bic.w	r3, r3, #2
 8004860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <TIM_OC1_SetConfig+0xc8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d10c      	bne.n	800488e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0308 	bic.w	r3, r3, #8
 800487a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 0304 	bic.w	r3, r3, #4
 800488c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a13      	ldr	r2, [pc, #76]	@ (80048e0 <TIM_OC1_SetConfig+0xc8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d111      	bne.n	80048ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	621a      	str	r2, [r3, #32]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012c00 	.word	0x40012c00

080048e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f023 0210 	bic.w	r2, r3, #16
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0320 	bic.w	r3, r3, #32
 800492e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1d      	ldr	r2, [pc, #116]	@ (80049b4 <TIM_OC2_SetConfig+0xd0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10d      	bne.n	8004960 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800494a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800495e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <TIM_OC2_SetConfig+0xd0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d113      	bne.n	8004990 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800496e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	40012c00 	.word	0x40012c00

080049b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1d      	ldr	r2, [pc, #116]	@ (8004a88 <TIM_OC3_SetConfig+0xd0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d10d      	bne.n	8004a32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a14      	ldr	r2, [pc, #80]	@ (8004a88 <TIM_OC3_SetConfig+0xd0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d113      	bne.n	8004a62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	621a      	str	r2, [r3, #32]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00

08004a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	031b      	lsls	r3, r3, #12
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8004b24 <TIM_OC4_SetConfig+0x98>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d109      	bne.n	8004b00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	40012c00 	.word	0x40012c00

08004b28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1a      	ldr	r2, [r3, #32]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e046      	b.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a16      	ldr	r2, [pc, #88]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd4:	d009      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a12      	ldr	r2, [pc, #72]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a10      	ldr	r2, [pc, #64]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10c      	bne.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800

08004c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e042      	b.n	8004cc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd f988 	bl	8001f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	@ 0x24
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fd71 	bl	8005758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d16d      	bne.n	8004dc8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_UART_Transmit+0x2c>
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e066      	b.n	8004dca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2221      	movs	r2, #33	@ 0x21
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d0a:	f7fd fa77 	bl	80021fc <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d24:	d108      	bne.n	8004d38 <HAL_UART_Transmit+0x6c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e003      	b.n	8004d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d40:	e02a      	b.n	8004d98 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 faf9 	bl	8005344 <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e036      	b.n	8004dca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	3302      	adds	r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e007      	b.n	8004d8a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1cf      	bne.n	8004d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2200      	movs	r2, #0
 8004daa:	2140      	movs	r1, #64	@ 0x40
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fac9 	bl	8005344 <UART_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e006      	b.n	8004dca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e000      	b.n	8004dca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004dc8:	2302      	movs	r3, #2
  }
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b0ba      	sub	sp, #232	@ 0xe8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10f      	bne.n	8004e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_UART_IRQHandler+0x66>
 8004e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fbd1 	bl	80055da <UART_Receive_IT>
      return;
 8004e38:	e25b      	b.n	80052f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80de 	beq.w	8005000 <HAL_UART_IRQHandler+0x22c>
 8004e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80d1 	beq.w	8005000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_UART_IRQHandler+0xae>
 8004e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <HAL_UART_IRQHandler+0xd2>
 8004e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f043 0202 	orr.w	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_UART_IRQHandler+0xf6>
 8004eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	f043 0204 	orr.w	r2, r3, #4
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d011      	beq.n	8004efa <HAL_UART_IRQHandler+0x126>
 8004ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	f043 0208 	orr.w	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 81f2 	beq.w	80052e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_UART_IRQHandler+0x14e>
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fb5c 	bl	80055da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <HAL_UART_IRQHandler+0x17a>
 8004f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d04f      	beq.n	8004fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa66 	bl	8005420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d041      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3314      	adds	r3, #20
 8004f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1d9      	bne.n	8004f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d013      	beq.n	8004fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	4a7e      	ldr	r2, [pc, #504]	@ (80051b4 <HAL_UART_IRQHandler+0x3e0>)
 8004fbc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd fa66 	bl	8002494 <HAL_DMA_Abort_IT>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	e00e      	b.n	8004ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f99c 	bl	800531c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	e00a      	b.n	8004ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f998 	bl	800531c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fec:	e006      	b.n	8004ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f994 	bl	800531c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ffa:	e175      	b.n	80052e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffc:	bf00      	nop
    return;
 8004ffe:	e173      	b.n	80052e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	2b01      	cmp	r3, #1
 8005006:	f040 814f 	bne.w	80052a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8148 	beq.w	80052a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8141 	beq.w	80052a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80b6 	beq.w	80051b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8145 	beq.w	80052ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506a:	429a      	cmp	r2, r3
 800506c:	f080 813e 	bcs.w	80052ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005076:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b20      	cmp	r3, #32
 8005080:	f000 8088 	beq.w	8005194 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800509a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800509e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1d9      	bne.n	8005084 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3314      	adds	r3, #20
 80050f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e1      	bne.n	80050d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3314      	adds	r3, #20
 8005112:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800511c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800511e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005130:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005132:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005136:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800513e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e3      	bne.n	800510c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005164:	f023 0310 	bic.w	r3, r3, #16
 8005168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005176:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005178:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800517c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e3      	bne.n	8005152 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd f945 	bl	800241e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8bf 	bl	800532e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051b0:	e09c      	b.n	80052ec <HAL_UART_IRQHandler+0x518>
 80051b2:	bf00      	nop
 80051b4:	080054e5 	.word	0x080054e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 808e 	beq.w	80052f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8089 	beq.w	80052f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005202:	647a      	str	r2, [r7, #68]	@ 0x44
 8005204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e3      	bne.n	80051de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3314      	adds	r3, #20
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	623b      	str	r3, [r7, #32]
   return(result);
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800523a:	633a      	str	r2, [r7, #48]	@ 0x30
 800523c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	60fb      	str	r3, [r7, #12]
   return(result);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005280:	61fa      	str	r2, [r7, #28]
 8005282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	69b9      	ldr	r1, [r7, #24]
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	617b      	str	r3, [r7, #20]
   return(result);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e3      	bne.n	800525c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800529a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f844 	bl	800532e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052a6:	e023      	b.n	80052f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <HAL_UART_IRQHandler+0x4f4>
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f923 	bl	800550c <UART_Transmit_IT>
    return;
 80052c6:	e014      	b.n	80052f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <HAL_UART_IRQHandler+0x51e>
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f962 	bl	80055aa <UART_EndTransmit_IT>
    return;
 80052e6:	e004      	b.n	80052f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80052f0:	bf00      	nop
  }
}
 80052f2:	37e8      	adds	r7, #232	@ 0xe8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b090      	sub	sp, #64	@ 0x40
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005354:	e050      	b.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d04c      	beq.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800535e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x30>
 8005364:	f7fc ff4a 	bl	80021fc <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005370:	429a      	cmp	r2, r3
 8005372:	d241      	bcs.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800538a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005394:	637a      	str	r2, [r7, #52]	@ 0x34
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800539a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e5      	bne.n	8005374 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3314      	adds	r3, #20
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	613b      	str	r3, [r7, #16]
   return(result);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3314      	adds	r3, #20
 80053c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053c8:	623a      	str	r2, [r7, #32]
 80053ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	69f9      	ldr	r1, [r7, #28]
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e00f      	b.n	8005418 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4013      	ands	r3, r2
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	429a      	cmp	r2, r3
 8005414:	d09f      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3740      	adds	r7, #64	@ 0x40
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b095      	sub	sp, #84	@ 0x54
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800543e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005448:	643a      	str	r2, [r7, #64]	@ 0x40
 800544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800544e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3314      	adds	r3, #20
 8005462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	61fb      	str	r3, [r7, #28]
   return(result);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800547c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800547e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e5      	bne.n	800545c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005494:	2b01      	cmp	r3, #1
 8005496:	d119      	bne.n	80054cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054b8:	61ba      	str	r2, [r7, #24]
 80054ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	613b      	str	r3, [r7, #16]
   return(result);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054da:	bf00      	nop
 80054dc:	3754      	adds	r7, #84	@ 0x54
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ff0c 	bl	800531c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b21      	cmp	r3, #33	@ 0x21
 800551e:	d13e      	bne.n	800559e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005528:	d114      	bne.n	8005554 <UART_Transmit_IT+0x48>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d110      	bne.n	8005554 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005546:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]
 8005552:	e008      	b.n	8005566 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6211      	str	r1, [r2, #32]
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	4619      	mov	r1, r3
 8005574:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005588:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005598:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe94 	bl	80052f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08c      	sub	sp, #48	@ 0x30
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b22      	cmp	r3, #34	@ 0x22
 80055ec:	f040 80ae 	bne.w	800574c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f8:	d117      	bne.n	800562a <UART_Receive_IT+0x50>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b29b      	uxth	r3, r3
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	b29a      	uxth	r2, r3
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
 8005628:	e026      	b.n	8005678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563c:	d007      	beq.n	800564e <UART_Receive_IT+0x74>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <UART_Receive_IT+0x82>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e008      	b.n	800566e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005668:	b2da      	uxtb	r2, r3
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4619      	mov	r1, r3
 8005686:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005688:	2b00      	cmp	r3, #0
 800568a:	d15d      	bne.n	8005748 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0220 	bic.w	r2, r2, #32
 800569a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0201 	bic.w	r2, r2, #1
 80056ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d135      	bne.n	800573e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f8:	623a      	str	r2, [r7, #32]
 80056fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	61bb      	str	r3, [r7, #24]
   return(result);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b10      	cmp	r3, #16
 8005718:	d10a      	bne.n	8005730 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005734:	4619      	mov	r1, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fdf9 	bl	800532e <HAL_UARTEx_RxEventCallback>
 800573c:	e002      	b.n	8005744 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fde3 	bl	800530a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e002      	b.n	800574e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3730      	adds	r7, #48	@ 0x30
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005792:	f023 030c 	bic.w	r3, r3, #12
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	430b      	orrs	r3, r1
 800579e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <UART_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fe fde2 	bl	8004388 <HAL_RCC_GetPCLK2Freq>
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	e002      	b.n	80057ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fe fdca 	bl	8004360 <HAL_RCC_GetPCLK1Freq>
 80057cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	4a22      	ldr	r2, [pc, #136]	@ (8005870 <UART_SetConfig+0x118>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	0119      	lsls	r1, r3, #4
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fbb2 f2f3 	udiv	r2, r2, r3
 8005804:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <UART_SetConfig+0x118>)
 8005806:	fba3 0302 	umull	r0, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2064      	movs	r0, #100	@ 0x64
 800580e:	fb00 f303 	mul.w	r3, r0, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	@ 0x32
 8005818:	4a15      	ldr	r2, [pc, #84]	@ (8005870 <UART_SetConfig+0x118>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005824:	4419      	add	r1, r3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <UART_SetConfig+0x118>)
 800583e:	fba3 0302 	umull	r0, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2064      	movs	r0, #100	@ 0x64
 8005846:	fb00 f303 	mul.w	r3, r0, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	@ 0x32
 8005850:	4a07      	ldr	r2, [pc, #28]	@ (8005870 <UART_SetConfig+0x118>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	440a      	add	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40013800 	.word	0x40013800
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <siprintf>:
 8005874:	b40e      	push	{r1, r2, r3}
 8005876:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800587a:	b500      	push	{lr}
 800587c:	b09c      	sub	sp, #112	@ 0x70
 800587e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005880:	9002      	str	r0, [sp, #8]
 8005882:	9006      	str	r0, [sp, #24]
 8005884:	9107      	str	r1, [sp, #28]
 8005886:	9104      	str	r1, [sp, #16]
 8005888:	4808      	ldr	r0, [pc, #32]	@ (80058ac <siprintf+0x38>)
 800588a:	4909      	ldr	r1, [pc, #36]	@ (80058b0 <siprintf+0x3c>)
 800588c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005890:	9105      	str	r1, [sp, #20]
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	a902      	add	r1, sp, #8
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	f000 f992 	bl	8005bc0 <_svfiprintf_r>
 800589c:	2200      	movs	r2, #0
 800589e:	9b02      	ldr	r3, [sp, #8]
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	b01c      	add	sp, #112	@ 0x70
 80058a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a8:	b003      	add	sp, #12
 80058aa:	4770      	bx	lr
 80058ac:	2000002c 	.word	0x2000002c
 80058b0:	ffff0208 	.word	0xffff0208

080058b4 <memset>:
 80058b4:	4603      	mov	r3, r0
 80058b6:	4402      	add	r2, r0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <memset+0xa>
 80058bc:	4770      	bx	lr
 80058be:	f803 1b01 	strb.w	r1, [r3], #1
 80058c2:	e7f9      	b.n	80058b8 <memset+0x4>

080058c4 <__errno>:
 80058c4:	4b01      	ldr	r3, [pc, #4]	@ (80058cc <__errno+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	2000002c 	.word	0x2000002c

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	2600      	movs	r6, #0
 80058d4:	4d0c      	ldr	r5, [pc, #48]	@ (8005908 <__libc_init_array+0x38>)
 80058d6:	4c0d      	ldr	r4, [pc, #52]	@ (800590c <__libc_init_array+0x3c>)
 80058d8:	1b64      	subs	r4, r4, r5
 80058da:	10a4      	asrs	r4, r4, #2
 80058dc:	42a6      	cmp	r6, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	f001 fd3c 	bl	800735c <_init>
 80058e4:	2600      	movs	r6, #0
 80058e6:	4d0a      	ldr	r5, [pc, #40]	@ (8005910 <__libc_init_array+0x40>)
 80058e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005914 <__libc_init_array+0x44>)
 80058ea:	1b64      	subs	r4, r4, r5
 80058ec:	10a4      	asrs	r4, r4, #2
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f8:	4798      	blx	r3
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005902:	4798      	blx	r3
 8005904:	3601      	adds	r6, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	080074e8 	.word	0x080074e8
 800590c:	080074e8 	.word	0x080074e8
 8005910:	080074e8 	.word	0x080074e8
 8005914:	080074ec 	.word	0x080074ec

08005918 <__retarget_lock_acquire_recursive>:
 8005918:	4770      	bx	lr

0800591a <__retarget_lock_release_recursive>:
 800591a:	4770      	bx	lr

0800591c <_free_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	2900      	cmp	r1, #0
 8005922:	d040      	beq.n	80059a6 <_free_r+0x8a>
 8005924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005928:	1f0c      	subs	r4, r1, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfb8      	it	lt
 800592e:	18e4      	addlt	r4, r4, r3
 8005930:	f000 f8de 	bl	8005af0 <__malloc_lock>
 8005934:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <_free_r+0x8c>)
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	b933      	cbnz	r3, 8005948 <_free_r+0x2c>
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	6014      	str	r4, [r2, #0]
 800593e:	4628      	mov	r0, r5
 8005940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005944:	f000 b8da 	b.w	8005afc <__malloc_unlock>
 8005948:	42a3      	cmp	r3, r4
 800594a:	d908      	bls.n	800595e <_free_r+0x42>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	1821      	adds	r1, r4, r0
 8005950:	428b      	cmp	r3, r1
 8005952:	bf01      	itttt	eq
 8005954:	6819      	ldreq	r1, [r3, #0]
 8005956:	685b      	ldreq	r3, [r3, #4]
 8005958:	1809      	addeq	r1, r1, r0
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	e7ed      	b.n	800593a <_free_r+0x1e>
 800595e:	461a      	mov	r2, r3
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b10b      	cbz	r3, 8005968 <_free_r+0x4c>
 8005964:	42a3      	cmp	r3, r4
 8005966:	d9fa      	bls.n	800595e <_free_r+0x42>
 8005968:	6811      	ldr	r1, [r2, #0]
 800596a:	1850      	adds	r0, r2, r1
 800596c:	42a0      	cmp	r0, r4
 800596e:	d10b      	bne.n	8005988 <_free_r+0x6c>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	4401      	add	r1, r0
 8005974:	1850      	adds	r0, r2, r1
 8005976:	4283      	cmp	r3, r0
 8005978:	6011      	str	r1, [r2, #0]
 800597a:	d1e0      	bne.n	800593e <_free_r+0x22>
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4408      	add	r0, r1
 8005982:	6010      	str	r0, [r2, #0]
 8005984:	6053      	str	r3, [r2, #4]
 8005986:	e7da      	b.n	800593e <_free_r+0x22>
 8005988:	d902      	bls.n	8005990 <_free_r+0x74>
 800598a:	230c      	movs	r3, #12
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	e7d6      	b.n	800593e <_free_r+0x22>
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	1821      	adds	r1, r4, r0
 8005994:	428b      	cmp	r3, r1
 8005996:	bf01      	itttt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	1809      	addeq	r1, r1, r0
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	6063      	str	r3, [r4, #4]
 80059a2:	6054      	str	r4, [r2, #4]
 80059a4:	e7cb      	b.n	800593e <_free_r+0x22>
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20000300 	.word	0x20000300

080059ac <sbrk_aligned>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4e0f      	ldr	r6, [pc, #60]	@ (80059ec <sbrk_aligned+0x40>)
 80059b0:	460c      	mov	r4, r1
 80059b2:	6831      	ldr	r1, [r6, #0]
 80059b4:	4605      	mov	r5, r0
 80059b6:	b911      	cbnz	r1, 80059be <sbrk_aligned+0x12>
 80059b8:	f000 fbaa 	bl	8006110 <_sbrk_r>
 80059bc:	6030      	str	r0, [r6, #0]
 80059be:	4621      	mov	r1, r4
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 fba5 	bl	8006110 <_sbrk_r>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d103      	bne.n	80059d2 <sbrk_aligned+0x26>
 80059ca:	f04f 34ff 	mov.w	r4, #4294967295
 80059ce:	4620      	mov	r0, r4
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	1cc4      	adds	r4, r0, #3
 80059d4:	f024 0403 	bic.w	r4, r4, #3
 80059d8:	42a0      	cmp	r0, r4
 80059da:	d0f8      	beq.n	80059ce <sbrk_aligned+0x22>
 80059dc:	1a21      	subs	r1, r4, r0
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fb96 	bl	8006110 <_sbrk_r>
 80059e4:	3001      	adds	r0, #1
 80059e6:	d1f2      	bne.n	80059ce <sbrk_aligned+0x22>
 80059e8:	e7ef      	b.n	80059ca <sbrk_aligned+0x1e>
 80059ea:	bf00      	nop
 80059ec:	200002fc 	.word	0x200002fc

080059f0 <_malloc_r>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	1ccd      	adds	r5, r1, #3
 80059f6:	f025 0503 	bic.w	r5, r5, #3
 80059fa:	3508      	adds	r5, #8
 80059fc:	2d0c      	cmp	r5, #12
 80059fe:	bf38      	it	cc
 8005a00:	250c      	movcc	r5, #12
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	4606      	mov	r6, r0
 8005a06:	db01      	blt.n	8005a0c <_malloc_r+0x1c>
 8005a08:	42a9      	cmp	r1, r5
 8005a0a:	d904      	bls.n	8005a16 <_malloc_r+0x26>
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	2000      	movs	r0, #0
 8005a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005aec <_malloc_r+0xfc>
 8005a1a:	f000 f869 	bl	8005af0 <__malloc_lock>
 8005a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a22:	461c      	mov	r4, r3
 8005a24:	bb44      	cbnz	r4, 8005a78 <_malloc_r+0x88>
 8005a26:	4629      	mov	r1, r5
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7ff ffbf 	bl	80059ac <sbrk_aligned>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	4604      	mov	r4, r0
 8005a32:	d158      	bne.n	8005ae6 <_malloc_r+0xf6>
 8005a34:	f8d8 4000 	ldr.w	r4, [r8]
 8005a38:	4627      	mov	r7, r4
 8005a3a:	2f00      	cmp	r7, #0
 8005a3c:	d143      	bne.n	8005ac6 <_malloc_r+0xd6>
 8005a3e:	2c00      	cmp	r4, #0
 8005a40:	d04b      	beq.n	8005ada <_malloc_r+0xea>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	4639      	mov	r1, r7
 8005a46:	4630      	mov	r0, r6
 8005a48:	eb04 0903 	add.w	r9, r4, r3
 8005a4c:	f000 fb60 	bl	8006110 <_sbrk_r>
 8005a50:	4581      	cmp	r9, r0
 8005a52:	d142      	bne.n	8005ada <_malloc_r+0xea>
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	4630      	mov	r0, r6
 8005a58:	1a6d      	subs	r5, r5, r1
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7ff ffa6 	bl	80059ac <sbrk_aligned>
 8005a60:	3001      	adds	r0, #1
 8005a62:	d03a      	beq.n	8005ada <_malloc_r+0xea>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	442b      	add	r3, r5
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	bb62      	cbnz	r2, 8005acc <_malloc_r+0xdc>
 8005a72:	f8c8 7000 	str.w	r7, [r8]
 8005a76:	e00f      	b.n	8005a98 <_malloc_r+0xa8>
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	1b52      	subs	r2, r2, r5
 8005a7c:	d420      	bmi.n	8005ac0 <_malloc_r+0xd0>
 8005a7e:	2a0b      	cmp	r2, #11
 8005a80:	d917      	bls.n	8005ab2 <_malloc_r+0xc2>
 8005a82:	1961      	adds	r1, r4, r5
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	6025      	str	r5, [r4, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	6059      	strne	r1, [r3, #4]
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	bf08      	it	eq
 8005a90:	f8c8 1000 	streq.w	r1, [r8]
 8005a94:	5162      	str	r2, [r4, r5]
 8005a96:	604b      	str	r3, [r1, #4]
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f000 f82f 	bl	8005afc <__malloc_unlock>
 8005a9e:	f104 000b 	add.w	r0, r4, #11
 8005aa2:	1d23      	adds	r3, r4, #4
 8005aa4:	f020 0007 	bic.w	r0, r0, #7
 8005aa8:	1ac2      	subs	r2, r0, r3
 8005aaa:	bf1c      	itt	ne
 8005aac:	1a1b      	subne	r3, r3, r0
 8005aae:	50a3      	strne	r3, [r4, r2]
 8005ab0:	e7af      	b.n	8005a12 <_malloc_r+0x22>
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	bf0c      	ite	eq
 8005ab8:	f8c8 2000 	streq.w	r2, [r8]
 8005abc:	605a      	strne	r2, [r3, #4]
 8005abe:	e7eb      	b.n	8005a98 <_malloc_r+0xa8>
 8005ac0:	4623      	mov	r3, r4
 8005ac2:	6864      	ldr	r4, [r4, #4]
 8005ac4:	e7ae      	b.n	8005a24 <_malloc_r+0x34>
 8005ac6:	463c      	mov	r4, r7
 8005ac8:	687f      	ldr	r7, [r7, #4]
 8005aca:	e7b6      	b.n	8005a3a <_malloc_r+0x4a>
 8005acc:	461a      	mov	r2, r3
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d1fb      	bne.n	8005acc <_malloc_r+0xdc>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	6053      	str	r3, [r2, #4]
 8005ad8:	e7de      	b.n	8005a98 <_malloc_r+0xa8>
 8005ada:	230c      	movs	r3, #12
 8005adc:	4630      	mov	r0, r6
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	f000 f80c 	bl	8005afc <__malloc_unlock>
 8005ae4:	e794      	b.n	8005a10 <_malloc_r+0x20>
 8005ae6:	6005      	str	r5, [r0, #0]
 8005ae8:	e7d6      	b.n	8005a98 <_malloc_r+0xa8>
 8005aea:	bf00      	nop
 8005aec:	20000300 	.word	0x20000300

08005af0 <__malloc_lock>:
 8005af0:	4801      	ldr	r0, [pc, #4]	@ (8005af8 <__malloc_lock+0x8>)
 8005af2:	f7ff bf11 	b.w	8005918 <__retarget_lock_acquire_recursive>
 8005af6:	bf00      	nop
 8005af8:	200002f8 	.word	0x200002f8

08005afc <__malloc_unlock>:
 8005afc:	4801      	ldr	r0, [pc, #4]	@ (8005b04 <__malloc_unlock+0x8>)
 8005afe:	f7ff bf0c 	b.w	800591a <__retarget_lock_release_recursive>
 8005b02:	bf00      	nop
 8005b04:	200002f8 	.word	0x200002f8

08005b08 <__ssputs_r>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	461f      	mov	r7, r3
 8005b0e:	688e      	ldr	r6, [r1, #8]
 8005b10:	4682      	mov	sl, r0
 8005b12:	42be      	cmp	r6, r7
 8005b14:	460c      	mov	r4, r1
 8005b16:	4690      	mov	r8, r2
 8005b18:	680b      	ldr	r3, [r1, #0]
 8005b1a:	d82d      	bhi.n	8005b78 <__ssputs_r+0x70>
 8005b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b24:	d026      	beq.n	8005b74 <__ssputs_r+0x6c>
 8005b26:	6965      	ldr	r5, [r4, #20]
 8005b28:	6909      	ldr	r1, [r1, #16]
 8005b2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b2e:	eba3 0901 	sub.w	r9, r3, r1
 8005b32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b36:	1c7b      	adds	r3, r7, #1
 8005b38:	444b      	add	r3, r9
 8005b3a:	106d      	asrs	r5, r5, #1
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	bf38      	it	cc
 8005b40:	461d      	movcc	r5, r3
 8005b42:	0553      	lsls	r3, r2, #21
 8005b44:	d527      	bpl.n	8005b96 <__ssputs_r+0x8e>
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7ff ff52 	bl	80059f0 <_malloc_r>
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	b360      	cbz	r0, 8005baa <__ssputs_r+0xa2>
 8005b50:	464a      	mov	r2, r9
 8005b52:	6921      	ldr	r1, [r4, #16]
 8005b54:	f000 fafa 	bl	800614c <memcpy>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	6126      	str	r6, [r4, #16]
 8005b66:	444e      	add	r6, r9
 8005b68:	6026      	str	r6, [r4, #0]
 8005b6a:	463e      	mov	r6, r7
 8005b6c:	6165      	str	r5, [r4, #20]
 8005b6e:	eba5 0509 	sub.w	r5, r5, r9
 8005b72:	60a5      	str	r5, [r4, #8]
 8005b74:	42be      	cmp	r6, r7
 8005b76:	d900      	bls.n	8005b7a <__ssputs_r+0x72>
 8005b78:	463e      	mov	r6, r7
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	f000 faac 	bl	80060dc <memmove>
 8005b84:	2000      	movs	r0, #0
 8005b86:	68a3      	ldr	r3, [r4, #8]
 8005b88:	1b9b      	subs	r3, r3, r6
 8005b8a:	60a3      	str	r3, [r4, #8]
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	4433      	add	r3, r6
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b96:	462a      	mov	r2, r5
 8005b98:	f000 fae6 	bl	8006168 <_realloc_r>
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d1e0      	bne.n	8005b64 <__ssputs_r+0x5c>
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	6921      	ldr	r1, [r4, #16]
 8005ba6:	f7ff feb9 	bl	800591c <_free_r>
 8005baa:	230c      	movs	r3, #12
 8005bac:	f8ca 3000 	str.w	r3, [sl]
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	e7e9      	b.n	8005b92 <__ssputs_r+0x8a>
	...

08005bc0 <_svfiprintf_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4698      	mov	r8, r3
 8005bc6:	898b      	ldrh	r3, [r1, #12]
 8005bc8:	4607      	mov	r7, r0
 8005bca:	061b      	lsls	r3, r3, #24
 8005bcc:	460d      	mov	r5, r1
 8005bce:	4614      	mov	r4, r2
 8005bd0:	b09d      	sub	sp, #116	@ 0x74
 8005bd2:	d510      	bpl.n	8005bf6 <_svfiprintf_r+0x36>
 8005bd4:	690b      	ldr	r3, [r1, #16]
 8005bd6:	b973      	cbnz	r3, 8005bf6 <_svfiprintf_r+0x36>
 8005bd8:	2140      	movs	r1, #64	@ 0x40
 8005bda:	f7ff ff09 	bl	80059f0 <_malloc_r>
 8005bde:	6028      	str	r0, [r5, #0]
 8005be0:	6128      	str	r0, [r5, #16]
 8005be2:	b930      	cbnz	r0, 8005bf2 <_svfiprintf_r+0x32>
 8005be4:	230c      	movs	r3, #12
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	b01d      	add	sp, #116	@ 0x74
 8005bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf2:	2340      	movs	r3, #64	@ 0x40
 8005bf4:	616b      	str	r3, [r5, #20]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c00:	2330      	movs	r3, #48	@ 0x30
 8005c02:	f04f 0901 	mov.w	r9, #1
 8005c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005da4 <_svfiprintf_r+0x1e4>
 8005c0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c12:	4623      	mov	r3, r4
 8005c14:	469a      	mov	sl, r3
 8005c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1a:	b10a      	cbz	r2, 8005c20 <_svfiprintf_r+0x60>
 8005c1c:	2a25      	cmp	r2, #37	@ 0x25
 8005c1e:	d1f9      	bne.n	8005c14 <_svfiprintf_r+0x54>
 8005c20:	ebba 0b04 	subs.w	fp, sl, r4
 8005c24:	d00b      	beq.n	8005c3e <_svfiprintf_r+0x7e>
 8005c26:	465b      	mov	r3, fp
 8005c28:	4622      	mov	r2, r4
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7ff ff6b 	bl	8005b08 <__ssputs_r>
 8005c32:	3001      	adds	r0, #1
 8005c34:	f000 80a7 	beq.w	8005d86 <_svfiprintf_r+0x1c6>
 8005c38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c3a:	445a      	add	r2, fp
 8005c3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 809f 	beq.w	8005d86 <_svfiprintf_r+0x1c6>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c52:	f10a 0a01 	add.w	sl, sl, #1
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	9307      	str	r3, [sp, #28]
 8005c5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c60:	4654      	mov	r4, sl
 8005c62:	2205      	movs	r2, #5
 8005c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c68:	484e      	ldr	r0, [pc, #312]	@ (8005da4 <_svfiprintf_r+0x1e4>)
 8005c6a:	f000 fa61 	bl	8006130 <memchr>
 8005c6e:	9a04      	ldr	r2, [sp, #16]
 8005c70:	b9d8      	cbnz	r0, 8005caa <_svfiprintf_r+0xea>
 8005c72:	06d0      	lsls	r0, r2, #27
 8005c74:	bf44      	itt	mi
 8005c76:	2320      	movmi	r3, #32
 8005c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c7c:	0711      	lsls	r1, r2, #28
 8005c7e:	bf44      	itt	mi
 8005c80:	232b      	movmi	r3, #43	@ 0x2b
 8005c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c86:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8c:	d015      	beq.n	8005cba <_svfiprintf_r+0xfa>
 8005c8e:	4654      	mov	r4, sl
 8005c90:	2000      	movs	r0, #0
 8005c92:	f04f 0c0a 	mov.w	ip, #10
 8005c96:	9a07      	ldr	r2, [sp, #28]
 8005c98:	4621      	mov	r1, r4
 8005c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c9e:	3b30      	subs	r3, #48	@ 0x30
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	d94b      	bls.n	8005d3c <_svfiprintf_r+0x17c>
 8005ca4:	b1b0      	cbz	r0, 8005cd4 <_svfiprintf_r+0x114>
 8005ca6:	9207      	str	r2, [sp, #28]
 8005ca8:	e014      	b.n	8005cd4 <_svfiprintf_r+0x114>
 8005caa:	eba0 0308 	sub.w	r3, r0, r8
 8005cae:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	46a2      	mov	sl, r4
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	e7d2      	b.n	8005c60 <_svfiprintf_r+0xa0>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	1d19      	adds	r1, r3, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	9103      	str	r1, [sp, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfbb      	ittet	lt
 8005cc6:	425b      	neglt	r3, r3
 8005cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ccc:	9307      	strge	r3, [sp, #28]
 8005cce:	9307      	strlt	r3, [sp, #28]
 8005cd0:	bfb8      	it	lt
 8005cd2:	9204      	strlt	r2, [sp, #16]
 8005cd4:	7823      	ldrb	r3, [r4, #0]
 8005cd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cd8:	d10a      	bne.n	8005cf0 <_svfiprintf_r+0x130>
 8005cda:	7863      	ldrb	r3, [r4, #1]
 8005cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cde:	d132      	bne.n	8005d46 <_svfiprintf_r+0x186>
 8005ce0:	9b03      	ldr	r3, [sp, #12]
 8005ce2:	3402      	adds	r4, #2
 8005ce4:	1d1a      	adds	r2, r3, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	9203      	str	r2, [sp, #12]
 8005cea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005da8 <_svfiprintf_r+0x1e8>
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	7821      	ldrb	r1, [r4, #0]
 8005cfa:	f000 fa19 	bl	8006130 <memchr>
 8005cfe:	b138      	cbz	r0, 8005d10 <_svfiprintf_r+0x150>
 8005d00:	2240      	movs	r2, #64	@ 0x40
 8005d02:	9b04      	ldr	r3, [sp, #16]
 8005d04:	eba0 000a 	sub.w	r0, r0, sl
 8005d08:	4082      	lsls	r2, r0
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d14:	2206      	movs	r2, #6
 8005d16:	4825      	ldr	r0, [pc, #148]	@ (8005dac <_svfiprintf_r+0x1ec>)
 8005d18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d1c:	f000 fa08 	bl	8006130 <memchr>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d036      	beq.n	8005d92 <_svfiprintf_r+0x1d2>
 8005d24:	4b22      	ldr	r3, [pc, #136]	@ (8005db0 <_svfiprintf_r+0x1f0>)
 8005d26:	bb1b      	cbnz	r3, 8005d70 <_svfiprintf_r+0x1b0>
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	3307      	adds	r3, #7
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d36:	4433      	add	r3, r6
 8005d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d3a:	e76a      	b.n	8005c12 <_svfiprintf_r+0x52>
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	2001      	movs	r0, #1
 8005d40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d44:	e7a8      	b.n	8005c98 <_svfiprintf_r+0xd8>
 8005d46:	2300      	movs	r3, #0
 8005d48:	f04f 0c0a 	mov.w	ip, #10
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	3401      	adds	r4, #1
 8005d50:	9305      	str	r3, [sp, #20]
 8005d52:	4620      	mov	r0, r4
 8005d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d58:	3a30      	subs	r2, #48	@ 0x30
 8005d5a:	2a09      	cmp	r2, #9
 8005d5c:	d903      	bls.n	8005d66 <_svfiprintf_r+0x1a6>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0c6      	beq.n	8005cf0 <_svfiprintf_r+0x130>
 8005d62:	9105      	str	r1, [sp, #20]
 8005d64:	e7c4      	b.n	8005cf0 <_svfiprintf_r+0x130>
 8005d66:	4604      	mov	r4, r0
 8005d68:	2301      	movs	r3, #1
 8005d6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d6e:	e7f0      	b.n	8005d52 <_svfiprintf_r+0x192>
 8005d70:	ab03      	add	r3, sp, #12
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	462a      	mov	r2, r5
 8005d76:	4638      	mov	r0, r7
 8005d78:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <_svfiprintf_r+0x1f4>)
 8005d7a:	a904      	add	r1, sp, #16
 8005d7c:	f3af 8000 	nop.w
 8005d80:	1c42      	adds	r2, r0, #1
 8005d82:	4606      	mov	r6, r0
 8005d84:	d1d6      	bne.n	8005d34 <_svfiprintf_r+0x174>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	065b      	lsls	r3, r3, #25
 8005d8a:	f53f af2d 	bmi.w	8005be8 <_svfiprintf_r+0x28>
 8005d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d90:	e72c      	b.n	8005bec <_svfiprintf_r+0x2c>
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	462a      	mov	r2, r5
 8005d98:	4638      	mov	r0, r7
 8005d9a:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <_svfiprintf_r+0x1f4>)
 8005d9c:	a904      	add	r1, sp, #16
 8005d9e:	f000 f87d 	bl	8005e9c <_printf_i>
 8005da2:	e7ed      	b.n	8005d80 <_svfiprintf_r+0x1c0>
 8005da4:	08007436 	.word	0x08007436
 8005da8:	0800743c 	.word	0x0800743c
 8005dac:	08007440 	.word	0x08007440
 8005db0:	00000000 	.word	0x00000000
 8005db4:	08005b09 	.word	0x08005b09

08005db8 <_printf_common>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	4698      	mov	r8, r3
 8005dc0:	688a      	ldr	r2, [r1, #8]
 8005dc2:	690b      	ldr	r3, [r1, #16]
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	bfb8      	it	lt
 8005dca:	4613      	movlt	r3, r2
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dd8:	b10a      	cbz	r2, 8005dde <_printf_common+0x26>
 8005dda:	3301      	adds	r3, #1
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	0699      	lsls	r1, r3, #26
 8005de2:	bf42      	ittt	mi
 8005de4:	6833      	ldrmi	r3, [r6, #0]
 8005de6:	3302      	addmi	r3, #2
 8005de8:	6033      	strmi	r3, [r6, #0]
 8005dea:	6825      	ldr	r5, [r4, #0]
 8005dec:	f015 0506 	ands.w	r5, r5, #6
 8005df0:	d106      	bne.n	8005e00 <_printf_common+0x48>
 8005df2:	f104 0a19 	add.w	sl, r4, #25
 8005df6:	68e3      	ldr	r3, [r4, #12]
 8005df8:	6832      	ldr	r2, [r6, #0]
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dc2b      	bgt.n	8005e58 <_printf_common+0xa0>
 8005e00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	3b00      	subs	r3, #0
 8005e08:	bf18      	it	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	0692      	lsls	r2, r2, #26
 8005e0e:	d430      	bmi.n	8005e72 <_printf_common+0xba>
 8005e10:	4641      	mov	r1, r8
 8005e12:	4638      	mov	r0, r7
 8005e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e18:	47c8      	blx	r9
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d023      	beq.n	8005e66 <_printf_common+0xae>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6922      	ldr	r2, [r4, #16]
 8005e22:	f003 0306 	and.w	r3, r3, #6
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	bf14      	ite	ne
 8005e2a:	2500      	movne	r5, #0
 8005e2c:	6833      	ldreq	r3, [r6, #0]
 8005e2e:	f04f 0600 	mov.w	r6, #0
 8005e32:	bf08      	it	eq
 8005e34:	68e5      	ldreq	r5, [r4, #12]
 8005e36:	f104 041a 	add.w	r4, r4, #26
 8005e3a:	bf08      	it	eq
 8005e3c:	1aed      	subeq	r5, r5, r3
 8005e3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e42:	bf08      	it	eq
 8005e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	bfc4      	itt	gt
 8005e4c:	1a9b      	subgt	r3, r3, r2
 8005e4e:	18ed      	addgt	r5, r5, r3
 8005e50:	42b5      	cmp	r5, r6
 8005e52:	d11a      	bne.n	8005e8a <_printf_common+0xd2>
 8005e54:	2000      	movs	r0, #0
 8005e56:	e008      	b.n	8005e6a <_printf_common+0xb2>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	4638      	mov	r0, r7
 8005e60:	47c8      	blx	r9
 8005e62:	3001      	adds	r0, #1
 8005e64:	d103      	bne.n	8005e6e <_printf_common+0xb6>
 8005e66:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6e:	3501      	adds	r5, #1
 8005e70:	e7c1      	b.n	8005df6 <_printf_common+0x3e>
 8005e72:	2030      	movs	r0, #48	@ 0x30
 8005e74:	18e1      	adds	r1, r4, r3
 8005e76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e80:	4422      	add	r2, r4
 8005e82:	3302      	adds	r3, #2
 8005e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e88:	e7c2      	b.n	8005e10 <_printf_common+0x58>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4641      	mov	r1, r8
 8005e90:	4638      	mov	r0, r7
 8005e92:	47c8      	blx	r9
 8005e94:	3001      	adds	r0, #1
 8005e96:	d0e6      	beq.n	8005e66 <_printf_common+0xae>
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7d9      	b.n	8005e50 <_printf_common+0x98>

08005e9c <_printf_i>:
 8005e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	7e0f      	ldrb	r7, [r1, #24]
 8005ea2:	4691      	mov	r9, r2
 8005ea4:	2f78      	cmp	r7, #120	@ 0x78
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	469a      	mov	sl, r3
 8005eac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005eae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eb2:	d807      	bhi.n	8005ec4 <_printf_i+0x28>
 8005eb4:	2f62      	cmp	r7, #98	@ 0x62
 8005eb6:	d80a      	bhi.n	8005ece <_printf_i+0x32>
 8005eb8:	2f00      	cmp	r7, #0
 8005eba:	f000 80d3 	beq.w	8006064 <_printf_i+0x1c8>
 8005ebe:	2f58      	cmp	r7, #88	@ 0x58
 8005ec0:	f000 80ba 	beq.w	8006038 <_printf_i+0x19c>
 8005ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ec8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ecc:	e03a      	b.n	8005f44 <_printf_i+0xa8>
 8005ece:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ed2:	2b15      	cmp	r3, #21
 8005ed4:	d8f6      	bhi.n	8005ec4 <_printf_i+0x28>
 8005ed6:	a101      	add	r1, pc, #4	@ (adr r1, 8005edc <_printf_i+0x40>)
 8005ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f49 	.word	0x08005f49
 8005ee4:	08005ec5 	.word	0x08005ec5
 8005ee8:	08005ec5 	.word	0x08005ec5
 8005eec:	08005ec5 	.word	0x08005ec5
 8005ef0:	08005ec5 	.word	0x08005ec5
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	08005ec5 	.word	0x08005ec5
 8005efc:	08005ec5 	.word	0x08005ec5
 8005f00:	08005ec5 	.word	0x08005ec5
 8005f04:	08005ec5 	.word	0x08005ec5
 8005f08:	0800604b 	.word	0x0800604b
 8005f0c:	08005f73 	.word	0x08005f73
 8005f10:	08006005 	.word	0x08006005
 8005f14:	08005ec5 	.word	0x08005ec5
 8005f18:	08005ec5 	.word	0x08005ec5
 8005f1c:	0800606d 	.word	0x0800606d
 8005f20:	08005ec5 	.word	0x08005ec5
 8005f24:	08005f73 	.word	0x08005f73
 8005f28:	08005ec5 	.word	0x08005ec5
 8005f2c:	08005ec5 	.word	0x08005ec5
 8005f30:	0800600d 	.word	0x0800600d
 8005f34:	6833      	ldr	r3, [r6, #0]
 8005f36:	1d1a      	adds	r2, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6032      	str	r2, [r6, #0]
 8005f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f44:	2301      	movs	r3, #1
 8005f46:	e09e      	b.n	8006086 <_printf_i+0x1ea>
 8005f48:	6833      	ldr	r3, [r6, #0]
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	1d19      	adds	r1, r3, #4
 8005f4e:	6031      	str	r1, [r6, #0]
 8005f50:	0606      	lsls	r6, r0, #24
 8005f52:	d501      	bpl.n	8005f58 <_printf_i+0xbc>
 8005f54:	681d      	ldr	r5, [r3, #0]
 8005f56:	e003      	b.n	8005f60 <_printf_i+0xc4>
 8005f58:	0645      	lsls	r5, r0, #25
 8005f5a:	d5fb      	bpl.n	8005f54 <_printf_i+0xb8>
 8005f5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	da03      	bge.n	8005f6c <_printf_i+0xd0>
 8005f64:	232d      	movs	r3, #45	@ 0x2d
 8005f66:	426d      	negs	r5, r5
 8005f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f6c:	230a      	movs	r3, #10
 8005f6e:	4859      	ldr	r0, [pc, #356]	@ (80060d4 <_printf_i+0x238>)
 8005f70:	e011      	b.n	8005f96 <_printf_i+0xfa>
 8005f72:	6821      	ldr	r1, [r4, #0]
 8005f74:	6833      	ldr	r3, [r6, #0]
 8005f76:	0608      	lsls	r0, r1, #24
 8005f78:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f7c:	d402      	bmi.n	8005f84 <_printf_i+0xe8>
 8005f7e:	0649      	lsls	r1, r1, #25
 8005f80:	bf48      	it	mi
 8005f82:	b2ad      	uxthmi	r5, r5
 8005f84:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f86:	6033      	str	r3, [r6, #0]
 8005f88:	bf14      	ite	ne
 8005f8a:	230a      	movne	r3, #10
 8005f8c:	2308      	moveq	r3, #8
 8005f8e:	4851      	ldr	r0, [pc, #324]	@ (80060d4 <_printf_i+0x238>)
 8005f90:	2100      	movs	r1, #0
 8005f92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f96:	6866      	ldr	r6, [r4, #4]
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	bfa8      	it	ge
 8005f9c:	6821      	ldrge	r1, [r4, #0]
 8005f9e:	60a6      	str	r6, [r4, #8]
 8005fa0:	bfa4      	itt	ge
 8005fa2:	f021 0104 	bicge.w	r1, r1, #4
 8005fa6:	6021      	strge	r1, [r4, #0]
 8005fa8:	b90d      	cbnz	r5, 8005fae <_printf_i+0x112>
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	d04b      	beq.n	8006046 <_printf_i+0x1aa>
 8005fae:	4616      	mov	r6, r2
 8005fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8005fb8:	5dc7      	ldrb	r7, [r0, r7]
 8005fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fbe:	462f      	mov	r7, r5
 8005fc0:	42bb      	cmp	r3, r7
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	d9f4      	bls.n	8005fb0 <_printf_i+0x114>
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d10b      	bne.n	8005fe2 <_printf_i+0x146>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	07df      	lsls	r7, r3, #31
 8005fce:	d508      	bpl.n	8005fe2 <_printf_i+0x146>
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	6861      	ldr	r1, [r4, #4]
 8005fd4:	4299      	cmp	r1, r3
 8005fd6:	bfde      	ittt	le
 8005fd8:	2330      	movle	r3, #48	@ 0x30
 8005fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fe2:	1b92      	subs	r2, r2, r6
 8005fe4:	6122      	str	r2, [r4, #16]
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	4621      	mov	r1, r4
 8005fea:	4640      	mov	r0, r8
 8005fec:	f8cd a000 	str.w	sl, [sp]
 8005ff0:	aa03      	add	r2, sp, #12
 8005ff2:	f7ff fee1 	bl	8005db8 <_printf_common>
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d14a      	bne.n	8006090 <_printf_i+0x1f4>
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffe:	b004      	add	sp, #16
 8006000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	f043 0320 	orr.w	r3, r3, #32
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	2778      	movs	r7, #120	@ 0x78
 800600e:	4832      	ldr	r0, [pc, #200]	@ (80060d8 <_printf_i+0x23c>)
 8006010:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	6831      	ldr	r1, [r6, #0]
 8006018:	061f      	lsls	r7, r3, #24
 800601a:	f851 5b04 	ldr.w	r5, [r1], #4
 800601e:	d402      	bmi.n	8006026 <_printf_i+0x18a>
 8006020:	065f      	lsls	r7, r3, #25
 8006022:	bf48      	it	mi
 8006024:	b2ad      	uxthmi	r5, r5
 8006026:	6031      	str	r1, [r6, #0]
 8006028:	07d9      	lsls	r1, r3, #31
 800602a:	bf44      	itt	mi
 800602c:	f043 0320 	orrmi.w	r3, r3, #32
 8006030:	6023      	strmi	r3, [r4, #0]
 8006032:	b11d      	cbz	r5, 800603c <_printf_i+0x1a0>
 8006034:	2310      	movs	r3, #16
 8006036:	e7ab      	b.n	8005f90 <_printf_i+0xf4>
 8006038:	4826      	ldr	r0, [pc, #152]	@ (80060d4 <_printf_i+0x238>)
 800603a:	e7e9      	b.n	8006010 <_printf_i+0x174>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	f023 0320 	bic.w	r3, r3, #32
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	e7f6      	b.n	8006034 <_printf_i+0x198>
 8006046:	4616      	mov	r6, r2
 8006048:	e7bd      	b.n	8005fc6 <_printf_i+0x12a>
 800604a:	6833      	ldr	r3, [r6, #0]
 800604c:	6825      	ldr	r5, [r4, #0]
 800604e:	1d18      	adds	r0, r3, #4
 8006050:	6961      	ldr	r1, [r4, #20]
 8006052:	6030      	str	r0, [r6, #0]
 8006054:	062e      	lsls	r6, r5, #24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	d501      	bpl.n	800605e <_printf_i+0x1c2>
 800605a:	6019      	str	r1, [r3, #0]
 800605c:	e002      	b.n	8006064 <_printf_i+0x1c8>
 800605e:	0668      	lsls	r0, r5, #25
 8006060:	d5fb      	bpl.n	800605a <_printf_i+0x1be>
 8006062:	8019      	strh	r1, [r3, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	4616      	mov	r6, r2
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	e7bc      	b.n	8005fe6 <_printf_i+0x14a>
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	2100      	movs	r1, #0
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	6032      	str	r2, [r6, #0]
 8006074:	681e      	ldr	r6, [r3, #0]
 8006076:	6862      	ldr	r2, [r4, #4]
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f859 	bl	8006130 <memchr>
 800607e:	b108      	cbz	r0, 8006084 <_printf_i+0x1e8>
 8006080:	1b80      	subs	r0, r0, r6
 8006082:	6060      	str	r0, [r4, #4]
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	2300      	movs	r3, #0
 800608a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800608e:	e7aa      	b.n	8005fe6 <_printf_i+0x14a>
 8006090:	4632      	mov	r2, r6
 8006092:	4649      	mov	r1, r9
 8006094:	4640      	mov	r0, r8
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	47d0      	blx	sl
 800609a:	3001      	adds	r0, #1
 800609c:	d0ad      	beq.n	8005ffa <_printf_i+0x15e>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	079b      	lsls	r3, r3, #30
 80060a2:	d413      	bmi.n	80060cc <_printf_i+0x230>
 80060a4:	68e0      	ldr	r0, [r4, #12]
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	4298      	cmp	r0, r3
 80060aa:	bfb8      	it	lt
 80060ac:	4618      	movlt	r0, r3
 80060ae:	e7a6      	b.n	8005ffe <_printf_i+0x162>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4632      	mov	r2, r6
 80060b4:	4649      	mov	r1, r9
 80060b6:	4640      	mov	r0, r8
 80060b8:	47d0      	blx	sl
 80060ba:	3001      	adds	r0, #1
 80060bc:	d09d      	beq.n	8005ffa <_printf_i+0x15e>
 80060be:	3501      	adds	r5, #1
 80060c0:	68e3      	ldr	r3, [r4, #12]
 80060c2:	9903      	ldr	r1, [sp, #12]
 80060c4:	1a5b      	subs	r3, r3, r1
 80060c6:	42ab      	cmp	r3, r5
 80060c8:	dcf2      	bgt.n	80060b0 <_printf_i+0x214>
 80060ca:	e7eb      	b.n	80060a4 <_printf_i+0x208>
 80060cc:	2500      	movs	r5, #0
 80060ce:	f104 0619 	add.w	r6, r4, #25
 80060d2:	e7f5      	b.n	80060c0 <_printf_i+0x224>
 80060d4:	08007447 	.word	0x08007447
 80060d8:	08007458 	.word	0x08007458

080060dc <memmove>:
 80060dc:	4288      	cmp	r0, r1
 80060de:	b510      	push	{r4, lr}
 80060e0:	eb01 0402 	add.w	r4, r1, r2
 80060e4:	d902      	bls.n	80060ec <memmove+0x10>
 80060e6:	4284      	cmp	r4, r0
 80060e8:	4623      	mov	r3, r4
 80060ea:	d807      	bhi.n	80060fc <memmove+0x20>
 80060ec:	1e43      	subs	r3, r0, #1
 80060ee:	42a1      	cmp	r1, r4
 80060f0:	d008      	beq.n	8006104 <memmove+0x28>
 80060f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060fa:	e7f8      	b.n	80060ee <memmove+0x12>
 80060fc:	4601      	mov	r1, r0
 80060fe:	4402      	add	r2, r0
 8006100:	428a      	cmp	r2, r1
 8006102:	d100      	bne.n	8006106 <memmove+0x2a>
 8006104:	bd10      	pop	{r4, pc}
 8006106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800610a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800610e:	e7f7      	b.n	8006100 <memmove+0x24>

08006110 <_sbrk_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	2300      	movs	r3, #0
 8006114:	4d05      	ldr	r5, [pc, #20]	@ (800612c <_sbrk_r+0x1c>)
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fb ffb4 	bl	8002088 <_sbrk>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_sbrk_r+0x1a>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_sbrk_r+0x1a>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	200002f4 	.word	0x200002f4

08006130 <memchr>:
 8006130:	4603      	mov	r3, r0
 8006132:	b510      	push	{r4, lr}
 8006134:	b2c9      	uxtb	r1, r1
 8006136:	4402      	add	r2, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	d101      	bne.n	8006142 <memchr+0x12>
 800613e:	2000      	movs	r0, #0
 8006140:	e003      	b.n	800614a <memchr+0x1a>
 8006142:	7804      	ldrb	r4, [r0, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	428c      	cmp	r4, r1
 8006148:	d1f6      	bne.n	8006138 <memchr+0x8>
 800614a:	bd10      	pop	{r4, pc}

0800614c <memcpy>:
 800614c:	440a      	add	r2, r1
 800614e:	4291      	cmp	r1, r2
 8006150:	f100 33ff 	add.w	r3, r0, #4294967295
 8006154:	d100      	bne.n	8006158 <memcpy+0xc>
 8006156:	4770      	bx	lr
 8006158:	b510      	push	{r4, lr}
 800615a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615e:	4291      	cmp	r1, r2
 8006160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006164:	d1f9      	bne.n	800615a <memcpy+0xe>
 8006166:	bd10      	pop	{r4, pc}

08006168 <_realloc_r>:
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	4680      	mov	r8, r0
 800616e:	4615      	mov	r5, r2
 8006170:	460c      	mov	r4, r1
 8006172:	b921      	cbnz	r1, 800617e <_realloc_r+0x16>
 8006174:	4611      	mov	r1, r2
 8006176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617a:	f7ff bc39 	b.w	80059f0 <_malloc_r>
 800617e:	b92a      	cbnz	r2, 800618c <_realloc_r+0x24>
 8006180:	f7ff fbcc 	bl	800591c <_free_r>
 8006184:	2400      	movs	r4, #0
 8006186:	4620      	mov	r0, r4
 8006188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618c:	f000 f81a 	bl	80061c4 <_malloc_usable_size_r>
 8006190:	4285      	cmp	r5, r0
 8006192:	4606      	mov	r6, r0
 8006194:	d802      	bhi.n	800619c <_realloc_r+0x34>
 8006196:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800619a:	d8f4      	bhi.n	8006186 <_realloc_r+0x1e>
 800619c:	4629      	mov	r1, r5
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff fc26 	bl	80059f0 <_malloc_r>
 80061a4:	4607      	mov	r7, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d0ec      	beq.n	8006184 <_realloc_r+0x1c>
 80061aa:	42b5      	cmp	r5, r6
 80061ac:	462a      	mov	r2, r5
 80061ae:	4621      	mov	r1, r4
 80061b0:	bf28      	it	cs
 80061b2:	4632      	movcs	r2, r6
 80061b4:	f7ff ffca 	bl	800614c <memcpy>
 80061b8:	4621      	mov	r1, r4
 80061ba:	4640      	mov	r0, r8
 80061bc:	f7ff fbae 	bl	800591c <_free_r>
 80061c0:	463c      	mov	r4, r7
 80061c2:	e7e0      	b.n	8006186 <_realloc_r+0x1e>

080061c4 <_malloc_usable_size_r>:
 80061c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c8:	1f18      	subs	r0, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bfbc      	itt	lt
 80061ce:	580b      	ldrlt	r3, [r1, r0]
 80061d0:	18c0      	addlt	r0, r0, r3
 80061d2:	4770      	bx	lr

080061d4 <pow>:
 80061d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d8:	4614      	mov	r4, r2
 80061da:	461d      	mov	r5, r3
 80061dc:	4680      	mov	r8, r0
 80061de:	4689      	mov	r9, r1
 80061e0:	f000 faf6 	bl	80067d0 <__ieee754_pow>
 80061e4:	4622      	mov	r2, r4
 80061e6:	4606      	mov	r6, r0
 80061e8:	460f      	mov	r7, r1
 80061ea:	462b      	mov	r3, r5
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa fc0c 	bl	8000a0c <__aeabi_dcmpun>
 80061f4:	bbc8      	cbnz	r0, 800626a <pow+0x96>
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	4640      	mov	r0, r8
 80061fc:	4649      	mov	r1, r9
 80061fe:	f7fa fbd3 	bl	80009a8 <__aeabi_dcmpeq>
 8006202:	b1b8      	cbz	r0, 8006234 <pow+0x60>
 8006204:	2200      	movs	r2, #0
 8006206:	2300      	movs	r3, #0
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7fa fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8006210:	2800      	cmp	r0, #0
 8006212:	d141      	bne.n	8006298 <pow+0xc4>
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f000 f9fe 	bl	8006618 <finite>
 800621c:	b328      	cbz	r0, 800626a <pow+0x96>
 800621e:	2200      	movs	r2, #0
 8006220:	2300      	movs	r3, #0
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	f7fa fbc9 	bl	80009bc <__aeabi_dcmplt>
 800622a:	b1f0      	cbz	r0, 800626a <pow+0x96>
 800622c:	f7ff fb4a 	bl	80058c4 <__errno>
 8006230:	2322      	movs	r3, #34	@ 0x22
 8006232:	e019      	b.n	8006268 <pow+0x94>
 8006234:	4630      	mov	r0, r6
 8006236:	4639      	mov	r1, r7
 8006238:	f000 f9ee 	bl	8006618 <finite>
 800623c:	b9c8      	cbnz	r0, 8006272 <pow+0x9e>
 800623e:	4640      	mov	r0, r8
 8006240:	4649      	mov	r1, r9
 8006242:	f000 f9e9 	bl	8006618 <finite>
 8006246:	b1a0      	cbz	r0, 8006272 <pow+0x9e>
 8006248:	4620      	mov	r0, r4
 800624a:	4629      	mov	r1, r5
 800624c:	f000 f9e4 	bl	8006618 <finite>
 8006250:	b178      	cbz	r0, 8006272 <pow+0x9e>
 8006252:	4632      	mov	r2, r6
 8006254:	463b      	mov	r3, r7
 8006256:	4630      	mov	r0, r6
 8006258:	4639      	mov	r1, r7
 800625a:	f7fa fbd7 	bl	8000a0c <__aeabi_dcmpun>
 800625e:	2800      	cmp	r0, #0
 8006260:	d0e4      	beq.n	800622c <pow+0x58>
 8006262:	f7ff fb2f 	bl	80058c4 <__errno>
 8006266:	2321      	movs	r3, #33	@ 0x21
 8006268:	6003      	str	r3, [r0, #0]
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	4630      	mov	r0, r6
 8006278:	4639      	mov	r1, r7
 800627a:	f7fa fb95 	bl	80009a8 <__aeabi_dcmpeq>
 800627e:	2800      	cmp	r0, #0
 8006280:	d0f3      	beq.n	800626a <pow+0x96>
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f000 f9c7 	bl	8006618 <finite>
 800628a:	2800      	cmp	r0, #0
 800628c:	d0ed      	beq.n	800626a <pow+0x96>
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f000 f9c1 	bl	8006618 <finite>
 8006296:	e7c8      	b.n	800622a <pow+0x56>
 8006298:	2600      	movs	r6, #0
 800629a:	4f01      	ldr	r7, [pc, #4]	@ (80062a0 <pow+0xcc>)
 800629c:	e7e5      	b.n	800626a <pow+0x96>
 800629e:	bf00      	nop
 80062a0:	3ff00000 	.word	0x3ff00000

080062a4 <sqrt>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	4606      	mov	r6, r0
 80062a8:	460f      	mov	r7, r1
 80062aa:	f000 f9bb 	bl	8006624 <__ieee754_sqrt>
 80062ae:	4632      	mov	r2, r6
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	463b      	mov	r3, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa fba7 	bl	8000a0c <__aeabi_dcmpun>
 80062be:	b990      	cbnz	r0, 80062e6 <sqrt+0x42>
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	f7fa fb78 	bl	80009bc <__aeabi_dcmplt>
 80062cc:	b158      	cbz	r0, 80062e6 <sqrt+0x42>
 80062ce:	f7ff faf9 	bl	80058c4 <__errno>
 80062d2:	2321      	movs	r3, #33	@ 0x21
 80062d4:	2200      	movs	r2, #0
 80062d6:	6003      	str	r3, [r0, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	f7fa fa25 	bl	800072c <__aeabi_ddiv>
 80062e2:	4604      	mov	r4, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ec:	0000      	movs	r0, r0
	...

080062f0 <atan>:
 80062f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	4bbc      	ldr	r3, [pc, #752]	@ (80065e8 <atan+0x2f8>)
 80062f6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80062fa:	429e      	cmp	r6, r3
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
 8006300:	468b      	mov	fp, r1
 8006302:	d918      	bls.n	8006336 <atan+0x46>
 8006304:	4bb9      	ldr	r3, [pc, #740]	@ (80065ec <atan+0x2fc>)
 8006306:	429e      	cmp	r6, r3
 8006308:	d801      	bhi.n	800630e <atan+0x1e>
 800630a:	d109      	bne.n	8006320 <atan+0x30>
 800630c:	b140      	cbz	r0, 8006320 <atan+0x30>
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7f9 ff29 	bl	800016c <__adddf3>
 800631a:	4604      	mov	r4, r0
 800631c:	460d      	mov	r5, r1
 800631e:	e006      	b.n	800632e <atan+0x3e>
 8006320:	f1bb 0f00 	cmp.w	fp, #0
 8006324:	f340 8123 	ble.w	800656e <atan+0x27e>
 8006328:	a593      	add	r5, pc, #588	@ (adr r5, 8006578 <atan+0x288>)
 800632a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800632e:	4620      	mov	r0, r4
 8006330:	4629      	mov	r1, r5
 8006332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006336:	4bae      	ldr	r3, [pc, #696]	@ (80065f0 <atan+0x300>)
 8006338:	429e      	cmp	r6, r3
 800633a:	d811      	bhi.n	8006360 <atan+0x70>
 800633c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006340:	429e      	cmp	r6, r3
 8006342:	d80a      	bhi.n	800635a <atan+0x6a>
 8006344:	a38e      	add	r3, pc, #568	@ (adr r3, 8006580 <atan+0x290>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7f9 ff0f 	bl	800016c <__adddf3>
 800634e:	2200      	movs	r2, #0
 8006350:	4ba8      	ldr	r3, [pc, #672]	@ (80065f4 <atan+0x304>)
 8006352:	f7fa fb51 	bl	80009f8 <__aeabi_dcmpgt>
 8006356:	2800      	cmp	r0, #0
 8006358:	d1e9      	bne.n	800632e <atan+0x3e>
 800635a:	f04f 3aff 	mov.w	sl, #4294967295
 800635e:	e027      	b.n	80063b0 <atan+0xc0>
 8006360:	f000 f956 	bl	8006610 <fabs>
 8006364:	4ba4      	ldr	r3, [pc, #656]	@ (80065f8 <atan+0x308>)
 8006366:	4604      	mov	r4, r0
 8006368:	429e      	cmp	r6, r3
 800636a:	460d      	mov	r5, r1
 800636c:	f200 80b8 	bhi.w	80064e0 <atan+0x1f0>
 8006370:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006374:	429e      	cmp	r6, r3
 8006376:	f200 809c 	bhi.w	80064b2 <atan+0x1c2>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	f7f9 fef5 	bl	800016c <__adddf3>
 8006382:	2200      	movs	r2, #0
 8006384:	4b9b      	ldr	r3, [pc, #620]	@ (80065f4 <atan+0x304>)
 8006386:	f7f9 feef 	bl	8000168 <__aeabi_dsub>
 800638a:	2200      	movs	r2, #0
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006394:	4620      	mov	r0, r4
 8006396:	4629      	mov	r1, r5
 8006398:	f7f9 fee8 	bl	800016c <__adddf3>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fa f9c2 	bl	800072c <__aeabi_ddiv>
 80063a8:	f04f 0a00 	mov.w	sl, #0
 80063ac:	4604      	mov	r4, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	4622      	mov	r2, r4
 80063b2:	462b      	mov	r3, r5
 80063b4:	4620      	mov	r0, r4
 80063b6:	4629      	mov	r1, r5
 80063b8:	f7fa f88e 	bl	80004d8 <__aeabi_dmul>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4680      	mov	r8, r0
 80063c2:	4689      	mov	r9, r1
 80063c4:	f7fa f888 	bl	80004d8 <__aeabi_dmul>
 80063c8:	a36f      	add	r3, pc, #444	@ (adr r3, 8006588 <atan+0x298>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	4606      	mov	r6, r0
 80063d0:	460f      	mov	r7, r1
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	a36e      	add	r3, pc, #440	@ (adr r3, 8006590 <atan+0x2a0>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f7f9 fec6 	bl	800016c <__adddf3>
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	f7fa f878 	bl	80004d8 <__aeabi_dmul>
 80063e8:	a36b      	add	r3, pc, #428	@ (adr r3, 8006598 <atan+0x2a8>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7f9 febd 	bl	800016c <__adddf3>
 80063f2:	4632      	mov	r2, r6
 80063f4:	463b      	mov	r3, r7
 80063f6:	f7fa f86f 	bl	80004d8 <__aeabi_dmul>
 80063fa:	a369      	add	r3, pc, #420	@ (adr r3, 80065a0 <atan+0x2b0>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7f9 feb4 	bl	800016c <__adddf3>
 8006404:	4632      	mov	r2, r6
 8006406:	463b      	mov	r3, r7
 8006408:	f7fa f866 	bl	80004d8 <__aeabi_dmul>
 800640c:	a366      	add	r3, pc, #408	@ (adr r3, 80065a8 <atan+0x2b8>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f7f9 feab 	bl	800016c <__adddf3>
 8006416:	4632      	mov	r2, r6
 8006418:	463b      	mov	r3, r7
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	a364      	add	r3, pc, #400	@ (adr r3, 80065b0 <atan+0x2c0>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f7f9 fea2 	bl	800016c <__adddf3>
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	f7fa f854 	bl	80004d8 <__aeabi_dmul>
 8006430:	a361      	add	r3, pc, #388	@ (adr r3, 80065b8 <atan+0x2c8>)
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	4680      	mov	r8, r0
 8006438:	4689      	mov	r9, r1
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7fa f84b 	bl	80004d8 <__aeabi_dmul>
 8006442:	a35f      	add	r3, pc, #380	@ (adr r3, 80065c0 <atan+0x2d0>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7f9 fe8e 	bl	8000168 <__aeabi_dsub>
 800644c:	4632      	mov	r2, r6
 800644e:	463b      	mov	r3, r7
 8006450:	f7fa f842 	bl	80004d8 <__aeabi_dmul>
 8006454:	a35c      	add	r3, pc, #368	@ (adr r3, 80065c8 <atan+0x2d8>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7f9 fe85 	bl	8000168 <__aeabi_dsub>
 800645e:	4632      	mov	r2, r6
 8006460:	463b      	mov	r3, r7
 8006462:	f7fa f839 	bl	80004d8 <__aeabi_dmul>
 8006466:	a35a      	add	r3, pc, #360	@ (adr r3, 80065d0 <atan+0x2e0>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7f9 fe7c 	bl	8000168 <__aeabi_dsub>
 8006470:	4632      	mov	r2, r6
 8006472:	463b      	mov	r3, r7
 8006474:	f7fa f830 	bl	80004d8 <__aeabi_dmul>
 8006478:	a357      	add	r3, pc, #348	@ (adr r3, 80065d8 <atan+0x2e8>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	f7f9 fe73 	bl	8000168 <__aeabi_dsub>
 8006482:	4632      	mov	r2, r6
 8006484:	463b      	mov	r3, r7
 8006486:	f7fa f827 	bl	80004d8 <__aeabi_dmul>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7f9 fe6b 	bl	800016c <__adddf3>
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	f7fa f81d 	bl	80004d8 <__aeabi_dmul>
 800649e:	f1ba 3fff 	cmp.w	sl, #4294967295
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	d144      	bne.n	8006532 <atan+0x242>
 80064a8:	4620      	mov	r0, r4
 80064aa:	4629      	mov	r1, r5
 80064ac:	f7f9 fe5c 	bl	8000168 <__aeabi_dsub>
 80064b0:	e733      	b.n	800631a <atan+0x2a>
 80064b2:	2200      	movs	r2, #0
 80064b4:	4b4f      	ldr	r3, [pc, #316]	@ (80065f4 <atan+0x304>)
 80064b6:	f7f9 fe57 	bl	8000168 <__aeabi_dsub>
 80064ba:	2200      	movs	r2, #0
 80064bc:	4606      	mov	r6, r0
 80064be:	460f      	mov	r7, r1
 80064c0:	4620      	mov	r0, r4
 80064c2:	4629      	mov	r1, r5
 80064c4:	4b4b      	ldr	r3, [pc, #300]	@ (80065f4 <atan+0x304>)
 80064c6:	f7f9 fe51 	bl	800016c <__adddf3>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7fa f92b 	bl	800072c <__aeabi_ddiv>
 80064d6:	f04f 0a01 	mov.w	sl, #1
 80064da:	4604      	mov	r4, r0
 80064dc:	460d      	mov	r5, r1
 80064de:	e767      	b.n	80063b0 <atan+0xc0>
 80064e0:	4b46      	ldr	r3, [pc, #280]	@ (80065fc <atan+0x30c>)
 80064e2:	429e      	cmp	r6, r3
 80064e4:	d21a      	bcs.n	800651c <atan+0x22c>
 80064e6:	2200      	movs	r2, #0
 80064e8:	4b45      	ldr	r3, [pc, #276]	@ (8006600 <atan+0x310>)
 80064ea:	f7f9 fe3d 	bl	8000168 <__aeabi_dsub>
 80064ee:	2200      	movs	r2, #0
 80064f0:	4606      	mov	r6, r0
 80064f2:	460f      	mov	r7, r1
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	4b41      	ldr	r3, [pc, #260]	@ (8006600 <atan+0x310>)
 80064fa:	f7f9 ffed 	bl	80004d8 <__aeabi_dmul>
 80064fe:	2200      	movs	r2, #0
 8006500:	4b3c      	ldr	r3, [pc, #240]	@ (80065f4 <atan+0x304>)
 8006502:	f7f9 fe33 	bl	800016c <__adddf3>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7fa f90d 	bl	800072c <__aeabi_ddiv>
 8006512:	f04f 0a02 	mov.w	sl, #2
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	e749      	b.n	80063b0 <atan+0xc0>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	2000      	movs	r0, #0
 8006522:	4938      	ldr	r1, [pc, #224]	@ (8006604 <atan+0x314>)
 8006524:	f7fa f902 	bl	800072c <__aeabi_ddiv>
 8006528:	f04f 0a03 	mov.w	sl, #3
 800652c:	4604      	mov	r4, r0
 800652e:	460d      	mov	r5, r1
 8006530:	e73e      	b.n	80063b0 <atan+0xc0>
 8006532:	4b35      	ldr	r3, [pc, #212]	@ (8006608 <atan+0x318>)
 8006534:	4e35      	ldr	r6, [pc, #212]	@ (800660c <atan+0x31c>)
 8006536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	f7f9 fe13 	bl	8000168 <__aeabi_dsub>
 8006542:	4622      	mov	r2, r4
 8006544:	462b      	mov	r3, r5
 8006546:	f7f9 fe0f 	bl	8000168 <__aeabi_dsub>
 800654a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006556:	f7f9 fe07 	bl	8000168 <__aeabi_dsub>
 800655a:	f1bb 0f00 	cmp.w	fp, #0
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f6bf aee4 	bge.w	800632e <atan+0x3e>
 8006566:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800656a:	461d      	mov	r5, r3
 800656c:	e6df      	b.n	800632e <atan+0x3e>
 800656e:	a51c      	add	r5, pc, #112	@ (adr r5, 80065e0 <atan+0x2f0>)
 8006570:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006574:	e6db      	b.n	800632e <atan+0x3e>
 8006576:	bf00      	nop
 8006578:	54442d18 	.word	0x54442d18
 800657c:	3ff921fb 	.word	0x3ff921fb
 8006580:	8800759c 	.word	0x8800759c
 8006584:	7e37e43c 	.word	0x7e37e43c
 8006588:	e322da11 	.word	0xe322da11
 800658c:	3f90ad3a 	.word	0x3f90ad3a
 8006590:	24760deb 	.word	0x24760deb
 8006594:	3fa97b4b 	.word	0x3fa97b4b
 8006598:	a0d03d51 	.word	0xa0d03d51
 800659c:	3fb10d66 	.word	0x3fb10d66
 80065a0:	c54c206e 	.word	0xc54c206e
 80065a4:	3fb745cd 	.word	0x3fb745cd
 80065a8:	920083ff 	.word	0x920083ff
 80065ac:	3fc24924 	.word	0x3fc24924
 80065b0:	5555550d 	.word	0x5555550d
 80065b4:	3fd55555 	.word	0x3fd55555
 80065b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80065bc:	bfa2b444 	.word	0xbfa2b444
 80065c0:	52defd9a 	.word	0x52defd9a
 80065c4:	3fadde2d 	.word	0x3fadde2d
 80065c8:	af749a6d 	.word	0xaf749a6d
 80065cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80065d0:	fe231671 	.word	0xfe231671
 80065d4:	3fbc71c6 	.word	0x3fbc71c6
 80065d8:	9998ebc4 	.word	0x9998ebc4
 80065dc:	3fc99999 	.word	0x3fc99999
 80065e0:	54442d18 	.word	0x54442d18
 80065e4:	bff921fb 	.word	0xbff921fb
 80065e8:	440fffff 	.word	0x440fffff
 80065ec:	7ff00000 	.word	0x7ff00000
 80065f0:	3fdbffff 	.word	0x3fdbffff
 80065f4:	3ff00000 	.word	0x3ff00000
 80065f8:	3ff2ffff 	.word	0x3ff2ffff
 80065fc:	40038000 	.word	0x40038000
 8006600:	3ff80000 	.word	0x3ff80000
 8006604:	bff00000 	.word	0xbff00000
 8006608:	08007470 	.word	0x08007470
 800660c:	08007490 	.word	0x08007490

08006610 <fabs>:
 8006610:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006614:	4619      	mov	r1, r3
 8006616:	4770      	bx	lr

08006618 <finite>:
 8006618:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800661c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006620:	0fc0      	lsrs	r0, r0, #31
 8006622:	4770      	bx	lr

08006624 <__ieee754_sqrt>:
 8006624:	4a67      	ldr	r2, [pc, #412]	@ (80067c4 <__ieee754_sqrt+0x1a0>)
 8006626:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662a:	438a      	bics	r2, r1
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	460b      	mov	r3, r1
 8006632:	4604      	mov	r4, r0
 8006634:	d10e      	bne.n	8006654 <__ieee754_sqrt+0x30>
 8006636:	4602      	mov	r2, r0
 8006638:	f7f9 ff4e 	bl	80004d8 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4630      	mov	r0, r6
 8006642:	4639      	mov	r1, r7
 8006644:	f7f9 fd92 	bl	800016c <__adddf3>
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006654:	2900      	cmp	r1, #0
 8006656:	dc0c      	bgt.n	8006672 <__ieee754_sqrt+0x4e>
 8006658:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800665c:	4302      	orrs	r2, r0
 800665e:	d0f5      	beq.n	800664c <__ieee754_sqrt+0x28>
 8006660:	b189      	cbz	r1, 8006686 <__ieee754_sqrt+0x62>
 8006662:	4602      	mov	r2, r0
 8006664:	f7f9 fd80 	bl	8000168 <__aeabi_dsub>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	f7fa f85e 	bl	800072c <__aeabi_ddiv>
 8006670:	e7ea      	b.n	8006648 <__ieee754_sqrt+0x24>
 8006672:	150a      	asrs	r2, r1, #20
 8006674:	d115      	bne.n	80066a2 <__ieee754_sqrt+0x7e>
 8006676:	2100      	movs	r1, #0
 8006678:	e009      	b.n	800668e <__ieee754_sqrt+0x6a>
 800667a:	0ae3      	lsrs	r3, r4, #11
 800667c:	3a15      	subs	r2, #21
 800667e:	0564      	lsls	r4, r4, #21
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0fa      	beq.n	800667a <__ieee754_sqrt+0x56>
 8006684:	e7f7      	b.n	8006676 <__ieee754_sqrt+0x52>
 8006686:	460a      	mov	r2, r1
 8006688:	e7fa      	b.n	8006680 <__ieee754_sqrt+0x5c>
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	3101      	adds	r1, #1
 800668e:	02d8      	lsls	r0, r3, #11
 8006690:	d5fb      	bpl.n	800668a <__ieee754_sqrt+0x66>
 8006692:	1e48      	subs	r0, r1, #1
 8006694:	1a12      	subs	r2, r2, r0
 8006696:	f1c1 0020 	rsb	r0, r1, #32
 800669a:	fa24 f000 	lsr.w	r0, r4, r0
 800669e:	4303      	orrs	r3, r0
 80066a0:	408c      	lsls	r4, r1
 80066a2:	2600      	movs	r6, #0
 80066a4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80066a8:	2116      	movs	r1, #22
 80066aa:	07d2      	lsls	r2, r2, #31
 80066ac:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80066b0:	4632      	mov	r2, r6
 80066b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ba:	bf5c      	itt	pl
 80066bc:	005b      	lslpl	r3, r3, #1
 80066be:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80066c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066c6:	bf58      	it	pl
 80066c8:	0064      	lslpl	r4, r4, #1
 80066ca:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80066ce:	107f      	asrs	r7, r7, #1
 80066d0:	0064      	lsls	r4, r4, #1
 80066d2:	1815      	adds	r5, r2, r0
 80066d4:	429d      	cmp	r5, r3
 80066d6:	bfde      	ittt	le
 80066d8:	182a      	addle	r2, r5, r0
 80066da:	1b5b      	suble	r3, r3, r5
 80066dc:	1836      	addle	r6, r6, r0
 80066de:	0fe5      	lsrs	r5, r4, #31
 80066e0:	3901      	subs	r1, #1
 80066e2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80066e6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80066ea:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80066ee:	d1f0      	bne.n	80066d2 <__ieee754_sqrt+0xae>
 80066f0:	460d      	mov	r5, r1
 80066f2:	f04f 0a20 	mov.w	sl, #32
 80066f6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80066fa:	429a      	cmp	r2, r3
 80066fc:	eb01 0c00 	add.w	ip, r1, r0
 8006700:	db02      	blt.n	8006708 <__ieee754_sqrt+0xe4>
 8006702:	d113      	bne.n	800672c <__ieee754_sqrt+0x108>
 8006704:	45a4      	cmp	ip, r4
 8006706:	d811      	bhi.n	800672c <__ieee754_sqrt+0x108>
 8006708:	f1bc 0f00 	cmp.w	ip, #0
 800670c:	eb0c 0100 	add.w	r1, ip, r0
 8006710:	da42      	bge.n	8006798 <__ieee754_sqrt+0x174>
 8006712:	2900      	cmp	r1, #0
 8006714:	db40      	blt.n	8006798 <__ieee754_sqrt+0x174>
 8006716:	f102 0e01 	add.w	lr, r2, #1
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	4672      	mov	r2, lr
 800671e:	45a4      	cmp	ip, r4
 8006720:	bf88      	it	hi
 8006722:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006726:	eba4 040c 	sub.w	r4, r4, ip
 800672a:	4405      	add	r5, r0
 800672c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006730:	f1ba 0a01 	subs.w	sl, sl, #1
 8006734:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006738:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800673c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006740:	d1db      	bne.n	80066fa <__ieee754_sqrt+0xd6>
 8006742:	431c      	orrs	r4, r3
 8006744:	d01a      	beq.n	800677c <__ieee754_sqrt+0x158>
 8006746:	4c20      	ldr	r4, [pc, #128]	@ (80067c8 <__ieee754_sqrt+0x1a4>)
 8006748:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80067cc <__ieee754_sqrt+0x1a8>
 800674c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006750:	e9db 2300 	ldrd	r2, r3, [fp]
 8006754:	f7f9 fd08 	bl	8000168 <__aeabi_dsub>
 8006758:	e9d4 8900 	ldrd	r8, r9, [r4]
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f7fa f934 	bl	80009d0 <__aeabi_dcmple>
 8006768:	b140      	cbz	r0, 800677c <__ieee754_sqrt+0x158>
 800676a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800676e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006772:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006776:	d111      	bne.n	800679c <__ieee754_sqrt+0x178>
 8006778:	4655      	mov	r5, sl
 800677a:	3601      	adds	r6, #1
 800677c:	1072      	asrs	r2, r6, #1
 800677e:	086b      	lsrs	r3, r5, #1
 8006780:	07f1      	lsls	r1, r6, #31
 8006782:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006786:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800678a:	bf48      	it	mi
 800678c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006790:	4618      	mov	r0, r3
 8006792:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006796:	e757      	b.n	8006648 <__ieee754_sqrt+0x24>
 8006798:	4696      	mov	lr, r2
 800679a:	e7be      	b.n	800671a <__ieee754_sqrt+0xf6>
 800679c:	f7f9 fce6 	bl	800016c <__adddf3>
 80067a0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4640      	mov	r0, r8
 80067aa:	4649      	mov	r1, r9
 80067ac:	f7fa f906 	bl	80009bc <__aeabi_dcmplt>
 80067b0:	b120      	cbz	r0, 80067bc <__ieee754_sqrt+0x198>
 80067b2:	1ca8      	adds	r0, r5, #2
 80067b4:	bf08      	it	eq
 80067b6:	3601      	addeq	r6, #1
 80067b8:	3502      	adds	r5, #2
 80067ba:	e7df      	b.n	800677c <__ieee754_sqrt+0x158>
 80067bc:	1c6b      	adds	r3, r5, #1
 80067be:	f023 0501 	bic.w	r5, r3, #1
 80067c2:	e7db      	b.n	800677c <__ieee754_sqrt+0x158>
 80067c4:	7ff00000 	.word	0x7ff00000
 80067c8:	20000088 	.word	0x20000088
 80067cc:	20000080 	.word	0x20000080

080067d0 <__ieee754_pow>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	b091      	sub	sp, #68	@ 0x44
 80067d6:	e9cd 2300 	strd	r2, r3, [sp]
 80067da:	468b      	mov	fp, r1
 80067dc:	e9dd 1800 	ldrd	r1, r8, [sp]
 80067e0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80067e4:	4682      	mov	sl, r0
 80067e6:	ea57 0001 	orrs.w	r0, r7, r1
 80067ea:	d112      	bne.n	8006812 <__ieee754_pow+0x42>
 80067ec:	4653      	mov	r3, sl
 80067ee:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80067f2:	18db      	adds	r3, r3, r3
 80067f4:	4152      	adcs	r2, r2
 80067f6:	4298      	cmp	r0, r3
 80067f8:	4b91      	ldr	r3, [pc, #580]	@ (8006a40 <__ieee754_pow+0x270>)
 80067fa:	4193      	sbcs	r3, r2
 80067fc:	f080 84ce 	bcs.w	800719c <__ieee754_pow+0x9cc>
 8006800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006804:	4650      	mov	r0, sl
 8006806:	4659      	mov	r1, fp
 8006808:	f7f9 fcb0 	bl	800016c <__adddf3>
 800680c:	b011      	add	sp, #68	@ 0x44
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	4b8c      	ldr	r3, [pc, #560]	@ (8006a44 <__ieee754_pow+0x274>)
 8006814:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006818:	429e      	cmp	r6, r3
 800681a:	465d      	mov	r5, fp
 800681c:	46d1      	mov	r9, sl
 800681e:	d807      	bhi.n	8006830 <__ieee754_pow+0x60>
 8006820:	d102      	bne.n	8006828 <__ieee754_pow+0x58>
 8006822:	f1ba 0f00 	cmp.w	sl, #0
 8006826:	d1eb      	bne.n	8006800 <__ieee754_pow+0x30>
 8006828:	429f      	cmp	r7, r3
 800682a:	d801      	bhi.n	8006830 <__ieee754_pow+0x60>
 800682c:	d10f      	bne.n	800684e <__ieee754_pow+0x7e>
 800682e:	b171      	cbz	r1, 800684e <__ieee754_pow+0x7e>
 8006830:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8006834:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006838:	ea55 0509 	orrs.w	r5, r5, r9
 800683c:	d1e0      	bne.n	8006800 <__ieee754_pow+0x30>
 800683e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006842:	18db      	adds	r3, r3, r3
 8006844:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006848:	4152      	adcs	r2, r2
 800684a:	429d      	cmp	r5, r3
 800684c:	e7d4      	b.n	80067f8 <__ieee754_pow+0x28>
 800684e:	2d00      	cmp	r5, #0
 8006850:	4633      	mov	r3, r6
 8006852:	da39      	bge.n	80068c8 <__ieee754_pow+0xf8>
 8006854:	4a7c      	ldr	r2, [pc, #496]	@ (8006a48 <__ieee754_pow+0x278>)
 8006856:	4297      	cmp	r7, r2
 8006858:	d84e      	bhi.n	80068f8 <__ieee754_pow+0x128>
 800685a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800685e:	4297      	cmp	r7, r2
 8006860:	f240 84ab 	bls.w	80071ba <__ieee754_pow+0x9ea>
 8006864:	153a      	asrs	r2, r7, #20
 8006866:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800686a:	2a14      	cmp	r2, #20
 800686c:	dd0f      	ble.n	800688e <__ieee754_pow+0xbe>
 800686e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006872:	fa21 f402 	lsr.w	r4, r1, r2
 8006876:	fa04 f202 	lsl.w	r2, r4, r2
 800687a:	428a      	cmp	r2, r1
 800687c:	f040 849d 	bne.w	80071ba <__ieee754_pow+0x9ea>
 8006880:	f004 0401 	and.w	r4, r4, #1
 8006884:	f1c4 0402 	rsb	r4, r4, #2
 8006888:	2900      	cmp	r1, #0
 800688a:	d15a      	bne.n	8006942 <__ieee754_pow+0x172>
 800688c:	e00e      	b.n	80068ac <__ieee754_pow+0xdc>
 800688e:	2900      	cmp	r1, #0
 8006890:	d156      	bne.n	8006940 <__ieee754_pow+0x170>
 8006892:	f1c2 0214 	rsb	r2, r2, #20
 8006896:	fa47 f402 	asr.w	r4, r7, r2
 800689a:	fa04 f202 	lsl.w	r2, r4, r2
 800689e:	42ba      	cmp	r2, r7
 80068a0:	f040 8488 	bne.w	80071b4 <__ieee754_pow+0x9e4>
 80068a4:	f004 0401 	and.w	r4, r4, #1
 80068a8:	f1c4 0402 	rsb	r4, r4, #2
 80068ac:	4a67      	ldr	r2, [pc, #412]	@ (8006a4c <__ieee754_pow+0x27c>)
 80068ae:	4297      	cmp	r7, r2
 80068b0:	d130      	bne.n	8006914 <__ieee754_pow+0x144>
 80068b2:	f1b8 0f00 	cmp.w	r8, #0
 80068b6:	f280 8479 	bge.w	80071ac <__ieee754_pow+0x9dc>
 80068ba:	4652      	mov	r2, sl
 80068bc:	465b      	mov	r3, fp
 80068be:	2000      	movs	r0, #0
 80068c0:	4962      	ldr	r1, [pc, #392]	@ (8006a4c <__ieee754_pow+0x27c>)
 80068c2:	f7f9 ff33 	bl	800072c <__aeabi_ddiv>
 80068c6:	e7a1      	b.n	800680c <__ieee754_pow+0x3c>
 80068c8:	2400      	movs	r4, #0
 80068ca:	2900      	cmp	r1, #0
 80068cc:	d139      	bne.n	8006942 <__ieee754_pow+0x172>
 80068ce:	4a5d      	ldr	r2, [pc, #372]	@ (8006a44 <__ieee754_pow+0x274>)
 80068d0:	4297      	cmp	r7, r2
 80068d2:	d1eb      	bne.n	80068ac <__ieee754_pow+0xdc>
 80068d4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80068d8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80068dc:	ea53 0309 	orrs.w	r3, r3, r9
 80068e0:	f000 845c 	beq.w	800719c <__ieee754_pow+0x9cc>
 80068e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006a50 <__ieee754_pow+0x280>)
 80068e6:	429e      	cmp	r6, r3
 80068e8:	d908      	bls.n	80068fc <__ieee754_pow+0x12c>
 80068ea:	f1b8 0f00 	cmp.w	r8, #0
 80068ee:	f2c0 8459 	blt.w	80071a4 <__ieee754_pow+0x9d4>
 80068f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f6:	e789      	b.n	800680c <__ieee754_pow+0x3c>
 80068f8:	2402      	movs	r4, #2
 80068fa:	e7e6      	b.n	80068ca <__ieee754_pow+0xfa>
 80068fc:	f1b8 0f00 	cmp.w	r8, #0
 8006900:	f04f 0000 	mov.w	r0, #0
 8006904:	f04f 0100 	mov.w	r1, #0
 8006908:	da80      	bge.n	800680c <__ieee754_pow+0x3c>
 800690a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800690e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006912:	e77b      	b.n	800680c <__ieee754_pow+0x3c>
 8006914:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006918:	d106      	bne.n	8006928 <__ieee754_pow+0x158>
 800691a:	4652      	mov	r2, sl
 800691c:	465b      	mov	r3, fp
 800691e:	4650      	mov	r0, sl
 8006920:	4659      	mov	r1, fp
 8006922:	f7f9 fdd9 	bl	80004d8 <__aeabi_dmul>
 8006926:	e771      	b.n	800680c <__ieee754_pow+0x3c>
 8006928:	4a4a      	ldr	r2, [pc, #296]	@ (8006a54 <__ieee754_pow+0x284>)
 800692a:	4590      	cmp	r8, r2
 800692c:	d109      	bne.n	8006942 <__ieee754_pow+0x172>
 800692e:	2d00      	cmp	r5, #0
 8006930:	db07      	blt.n	8006942 <__ieee754_pow+0x172>
 8006932:	4650      	mov	r0, sl
 8006934:	4659      	mov	r1, fp
 8006936:	b011      	add	sp, #68	@ 0x44
 8006938:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	f7ff be72 	b.w	8006624 <__ieee754_sqrt>
 8006940:	2400      	movs	r4, #0
 8006942:	4650      	mov	r0, sl
 8006944:	4659      	mov	r1, fp
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	f7ff fe62 	bl	8006610 <fabs>
 800694c:	9b02      	ldr	r3, [sp, #8]
 800694e:	f1b9 0f00 	cmp.w	r9, #0
 8006952:	d127      	bne.n	80069a4 <__ieee754_pow+0x1d4>
 8006954:	4a3d      	ldr	r2, [pc, #244]	@ (8006a4c <__ieee754_pow+0x27c>)
 8006956:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800695a:	4594      	cmp	ip, r2
 800695c:	d000      	beq.n	8006960 <__ieee754_pow+0x190>
 800695e:	bb0e      	cbnz	r6, 80069a4 <__ieee754_pow+0x1d4>
 8006960:	f1b8 0f00 	cmp.w	r8, #0
 8006964:	da05      	bge.n	8006972 <__ieee754_pow+0x1a2>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	2000      	movs	r0, #0
 800696c:	4937      	ldr	r1, [pc, #220]	@ (8006a4c <__ieee754_pow+0x27c>)
 800696e:	f7f9 fedd 	bl	800072c <__aeabi_ddiv>
 8006972:	2d00      	cmp	r5, #0
 8006974:	f6bf af4a 	bge.w	800680c <__ieee754_pow+0x3c>
 8006978:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800697c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006980:	4326      	orrs	r6, r4
 8006982:	d108      	bne.n	8006996 <__ieee754_pow+0x1c6>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4610      	mov	r0, r2
 800698a:	4619      	mov	r1, r3
 800698c:	f7f9 fbec 	bl	8000168 <__aeabi_dsub>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	e795      	b.n	80068c2 <__ieee754_pow+0xf2>
 8006996:	2c01      	cmp	r4, #1
 8006998:	f47f af38 	bne.w	800680c <__ieee754_pow+0x3c>
 800699c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069a0:	4619      	mov	r1, r3
 80069a2:	e733      	b.n	800680c <__ieee754_pow+0x3c>
 80069a4:	0fea      	lsrs	r2, r5, #31
 80069a6:	3a01      	subs	r2, #1
 80069a8:	ea52 0c04 	orrs.w	ip, r2, r4
 80069ac:	d102      	bne.n	80069b4 <__ieee754_pow+0x1e4>
 80069ae:	4652      	mov	r2, sl
 80069b0:	465b      	mov	r3, fp
 80069b2:	e7e9      	b.n	8006988 <__ieee754_pow+0x1b8>
 80069b4:	f04f 0900 	mov.w	r9, #0
 80069b8:	3c01      	subs	r4, #1
 80069ba:	4314      	orrs	r4, r2
 80069bc:	bf14      	ite	ne
 80069be:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8006a4c <__ieee754_pow+0x27c>
 80069c2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006a58 <__ieee754_pow+0x288>
 80069c6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80069ca:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80069ce:	f240 8107 	bls.w	8006be0 <__ieee754_pow+0x410>
 80069d2:	4b22      	ldr	r3, [pc, #136]	@ (8006a5c <__ieee754_pow+0x28c>)
 80069d4:	429f      	cmp	r7, r3
 80069d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a50 <__ieee754_pow+0x280>)
 80069d8:	d913      	bls.n	8006a02 <__ieee754_pow+0x232>
 80069da:	429e      	cmp	r6, r3
 80069dc:	d808      	bhi.n	80069f0 <__ieee754_pow+0x220>
 80069de:	f1b8 0f00 	cmp.w	r8, #0
 80069e2:	da08      	bge.n	80069f6 <__ieee754_pow+0x226>
 80069e4:	2000      	movs	r0, #0
 80069e6:	b011      	add	sp, #68	@ 0x44
 80069e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	f000 bcb0 	b.w	8007350 <__math_oflow>
 80069f0:	f1b8 0f00 	cmp.w	r8, #0
 80069f4:	dcf6      	bgt.n	80069e4 <__ieee754_pow+0x214>
 80069f6:	2000      	movs	r0, #0
 80069f8:	b011      	add	sp, #68	@ 0x44
 80069fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fe:	f000 bca2 	b.w	8007346 <__math_uflow>
 8006a02:	429e      	cmp	r6, r3
 8006a04:	d20c      	bcs.n	8006a20 <__ieee754_pow+0x250>
 8006a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f7f9 ffd5 	bl	80009bc <__aeabi_dcmplt>
 8006a12:	3800      	subs	r0, #0
 8006a14:	bf18      	it	ne
 8006a16:	2001      	movne	r0, #1
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	daec      	bge.n	80069f8 <__ieee754_pow+0x228>
 8006a1e:	e7e2      	b.n	80069e6 <__ieee754_pow+0x216>
 8006a20:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <__ieee754_pow+0x27c>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	429e      	cmp	r6, r3
 8006a26:	d91b      	bls.n	8006a60 <__ieee754_pow+0x290>
 8006a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f7f9 ffc5 	bl	80009bc <__aeabi_dcmplt>
 8006a32:	3800      	subs	r0, #0
 8006a34:	bf18      	it	ne
 8006a36:	2001      	movne	r0, #1
 8006a38:	f1b8 0f00 	cmp.w	r8, #0
 8006a3c:	dcd3      	bgt.n	80069e6 <__ieee754_pow+0x216>
 8006a3e:	e7db      	b.n	80069f8 <__ieee754_pow+0x228>
 8006a40:	fff00000 	.word	0xfff00000
 8006a44:	7ff00000 	.word	0x7ff00000
 8006a48:	433fffff 	.word	0x433fffff
 8006a4c:	3ff00000 	.word	0x3ff00000
 8006a50:	3fefffff 	.word	0x3fefffff
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	bff00000 	.word	0xbff00000
 8006a5c:	43f00000 	.word	0x43f00000
 8006a60:	4b5b      	ldr	r3, [pc, #364]	@ (8006bd0 <__ieee754_pow+0x400>)
 8006a62:	f7f9 fb81 	bl	8000168 <__aeabi_dsub>
 8006a66:	a352      	add	r3, pc, #328	@ (adr r3, 8006bb0 <__ieee754_pow+0x3e0>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460d      	mov	r5, r1
 8006a70:	f7f9 fd32 	bl	80004d8 <__aeabi_dmul>
 8006a74:	a350      	add	r3, pc, #320	@ (adr r3, 8006bb8 <__ieee754_pow+0x3e8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7f9 fd29 	bl	80004d8 <__aeabi_dmul>
 8006a86:	2200      	movs	r2, #0
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4b50      	ldr	r3, [pc, #320]	@ (8006bd4 <__ieee754_pow+0x404>)
 8006a92:	f7f9 fd21 	bl	80004d8 <__aeabi_dmul>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	a149      	add	r1, pc, #292	@ (adr r1, 8006bc0 <__ieee754_pow+0x3f0>)
 8006a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa0:	f7f9 fb62 	bl	8000168 <__aeabi_dsub>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	f7f9 fd16 	bl	80004d8 <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	4949      	ldr	r1, [pc, #292]	@ (8006bd8 <__ieee754_pow+0x408>)
 8006ab4:	f7f9 fb58 	bl	8000168 <__aeabi_dsub>
 8006ab8:	4622      	mov	r2, r4
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	462b      	mov	r3, r5
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7f9 fd08 	bl	80004d8 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4640      	mov	r0, r8
 8006ace:	4649      	mov	r1, r9
 8006ad0:	f7f9 fd02 	bl	80004d8 <__aeabi_dmul>
 8006ad4:	a33c      	add	r3, pc, #240	@ (adr r3, 8006bc8 <__ieee754_pow+0x3f8>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	4659      	mov	r1, fp
 8006ae6:	f7f9 fb3f 	bl	8000168 <__aeabi_dsub>
 8006aea:	2400      	movs	r4, #0
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4680      	mov	r8, r0
 8006af2:	4689      	mov	r9, r1
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7f9 fb38 	bl	800016c <__adddf3>
 8006afc:	4632      	mov	r2, r6
 8006afe:	463b      	mov	r3, r7
 8006b00:	4620      	mov	r0, r4
 8006b02:	460d      	mov	r5, r1
 8006b04:	f7f9 fb30 	bl	8000168 <__aeabi_dsub>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 fb2a 	bl	8000168 <__aeabi_dsub>
 8006b14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006b24:	4606      	mov	r6, r0
 8006b26:	460f      	mov	r7, r1
 8006b28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	465b      	mov	r3, fp
 8006b30:	f7f9 fb1a 	bl	8000168 <__aeabi_dsub>
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	f7f9 fcce 	bl	80004d8 <__aeabi_dmul>
 8006b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b40:	4680      	mov	r8, r0
 8006b42:	4689      	mov	r9, r1
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 fcc6 	bl	80004d8 <__aeabi_dmul>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4640      	mov	r0, r8
 8006b52:	4649      	mov	r1, r9
 8006b54:	f7f9 fb0a 	bl	800016c <__adddf3>
 8006b58:	4652      	mov	r2, sl
 8006b5a:	465b      	mov	r3, fp
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	4620      	mov	r0, r4
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7f9 fcb8 	bl	80004d8 <__aeabi_dmul>
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 fafa 	bl	800016c <__adddf3>
 8006b78:	4b18      	ldr	r3, [pc, #96]	@ (8006bdc <__ieee754_pow+0x40c>)
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	460d      	mov	r5, r1
 8006b80:	468a      	mov	sl, r1
 8006b82:	468b      	mov	fp, r1
 8006b84:	f340 82e0 	ble.w	8007148 <__ieee754_pow+0x978>
 8006b88:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006b8c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006b90:	4303      	orrs	r3, r0
 8006b92:	f000 81df 	beq.w	8006f54 <__ieee754_pow+0x784>
 8006b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f7f9 ff0d 	bl	80009bc <__aeabi_dcmplt>
 8006ba2:	3800      	subs	r0, #0
 8006ba4:	bf18      	it	ne
 8006ba6:	2001      	movne	r0, #1
 8006ba8:	e71d      	b.n	80069e6 <__ieee754_pow+0x216>
 8006baa:	bf00      	nop
 8006bac:	f3af 8000 	nop.w
 8006bb0:	60000000 	.word	0x60000000
 8006bb4:	3ff71547 	.word	0x3ff71547
 8006bb8:	f85ddf44 	.word	0xf85ddf44
 8006bbc:	3e54ae0b 	.word	0x3e54ae0b
 8006bc0:	55555555 	.word	0x55555555
 8006bc4:	3fd55555 	.word	0x3fd55555
 8006bc8:	652b82fe 	.word	0x652b82fe
 8006bcc:	3ff71547 	.word	0x3ff71547
 8006bd0:	3ff00000 	.word	0x3ff00000
 8006bd4:	3fd00000 	.word	0x3fd00000
 8006bd8:	3fe00000 	.word	0x3fe00000
 8006bdc:	408fffff 	.word	0x408fffff
 8006be0:	4ad3      	ldr	r2, [pc, #844]	@ (8006f30 <__ieee754_pow+0x760>)
 8006be2:	402a      	ands	r2, r5
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	f040 817a 	bne.w	8006ede <__ieee754_pow+0x70e>
 8006bea:	4bd2      	ldr	r3, [pc, #840]	@ (8006f34 <__ieee754_pow+0x764>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	f7f9 fc73 	bl	80004d8 <__aeabi_dmul>
 8006bf2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	151a      	asrs	r2, r3, #20
 8006bfa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006bfe:	4422      	add	r2, r4
 8006c00:	920a      	str	r2, [sp, #40]	@ 0x28
 8006c02:	4acd      	ldr	r2, [pc, #820]	@ (8006f38 <__ieee754_pow+0x768>)
 8006c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c08:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c12:	dd08      	ble.n	8006c26 <__ieee754_pow+0x456>
 8006c14:	4ac9      	ldr	r2, [pc, #804]	@ (8006f3c <__ieee754_pow+0x76c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	f340 8163 	ble.w	8006ee2 <__ieee754_pow+0x712>
 8006c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c1e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006c22:	3301      	adds	r3, #1
 8006c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c26:	2600      	movs	r6, #0
 8006c28:	00f3      	lsls	r3, r6, #3
 8006c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c2c:	4bc4      	ldr	r3, [pc, #784]	@ (8006f40 <__ieee754_pow+0x770>)
 8006c2e:	4629      	mov	r1, r5
 8006c30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006c3e:	4623      	mov	r3, r4
 8006c40:	4682      	mov	sl, r0
 8006c42:	f7f9 fa91 	bl	8000168 <__aeabi_dsub>
 8006c46:	4652      	mov	r2, sl
 8006c48:	462b      	mov	r3, r5
 8006c4a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006c4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c52:	f7f9 fa8b 	bl	800016c <__adddf3>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	49b9      	ldr	r1, [pc, #740]	@ (8006f44 <__ieee754_pow+0x774>)
 8006c5e:	f7f9 fd65 	bl	800072c <__aeabi_ddiv>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c6e:	f7f9 fc33 	bl	80004d8 <__aeabi_dmul>
 8006c72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c76:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006c7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2200      	movs	r2, #0
 8006c82:	46ab      	mov	fp, r5
 8006c84:	106d      	asrs	r5, r5, #1
 8006c86:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006c90:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c94:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	461d      	mov	r5, r3
 8006ca0:	f7f9 fc1a 	bl	80004d8 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cac:	f7f9 fa5c 	bl	8000168 <__aeabi_dsub>
 8006cb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7f9 fa54 	bl	8000168 <__aeabi_dsub>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4650      	mov	r0, sl
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	f7f9 fa4e 	bl	8000168 <__aeabi_dsub>
 8006ccc:	4642      	mov	r2, r8
 8006cce:	464b      	mov	r3, r9
 8006cd0:	f7f9 fc02 	bl	80004d8 <__aeabi_dmul>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4630      	mov	r0, r6
 8006cda:	4639      	mov	r1, r7
 8006cdc:	f7f9 fa44 	bl	8000168 <__aeabi_dsub>
 8006ce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f7f9 fbf0 	bl	80004d8 <__aeabi_dmul>
 8006cf8:	a37b      	add	r3, pc, #492	@ (adr r3, 8006ee8 <__ieee754_pow+0x718>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	4604      	mov	r4, r0
 8006d00:	460d      	mov	r5, r1
 8006d02:	f7f9 fbe9 	bl	80004d8 <__aeabi_dmul>
 8006d06:	a37a      	add	r3, pc, #488	@ (adr r3, 8006ef0 <__ieee754_pow+0x720>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fa2e 	bl	800016c <__adddf3>
 8006d10:	4622      	mov	r2, r4
 8006d12:	462b      	mov	r3, r5
 8006d14:	f7f9 fbe0 	bl	80004d8 <__aeabi_dmul>
 8006d18:	a377      	add	r3, pc, #476	@ (adr r3, 8006ef8 <__ieee754_pow+0x728>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fa25 	bl	800016c <__adddf3>
 8006d22:	4622      	mov	r2, r4
 8006d24:	462b      	mov	r3, r5
 8006d26:	f7f9 fbd7 	bl	80004d8 <__aeabi_dmul>
 8006d2a:	a375      	add	r3, pc, #468	@ (adr r3, 8006f00 <__ieee754_pow+0x730>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f7f9 fa1c 	bl	800016c <__adddf3>
 8006d34:	4622      	mov	r2, r4
 8006d36:	462b      	mov	r3, r5
 8006d38:	f7f9 fbce 	bl	80004d8 <__aeabi_dmul>
 8006d3c:	a372      	add	r3, pc, #456	@ (adr r3, 8006f08 <__ieee754_pow+0x738>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fa13 	bl	800016c <__adddf3>
 8006d46:	4622      	mov	r2, r4
 8006d48:	462b      	mov	r3, r5
 8006d4a:	f7f9 fbc5 	bl	80004d8 <__aeabi_dmul>
 8006d4e:	a370      	add	r3, pc, #448	@ (adr r3, 8006f10 <__ieee754_pow+0x740>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	f7f9 fa0a 	bl	800016c <__adddf3>
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	460f      	mov	r7, r1
 8006d5e:	462b      	mov	r3, r5
 8006d60:	4620      	mov	r0, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	f7f9 fbb8 	bl	80004d8 <__aeabi_dmul>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 fbb2 	bl	80004d8 <__aeabi_dmul>
 8006d74:	4604      	mov	r4, r0
 8006d76:	460d      	mov	r5, r1
 8006d78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	f7f9 f9f4 	bl	800016c <__adddf3>
 8006d84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d88:	f7f9 fba6 	bl	80004d8 <__aeabi_dmul>
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	462b      	mov	r3, r5
 8006d90:	f7f9 f9ec 	bl	800016c <__adddf3>
 8006d94:	4642      	mov	r2, r8
 8006d96:	4682      	mov	sl, r0
 8006d98:	468b      	mov	fp, r1
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fb9a 	bl	80004d8 <__aeabi_dmul>
 8006da4:	2200      	movs	r2, #0
 8006da6:	4b68      	ldr	r3, [pc, #416]	@ (8006f48 <__ieee754_pow+0x778>)
 8006da8:	4606      	mov	r6, r0
 8006daa:	460f      	mov	r7, r1
 8006dac:	f7f9 f9de 	bl	800016c <__adddf3>
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	f7f9 f9da 	bl	800016c <__adddf3>
 8006db8:	2400      	movs	r4, #0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	4622      	mov	r2, r4
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	f7f9 fb88 	bl	80004d8 <__aeabi_dmul>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4689      	mov	r9, r1
 8006dce:	4620      	mov	r0, r4
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8006f48 <__ieee754_pow+0x778>)
 8006dd4:	f7f9 f9c8 	bl	8000168 <__aeabi_dsub>
 8006dd8:	4632      	mov	r2, r6
 8006dda:	463b      	mov	r3, r7
 8006ddc:	f7f9 f9c4 	bl	8000168 <__aeabi_dsub>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4650      	mov	r0, sl
 8006de6:	4659      	mov	r1, fp
 8006de8:	f7f9 f9be 	bl	8000168 <__aeabi_dsub>
 8006dec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006df0:	f7f9 fb72 	bl	80004d8 <__aeabi_dmul>
 8006df4:	4622      	mov	r2, r4
 8006df6:	4606      	mov	r6, r0
 8006df8:	460f      	mov	r7, r1
 8006dfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dfe:	462b      	mov	r3, r5
 8006e00:	f7f9 fb6a 	bl	80004d8 <__aeabi_dmul>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f7f9 f9ae 	bl	800016c <__adddf3>
 8006e10:	2400      	movs	r4, #0
 8006e12:	4606      	mov	r6, r0
 8006e14:	460f      	mov	r7, r1
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f7f9 f9a5 	bl	800016c <__adddf3>
 8006e22:	a33d      	add	r3, pc, #244	@ (adr r3, 8006f18 <__ieee754_pow+0x748>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	4620      	mov	r0, r4
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	f7f9 fb54 	bl	80004d8 <__aeabi_dmul>
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e38:	4620      	mov	r0, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	f7f9 f994 	bl	8000168 <__aeabi_dsub>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	f7f9 f98e 	bl	8000168 <__aeabi_dsub>
 8006e4c:	a334      	add	r3, pc, #208	@ (adr r3, 8006f20 <__ieee754_pow+0x750>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fb41 	bl	80004d8 <__aeabi_dmul>
 8006e56:	a334      	add	r3, pc, #208	@ (adr r3, 8006f28 <__ieee754_pow+0x758>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	460f      	mov	r7, r1
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	f7f9 fb38 	bl	80004d8 <__aeabi_dmul>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 f97c 	bl	800016c <__adddf3>
 8006e74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e76:	4b35      	ldr	r3, [pc, #212]	@ (8006f4c <__ieee754_pow+0x77c>)
 8006e78:	2400      	movs	r4, #0
 8006e7a:	4413      	add	r3, r2
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f7f9 f974 	bl	800016c <__adddf3>
 8006e84:	4682      	mov	sl, r0
 8006e86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e88:	468b      	mov	fp, r1
 8006e8a:	f7f9 fabb 	bl	8000404 <__aeabi_i2d>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e94:	4b2e      	ldr	r3, [pc, #184]	@ (8006f50 <__ieee754_pow+0x780>)
 8006e96:	4413      	add	r3, r2
 8006e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e9c:	4652      	mov	r2, sl
 8006e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ea2:	465b      	mov	r3, fp
 8006ea4:	f7f9 f962 	bl	800016c <__adddf3>
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	f7f9 f95e 	bl	800016c <__adddf3>
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	f7f9 f95a 	bl	800016c <__adddf3>
 8006eb8:	4632      	mov	r2, r6
 8006eba:	463b      	mov	r3, r7
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	460d      	mov	r5, r1
 8006ec0:	f7f9 f952 	bl	8000168 <__aeabi_dsub>
 8006ec4:	4642      	mov	r2, r8
 8006ec6:	464b      	mov	r3, r9
 8006ec8:	f7f9 f94e 	bl	8000168 <__aeabi_dsub>
 8006ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed0:	f7f9 f94a 	bl	8000168 <__aeabi_dsub>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4650      	mov	r0, sl
 8006eda:	4659      	mov	r1, fp
 8006edc:	e618      	b.n	8006b10 <__ieee754_pow+0x340>
 8006ede:	2400      	movs	r4, #0
 8006ee0:	e68a      	b.n	8006bf8 <__ieee754_pow+0x428>
 8006ee2:	2601      	movs	r6, #1
 8006ee4:	e6a0      	b.n	8006c28 <__ieee754_pow+0x458>
 8006ee6:	bf00      	nop
 8006ee8:	4a454eef 	.word	0x4a454eef
 8006eec:	3fca7e28 	.word	0x3fca7e28
 8006ef0:	93c9db65 	.word	0x93c9db65
 8006ef4:	3fcd864a 	.word	0x3fcd864a
 8006ef8:	a91d4101 	.word	0xa91d4101
 8006efc:	3fd17460 	.word	0x3fd17460
 8006f00:	518f264d 	.word	0x518f264d
 8006f04:	3fd55555 	.word	0x3fd55555
 8006f08:	db6fabff 	.word	0xdb6fabff
 8006f0c:	3fdb6db6 	.word	0x3fdb6db6
 8006f10:	33333303 	.word	0x33333303
 8006f14:	3fe33333 	.word	0x3fe33333
 8006f18:	e0000000 	.word	0xe0000000
 8006f1c:	3feec709 	.word	0x3feec709
 8006f20:	dc3a03fd 	.word	0xdc3a03fd
 8006f24:	3feec709 	.word	0x3feec709
 8006f28:	145b01f5 	.word	0x145b01f5
 8006f2c:	be3e2fe0 	.word	0xbe3e2fe0
 8006f30:	7ff00000 	.word	0x7ff00000
 8006f34:	43400000 	.word	0x43400000
 8006f38:	0003988e 	.word	0x0003988e
 8006f3c:	000bb679 	.word	0x000bb679
 8006f40:	080074d0 	.word	0x080074d0
 8006f44:	3ff00000 	.word	0x3ff00000
 8006f48:	40080000 	.word	0x40080000
 8006f4c:	080074b0 	.word	0x080074b0
 8006f50:	080074c0 	.word	0x080074c0
 8006f54:	a39a      	add	r3, pc, #616	@ (adr r3, 80071c0 <__ieee754_pow+0x9f0>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7f9 f905 	bl	800016c <__adddf3>
 8006f62:	4642      	mov	r2, r8
 8006f64:	e9cd 0100 	strd	r0, r1, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f7f9 f8fb 	bl	8000168 <__aeabi_dsub>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f7a:	f7f9 fd3d 	bl	80009f8 <__aeabi_dcmpgt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f47f ae09 	bne.w	8006b96 <__ieee754_pow+0x3c6>
 8006f84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006f88:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006f8c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006f90:	fa43 fa0a 	asr.w	sl, r3, sl
 8006f94:	44da      	add	sl, fp
 8006f96:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006f9a:	489b      	ldr	r0, [pc, #620]	@ (8007208 <__ieee754_pow+0xa38>)
 8006f9c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006fa0:	4108      	asrs	r0, r1
 8006fa2:	ea00 030a 	and.w	r3, r0, sl
 8006fa6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006faa:	f1c1 0114 	rsb	r1, r1, #20
 8006fae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	fa4a fa01 	asr.w	sl, sl, r1
 8006fb8:	f1bb 0f00 	cmp.w	fp, #0
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	bfb8      	it	lt
 8006fc4:	f1ca 0a00 	rsblt	sl, sl, #0
 8006fc8:	f7f9 f8ce 	bl	8000168 <__aeabi_dsub>
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4649      	mov	r1, r9
 8006fda:	f7f9 f8c7 	bl	800016c <__adddf3>
 8006fde:	a37a      	add	r3, pc, #488	@ (adr r3, 80071c8 <__ieee754_pow+0x9f8>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	f7f9 fa76 	bl	80004d8 <__aeabi_dmul>
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	f7f9 f8b6 	bl	8000168 <__aeabi_dsub>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 f8b0 	bl	8000168 <__aeabi_dsub>
 8007008:	a371      	add	r3, pc, #452	@ (adr r3, 80071d0 <__ieee754_pow+0xa00>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	a371      	add	r3, pc, #452	@ (adr r3, 80071d8 <__ieee754_pow+0xa08>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	4680      	mov	r8, r0
 800701a:	4689      	mov	r9, r1
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 fa5a 	bl	80004d8 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4640      	mov	r0, r8
 800702a:	4649      	mov	r1, r9
 800702c:	f7f9 f89e 	bl	800016c <__adddf3>
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800703c:	f7f9 f896 	bl	800016c <__adddf3>
 8007040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007044:	4680      	mov	r8, r0
 8007046:	4689      	mov	r9, r1
 8007048:	f7f9 f88e 	bl	8000168 <__aeabi_dsub>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4620      	mov	r0, r4
 8007052:	4629      	mov	r1, r5
 8007054:	f7f9 f888 	bl	8000168 <__aeabi_dsub>
 8007058:	4642      	mov	r2, r8
 800705a:	4606      	mov	r6, r0
 800705c:	460f      	mov	r7, r1
 800705e:	464b      	mov	r3, r9
 8007060:	4640      	mov	r0, r8
 8007062:	4649      	mov	r1, r9
 8007064:	f7f9 fa38 	bl	80004d8 <__aeabi_dmul>
 8007068:	a35d      	add	r3, pc, #372	@ (adr r3, 80071e0 <__ieee754_pow+0xa10>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	4604      	mov	r4, r0
 8007070:	460d      	mov	r5, r1
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	a35c      	add	r3, pc, #368	@ (adr r3, 80071e8 <__ieee754_pow+0xa18>)
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 f874 	bl	8000168 <__aeabi_dsub>
 8007080:	4622      	mov	r2, r4
 8007082:	462b      	mov	r3, r5
 8007084:	f7f9 fa28 	bl	80004d8 <__aeabi_dmul>
 8007088:	a359      	add	r3, pc, #356	@ (adr r3, 80071f0 <__ieee754_pow+0xa20>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 f86d 	bl	800016c <__adddf3>
 8007092:	4622      	mov	r2, r4
 8007094:	462b      	mov	r3, r5
 8007096:	f7f9 fa1f 	bl	80004d8 <__aeabi_dmul>
 800709a:	a357      	add	r3, pc, #348	@ (adr r3, 80071f8 <__ieee754_pow+0xa28>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f7f9 f862 	bl	8000168 <__aeabi_dsub>
 80070a4:	4622      	mov	r2, r4
 80070a6:	462b      	mov	r3, r5
 80070a8:	f7f9 fa16 	bl	80004d8 <__aeabi_dmul>
 80070ac:	a354      	add	r3, pc, #336	@ (adr r3, 8007200 <__ieee754_pow+0xa30>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f85b 	bl	800016c <__adddf3>
 80070b6:	4622      	mov	r2, r4
 80070b8:	462b      	mov	r3, r5
 80070ba:	f7f9 fa0d 	bl	80004d8 <__aeabi_dmul>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	f7f9 f84f 	bl	8000168 <__aeabi_dsub>
 80070ca:	4604      	mov	r4, r0
 80070cc:	460d      	mov	r5, r1
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	f7f9 f9ff 	bl	80004d8 <__aeabi_dmul>
 80070da:	2200      	movs	r2, #0
 80070dc:	e9cd 0100 	strd	r0, r1, [sp]
 80070e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 f83e 	bl	8000168 <__aeabi_dsub>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070f4:	f7f9 fb1a 	bl	800072c <__aeabi_ddiv>
 80070f8:	4632      	mov	r2, r6
 80070fa:	4604      	mov	r4, r0
 80070fc:	460d      	mov	r5, r1
 80070fe:	463b      	mov	r3, r7
 8007100:	4640      	mov	r0, r8
 8007102:	4649      	mov	r1, r9
 8007104:	f7f9 f9e8 	bl	80004d8 <__aeabi_dmul>
 8007108:	4632      	mov	r2, r6
 800710a:	463b      	mov	r3, r7
 800710c:	f7f9 f82e 	bl	800016c <__adddf3>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f7f9 f826 	bl	8000168 <__aeabi_dsub>
 800711c:	4642      	mov	r2, r8
 800711e:	464b      	mov	r3, r9
 8007120:	f7f9 f822 	bl	8000168 <__aeabi_dsub>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	2000      	movs	r0, #0
 800712a:	4938      	ldr	r1, [pc, #224]	@ (800720c <__ieee754_pow+0xa3c>)
 800712c:	f7f9 f81c 	bl	8000168 <__aeabi_dsub>
 8007130:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007134:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007138:	da2e      	bge.n	8007198 <__ieee754_pow+0x9c8>
 800713a:	4652      	mov	r2, sl
 800713c:	f000 f870 	bl	8007220 <scalbn>
 8007140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007144:	f7ff bbed 	b.w	8006922 <__ieee754_pow+0x152>
 8007148:	4c31      	ldr	r4, [pc, #196]	@ (8007210 <__ieee754_pow+0xa40>)
 800714a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800714e:	42a3      	cmp	r3, r4
 8007150:	d91a      	bls.n	8007188 <__ieee754_pow+0x9b8>
 8007152:	4b30      	ldr	r3, [pc, #192]	@ (8007214 <__ieee754_pow+0xa44>)
 8007154:	440b      	add	r3, r1
 8007156:	4303      	orrs	r3, r0
 8007158:	d009      	beq.n	800716e <__ieee754_pow+0x99e>
 800715a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	2300      	movs	r3, #0
 8007162:	f7f9 fc2b 	bl	80009bc <__aeabi_dcmplt>
 8007166:	3800      	subs	r0, #0
 8007168:	bf18      	it	ne
 800716a:	2001      	movne	r0, #1
 800716c:	e444      	b.n	80069f8 <__ieee754_pow+0x228>
 800716e:	4642      	mov	r2, r8
 8007170:	464b      	mov	r3, r9
 8007172:	f7f8 fff9 	bl	8000168 <__aeabi_dsub>
 8007176:	4632      	mov	r2, r6
 8007178:	463b      	mov	r3, r7
 800717a:	f7f9 fc33 	bl	80009e4 <__aeabi_dcmpge>
 800717e:	2800      	cmp	r0, #0
 8007180:	d1eb      	bne.n	800715a <__ieee754_pow+0x98a>
 8007182:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007218 <__ieee754_pow+0xa48>
 8007186:	e6fd      	b.n	8006f84 <__ieee754_pow+0x7b4>
 8007188:	469a      	mov	sl, r3
 800718a:	4b24      	ldr	r3, [pc, #144]	@ (800721c <__ieee754_pow+0xa4c>)
 800718c:	459a      	cmp	sl, r3
 800718e:	f63f aef9 	bhi.w	8006f84 <__ieee754_pow+0x7b4>
 8007192:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007196:	e71b      	b.n	8006fd0 <__ieee754_pow+0x800>
 8007198:	4621      	mov	r1, r4
 800719a:	e7d1      	b.n	8007140 <__ieee754_pow+0x970>
 800719c:	2000      	movs	r0, #0
 800719e:	491b      	ldr	r1, [pc, #108]	@ (800720c <__ieee754_pow+0xa3c>)
 80071a0:	f7ff bb34 	b.w	800680c <__ieee754_pow+0x3c>
 80071a4:	2000      	movs	r0, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	f7ff bb30 	b.w	800680c <__ieee754_pow+0x3c>
 80071ac:	4650      	mov	r0, sl
 80071ae:	4659      	mov	r1, fp
 80071b0:	f7ff bb2c 	b.w	800680c <__ieee754_pow+0x3c>
 80071b4:	460c      	mov	r4, r1
 80071b6:	f7ff bb79 	b.w	80068ac <__ieee754_pow+0xdc>
 80071ba:	2400      	movs	r4, #0
 80071bc:	f7ff bb64 	b.w	8006888 <__ieee754_pow+0xb8>
 80071c0:	652b82fe 	.word	0x652b82fe
 80071c4:	3c971547 	.word	0x3c971547
 80071c8:	00000000 	.word	0x00000000
 80071cc:	3fe62e43 	.word	0x3fe62e43
 80071d0:	fefa39ef 	.word	0xfefa39ef
 80071d4:	3fe62e42 	.word	0x3fe62e42
 80071d8:	0ca86c39 	.word	0x0ca86c39
 80071dc:	be205c61 	.word	0xbe205c61
 80071e0:	72bea4d0 	.word	0x72bea4d0
 80071e4:	3e663769 	.word	0x3e663769
 80071e8:	c5d26bf1 	.word	0xc5d26bf1
 80071ec:	3ebbbd41 	.word	0x3ebbbd41
 80071f0:	af25de2c 	.word	0xaf25de2c
 80071f4:	3f11566a 	.word	0x3f11566a
 80071f8:	16bebd93 	.word	0x16bebd93
 80071fc:	3f66c16c 	.word	0x3f66c16c
 8007200:	5555553e 	.word	0x5555553e
 8007204:	3fc55555 	.word	0x3fc55555
 8007208:	fff00000 	.word	0xfff00000
 800720c:	3ff00000 	.word	0x3ff00000
 8007210:	4090cbff 	.word	0x4090cbff
 8007214:	3f6f3400 	.word	0x3f6f3400
 8007218:	4090cc00 	.word	0x4090cc00
 800721c:	3fe00000 	.word	0x3fe00000

08007220 <scalbn>:
 8007220:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007224:	4616      	mov	r6, r2
 8007226:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800722a:	4683      	mov	fp, r0
 800722c:	468c      	mov	ip, r1
 800722e:	460b      	mov	r3, r1
 8007230:	b982      	cbnz	r2, 8007254 <scalbn+0x34>
 8007232:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007236:	4303      	orrs	r3, r0
 8007238:	d039      	beq.n	80072ae <scalbn+0x8e>
 800723a:	4b2f      	ldr	r3, [pc, #188]	@ (80072f8 <scalbn+0xd8>)
 800723c:	2200      	movs	r2, #0
 800723e:	f7f9 f94b 	bl	80004d8 <__aeabi_dmul>
 8007242:	4b2e      	ldr	r3, [pc, #184]	@ (80072fc <scalbn+0xdc>)
 8007244:	4683      	mov	fp, r0
 8007246:	429e      	cmp	r6, r3
 8007248:	468c      	mov	ip, r1
 800724a:	da0d      	bge.n	8007268 <scalbn+0x48>
 800724c:	a326      	add	r3, pc, #152	@ (adr r3, 80072e8 <scalbn+0xc8>)
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	e01b      	b.n	800728c <scalbn+0x6c>
 8007254:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007258:	42ba      	cmp	r2, r7
 800725a:	d109      	bne.n	8007270 <scalbn+0x50>
 800725c:	4602      	mov	r2, r0
 800725e:	f7f8 ff85 	bl	800016c <__adddf3>
 8007262:	4683      	mov	fp, r0
 8007264:	468c      	mov	ip, r1
 8007266:	e022      	b.n	80072ae <scalbn+0x8e>
 8007268:	460b      	mov	r3, r1
 800726a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800726e:	3a36      	subs	r2, #54	@ 0x36
 8007270:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007274:	428e      	cmp	r6, r1
 8007276:	dd0c      	ble.n	8007292 <scalbn+0x72>
 8007278:	a31d      	add	r3, pc, #116	@ (adr r3, 80072f0 <scalbn+0xd0>)
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	461c      	mov	r4, r3
 8007280:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007284:	f361 74df 	bfi	r4, r1, #31, #1
 8007288:	4621      	mov	r1, r4
 800728a:	481d      	ldr	r0, [pc, #116]	@ (8007300 <scalbn+0xe0>)
 800728c:	f7f9 f924 	bl	80004d8 <__aeabi_dmul>
 8007290:	e7e7      	b.n	8007262 <scalbn+0x42>
 8007292:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007296:	4432      	add	r2, r6
 8007298:	428a      	cmp	r2, r1
 800729a:	dced      	bgt.n	8007278 <scalbn+0x58>
 800729c:	2a00      	cmp	r2, #0
 800729e:	dd0a      	ble.n	80072b6 <scalbn+0x96>
 80072a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80072a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80072a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072ac:	46ac      	mov	ip, r5
 80072ae:	4658      	mov	r0, fp
 80072b0:	4661      	mov	r1, ip
 80072b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80072b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80072ba:	da09      	bge.n	80072d0 <scalbn+0xb0>
 80072bc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80072c0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80072c4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80072c8:	480e      	ldr	r0, [pc, #56]	@ (8007304 <scalbn+0xe4>)
 80072ca:	f041 011f 	orr.w	r1, r1, #31
 80072ce:	e7bd      	b.n	800724c <scalbn+0x2c>
 80072d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80072d4:	3236      	adds	r2, #54	@ 0x36
 80072d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80072da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072de:	4658      	mov	r0, fp
 80072e0:	4629      	mov	r1, r5
 80072e2:	2200      	movs	r2, #0
 80072e4:	4b08      	ldr	r3, [pc, #32]	@ (8007308 <scalbn+0xe8>)
 80072e6:	e7d1      	b.n	800728c <scalbn+0x6c>
 80072e8:	c2f8f359 	.word	0xc2f8f359
 80072ec:	01a56e1f 	.word	0x01a56e1f
 80072f0:	8800759c 	.word	0x8800759c
 80072f4:	7e37e43c 	.word	0x7e37e43c
 80072f8:	43500000 	.word	0x43500000
 80072fc:	ffff3cb0 	.word	0xffff3cb0
 8007300:	8800759c 	.word	0x8800759c
 8007304:	c2f8f359 	.word	0xc2f8f359
 8007308:	3c900000 	.word	0x3c900000

0800730c <with_errno>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4604      	mov	r4, r0
 8007310:	460d      	mov	r5, r1
 8007312:	4616      	mov	r6, r2
 8007314:	f7fe fad6 	bl	80058c4 <__errno>
 8007318:	4629      	mov	r1, r5
 800731a:	6006      	str	r6, [r0, #0]
 800731c:	4620      	mov	r0, r4
 800731e:	bd70      	pop	{r4, r5, r6, pc}

08007320 <xflow>:
 8007320:	b513      	push	{r0, r1, r4, lr}
 8007322:	4604      	mov	r4, r0
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	b10c      	cbz	r4, 800732e <xflow+0xe>
 800732a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800732e:	e9cd 2300 	strd	r2, r3, [sp]
 8007332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007336:	f7f9 f8cf 	bl	80004d8 <__aeabi_dmul>
 800733a:	2222      	movs	r2, #34	@ 0x22
 800733c:	b002      	add	sp, #8
 800733e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007342:	f7ff bfe3 	b.w	800730c <with_errno>

08007346 <__math_uflow>:
 8007346:	2200      	movs	r2, #0
 8007348:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800734c:	f7ff bfe8 	b.w	8007320 <xflow>

08007350 <__math_oflow>:
 8007350:	2200      	movs	r2, #0
 8007352:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007356:	f7ff bfe3 	b.w	8007320 <xflow>
	...

0800735c <_init>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr

08007368 <_fini>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr
