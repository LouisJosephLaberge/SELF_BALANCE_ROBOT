
SELF_BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004dd0  08004dd0  00005dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e8c  08004e8c  0000607c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e8c  08004e8c  00005e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e94  08004e94  0000607c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e94  08004e94  00005e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004e9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000007c  08004f18  0000607c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004f18  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f442  00000000  00000000  000060a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c4  00000000  00000000  000154e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000177b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bec  00000000  00000000  000186c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001890d  00000000  00000000  000192ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ea9  00000000  00000000  00031bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce62  00000000  00000000  00044a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d18c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  000d1908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d5e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004db8 	.word	0x08004db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004db8 	.word	0x08004db8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint32_t time)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < time; i++);
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	e002      	b.n	8000170 <delay+0x14>
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	3301      	adds	r3, #1
 800016e:	60fb      	str	r3, [r7, #12]
 8000170:	68fa      	ldr	r2, [r7, #12]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	429a      	cmp	r2, r3
 8000176:	d3f8      	bcc.n	800016a <delay+0xe>
}
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018a:	f000 fd99 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018e:	f000 f88d 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000192:	f000 f9c7 	bl	8000524 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000196:	f000 f8c5 	bl	8000324 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800019a:	f000 f999 	bl	80004d0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800019e:	f000 f8ef 	bl	8000380 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_UART_Transmit(&huart1, (uint8_t*)hello_msg, strlen(hello_msg), HAL_MAX_DELAY) != HAL_OK)
 80001a2:	483d      	ldr	r0, [pc, #244]	@ (8000298 <main+0x114>)
 80001a4:	f7ff ffd2 	bl	800014c <strlen>
 80001a8:	4603      	mov	r3, r0
 80001aa:	b29a      	uxth	r2, r3
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295
 80001b0:	4939      	ldr	r1, [pc, #228]	@ (8000298 <main+0x114>)
 80001b2:	483a      	ldr	r0, [pc, #232]	@ (800029c <main+0x118>)
 80001b4:	f003 fb7d 	bl	80038b2 <HAL_UART_Transmit>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <main+0x3e>
  {
	  Error_Handler();
 80001be:	f000 f9d3 	bl	8000568 <Error_Handler>
  }
  delay(1000000);
 80001c2:	4837      	ldr	r0, [pc, #220]	@ (80002a0 <main+0x11c>)
 80001c4:	f7ff ffca 	bl	800015c <delay>
  MPU6050_Init();
 80001c8:	f000 fa1c 	bl	8000604 <MPU6050_Init>
  motor_init();
 80001cc:	f000 f9d2 	bl	8000574 <motor_init>

  uint8_t test_motor_idx = 0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_GetAcc(acc_buff);
 80001d4:	4833      	ldr	r0, [pc, #204]	@ (80002a4 <main+0x120>)
 80001d6:	f000 fb1d 	bl	8000814 <MPU6050_GetAcc>
	MPU6050_GetGyro(gyro_buff);
 80001da:	4833      	ldr	r0, [pc, #204]	@ (80002a8 <main+0x124>)
 80001dc:	f000 fb62 	bl	80008a4 <MPU6050_GetGyro>
//	sprintf(msg, "GYRO Z : %hu \n\r", gyro_z);
//	if(HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY) != HAL_OK)
//	{
//		Error_Handler();
//	}
	switch(test_motor_idx)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b07      	cmp	r3, #7
 80001e4:	d853      	bhi.n	800028e <main+0x10a>
 80001e6:	a201      	add	r2, pc, #4	@ (adr r2, 80001ec <main+0x68>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	0800020d 	.word	0x0800020d
 80001f0:	0800021d 	.word	0x0800021d
 80001f4:	0800022d 	.word	0x0800022d
 80001f8:	0800023d 	.word	0x0800023d
 80001fc:	0800024d 	.word	0x0800024d
 8000200:	0800025f 	.word	0x0800025f
 8000204:	0800026f 	.word	0x0800026f
 8000208:	08000281 	.word	0x08000281
	{
		case 0:
		{
			motor_requestMovement(50, LEFT);
 800020c:	2100      	movs	r1, #0
 800020e:	2032      	movs	r0, #50	@ 0x32
 8000210:	f000 f9c0 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	3301      	adds	r3, #1
 8000218:	71fb      	strb	r3, [r7, #7]
			break;
 800021a:	e038      	b.n	800028e <main+0x10a>
		}
		case 1:
		{
			motor_requestMovement(0, LEFT);
 800021c:	2100      	movs	r1, #0
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f9b8 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	3301      	adds	r3, #1
 8000228:	71fb      	strb	r3, [r7, #7]
			break;
 800022a:	e030      	b.n	800028e <main+0x10a>
		}
		case 2:
		{
			motor_requestMovement(50, RIGHT);
 800022c:	2101      	movs	r1, #1
 800022e:	2032      	movs	r0, #50	@ 0x32
 8000230:	f000 f9b0 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	3301      	adds	r3, #1
 8000238:	71fb      	strb	r3, [r7, #7]
			break;
 800023a:	e028      	b.n	800028e <main+0x10a>
		}
		case 3:
		{
			motor_requestMovement(0, RIGHT);
 800023c:	2101      	movs	r1, #1
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f9a8 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	3301      	adds	r3, #1
 8000248:	71fb      	strb	r3, [r7, #7]
			break;
 800024a:	e020      	b.n	800028e <main+0x10a>
		}
		case 4:
		{
			motor_requestMovement(-50, LEFT);
 800024c:	2100      	movs	r1, #0
 800024e:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 8000252:	f000 f99f 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	3301      	adds	r3, #1
 800025a:	71fb      	strb	r3, [r7, #7]
			break;
 800025c:	e017      	b.n	800028e <main+0x10a>
		}
		case 5:
		{
			motor_requestMovement(0, LEFT);
 800025e:	2100      	movs	r1, #0
 8000260:	2000      	movs	r0, #0
 8000262:	f000 f997 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	3301      	adds	r3, #1
 800026a:	71fb      	strb	r3, [r7, #7]
			break;
 800026c:	e00f      	b.n	800028e <main+0x10a>
		}
		case 6:
		{
			motor_requestMovement(-50, RIGHT);
 800026e:	2101      	movs	r1, #1
 8000270:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 8000274:	f000 f98e 	bl	8000594 <motor_requestMovement>
			test_motor_idx++;
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	3301      	adds	r3, #1
 800027c:	71fb      	strb	r3, [r7, #7]
			break;
 800027e:	e006      	b.n	800028e <main+0x10a>
		}
		case 7:
		{
			motor_requestMovement(0, RIGHT);
 8000280:	2101      	movs	r1, #1
 8000282:	2000      	movs	r0, #0
 8000284:	f000 f986 	bl	8000594 <motor_requestMovement>
			test_motor_idx = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	71fb      	strb	r3, [r7, #7]
			break;
 800028c:	bf00      	nop
		}
	}
	HAL_Delay(2000);
 800028e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000292:	f000 fd77 	bl	8000d84 <HAL_Delay>
	MPU6050_GetAcc(acc_buff);
 8000296:	e79d      	b.n	80001d4 <main+0x50>
 8000298:	20000000 	.word	0x20000000
 800029c:	20000134 	.word	0x20000134
 80002a0:	000f4240 	.word	0x000f4240
 80002a4:	2000017c 	.word	0x2000017c
 80002a8:	20000184 	.word	0x20000184

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	@ 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	@ 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f004 f8ec 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002da:	2300      	movs	r3, #0
 80002dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 fa14 	bl	8002710 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ee:	f000 f93b 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fc82 	bl	8002c14 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000316:	f000 f927 	bl	8000568 <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	@ 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_I2C1_Init+0x50>)
 800032a:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <MX_I2C1_Init+0x54>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000330:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_I2C1_Init+0x58>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000362:	f001 f84d 	bl	8001400 <HAL_I2C_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800036c:	f000 f8fc 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000098 	.word	0x20000098
 8000378:	40005400 	.word	0x40005400
 800037c:	000186a0 	.word	0x000186a0

08000380 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b092      	sub	sp, #72	@ 0x48
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2220      	movs	r2, #32
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 f874 	bl	8004498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b0:	4b45      	ldr	r3, [pc, #276]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003b2:	4a46      	ldr	r2, [pc, #280]	@ (80004cc <MX_TIM1_Init+0x14c>)
 80003b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003b6:	4b44      	ldr	r3, [pc, #272]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003bc:	4b42      	ldr	r3, [pc, #264]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003c2:	4b41      	ldr	r3, [pc, #260]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b3f      	ldr	r3, [pc, #252]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d0:	4b3d      	ldr	r3, [pc, #244]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	4b3c      	ldr	r3, [pc, #240]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003dc:	483a      	ldr	r0, [pc, #232]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003de:	f002 fda7 	bl	8002f30 <HAL_TIM_PWM_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80003e8:	f000 f8be 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003f8:	4619      	mov	r1, r3
 80003fa:	4833      	ldr	r0, [pc, #204]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80003fc:	f003 f95a 	bl	80036b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000406:	f000 f8af 	bl	8000568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040a:	2360      	movs	r3, #96	@ 0x60
 800040c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000412:	2300      	movs	r3, #0
 8000414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000416:	2300      	movs	r3, #0
 8000418:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000422:	2300      	movs	r3, #0
 8000424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800042a:	2200      	movs	r2, #0
 800042c:	4619      	mov	r1, r3
 800042e:	4826      	ldr	r0, [pc, #152]	@ (80004c8 <MX_TIM1_Init+0x148>)
 8000430:	f002 fe70 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800043a:	f000 f895 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800043e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000442:	2204      	movs	r2, #4
 8000444:	4619      	mov	r1, r3
 8000446:	4820      	ldr	r0, [pc, #128]	@ (80004c8 <MX_TIM1_Init+0x148>)
 8000448:	f002 fe64 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000452:	f000 f889 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800045a:	2208      	movs	r2, #8
 800045c:	4619      	mov	r1, r3
 800045e:	481a      	ldr	r0, [pc, #104]	@ (80004c8 <MX_TIM1_Init+0x148>)
 8000460:	f002 fe58 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800046a:	f000 f87d 	bl	8000568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800046e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000472:	220c      	movs	r2, #12
 8000474:	4619      	mov	r1, r3
 8000476:	4814      	ldr	r0, [pc, #80]	@ (80004c8 <MX_TIM1_Init+0x148>)
 8000478:	f002 fe4c 	bl	8003114 <HAL_TIM_PWM_ConfigChannel>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000482:	f000 f871 	bl	8000568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800049a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800049e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4807      	ldr	r0, [pc, #28]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80004aa:	f003 f961 	bl	8003770 <HAL_TIMEx_ConfigBreakDeadTime>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80004b4:	f000 f858 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b8:	4803      	ldr	r0, [pc, #12]	@ (80004c8 <MX_TIM1_Init+0x148>)
 80004ba:	f000 fadb 	bl	8000a74 <HAL_TIM_MspPostInit>

}
 80004be:	bf00      	nop
 80004c0:	3748      	adds	r7, #72	@ 0x48
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000ec 	.word	0x200000ec
 80004cc:	40012c00 	.word	0x40012c00

080004d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	@ (8000520 <MX_USART1_UART_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004da:	4b10      	ldr	r3, [pc, #64]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <MX_USART1_UART_Init+0x4c>)
 8000508:	f003 f983 	bl	8003812 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 f829 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000134 	.word	0x20000134
 8000520:	40013800 	.word	0x40013800

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <MX_GPIO_Init+0x40>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <MX_GPIO_Init+0x40>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <MX_GPIO_Init+0x40>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <MX_GPIO_Init+0x40>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a07      	ldr	r2, [pc, #28]	@ (8000564 <MX_GPIO_Init+0x40>)
 8000548:	f043 0308 	orr.w	r3, r3, #8
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <MX_GPIO_Init+0x40>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <Error_Handler+0x8>

08000574 <motor_init>:
#include "motor.h"

extern TIM_HandleTypeDef htim1;

bool motor_init()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	return HAL_OK == HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2|TIM_CHANNEL_3|TIM_CHANNEL_4);
 8000578:	210c      	movs	r1, #12
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <motor_init+0x1c>)
 800057c:	f002 fd28 	bl	8002fd0 <HAL_TIM_PWM_Start>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf0c      	ite	eq
 8000586:	2301      	moveq	r3, #1
 8000588:	2300      	movne	r3, #0
 800058a:	b2db      	uxtb	r3, r3
}
 800058c:	4618      	mov	r0, r3
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000ec 	.word	0x200000ec

08000594 <motor_requestMovement>:

void motor_requestMovement(int8_t speed, uint8_t motor)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t abs_speed = abs(speed);
 80005a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	bfb8      	it	lt
 80005ac:	425b      	neglt	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]
	switch(motor)
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <motor_requestMovement+0x28>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00e      	beq.n	80005d8 <motor_requestMovement+0x44>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs_speed);
			}
			break;
		}
	}
}
 80005ba:	e01b      	b.n	80005f4 <motor_requestMovement+0x60>
			if(speed >= 0)
 80005bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db04      	blt.n	80005ce <motor_requestMovement+0x3a>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs_speed);
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <motor_requestMovement+0x6c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	7bfa      	ldrb	r2, [r7, #15]
 80005ca:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80005cc:	e012      	b.n	80005f4 <motor_requestMovement+0x60>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, abs_speed);
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <motor_requestMovement+0x6c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	7bfa      	ldrb	r2, [r7, #15]
 80005d4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80005d6:	e00d      	b.n	80005f4 <motor_requestMovement+0x60>
			if(speed >= 0)
 80005d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db04      	blt.n	80005ea <motor_requestMovement+0x56>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs_speed);
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <motor_requestMovement+0x6c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	7bfa      	ldrb	r2, [r7, #15]
 80005e6:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80005e8:	e003      	b.n	80005f2 <motor_requestMovement+0x5e>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, abs_speed);
 80005ea:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <motor_requestMovement+0x6c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	7bfa      	ldrb	r2, [r7, #15]
 80005f0:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80005f2:	bf00      	nop
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200000ec 	.word	0x200000ec

08000604 <MPU6050_Init>:
 */

#include "mpu6050.h"

void MPU6050_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	@ 0xe0
 8000608:	af04      	add	r7, sp, #16
	//Check if device is ready
	char msg[200];
	uint8_t reg_buff = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, HAL_MAX_DELAY) != HAL_OK)
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2201      	movs	r2, #1
 8000614:	21d0      	movs	r1, #208	@ 0xd0
 8000616:	487b      	ldr	r0, [pc, #492]	@ (8000804 <MPU6050_Init+0x200>)
 8000618:	f001 fb98 	bl	8001d4c <HAL_I2C_IsDeviceReady>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MPU6050_Init+0x22>
	{
		Error_Handler();
 8000622:	f7ff ffa1 	bl	8000568 <Error_Handler>
	}
	//RESET MODULE
	reg_buff = 0x1<<7;
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	2301      	movs	r3, #1
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	226b      	movs	r2, #107	@ 0x6b
 800063c:	21d0      	movs	r1, #208	@ 0xd0
 800063e:	4871      	ldr	r0, [pc, #452]	@ (8000804 <MPU6050_Init+0x200>)
 8000640:	f001 f822 	bl	8001688 <HAL_I2C_Mem_Write>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MPU6050_Init+0x4a>
	{
		Error_Handler();
 800064a:	f7ff ff8d 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 800064e:	2032      	movs	r0, #50	@ 0x32
 8000650:	f000 fb98 	bl	8000d84 <HAL_Delay>

	//Remove from SLEEP MODE
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, 0, 1, HAL_MAX_DELAY) != HAL_OK)
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2301      	movs	r3, #1
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2300      	movs	r3, #0
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	226b      	movs	r2, #107	@ 0x6b
 8000666:	21d0      	movs	r1, #208	@ 0xd0
 8000668:	4866      	ldr	r0, [pc, #408]	@ (8000804 <MPU6050_Init+0x200>)
 800066a:	f001 f80d 	bl	8001688 <HAL_I2C_Mem_Write>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MPU6050_Init+0x74>
	{
		Error_Handler();
 8000674:	f7ff ff78 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	@ 0x32
 800067a:	f000 fb83 	bl	8000d84 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	9302      	str	r3, [sp, #8]
 8000684:	2301      	movs	r3, #1
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2301      	movs	r3, #1
 800068e:	226b      	movs	r2, #107	@ 0x6b
 8000690:	21d0      	movs	r1, #208	@ 0xd0
 8000692:	485c      	ldr	r0, [pc, #368]	@ (8000804 <MPU6050_Init+0x200>)
 8000694:	f001 f8f2 	bl	800187c <HAL_I2C_Mem_Read>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MPU6050_Init+0x9e>
	{
		Error_Handler();
 800069e:	f7ff ff63 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 80006a2:	2032      	movs	r0, #50	@ 0x32
 80006a4:	f000 fb6e 	bl	8000d84 <HAL_Delay>

	//Accelerometer configuration
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	221c      	movs	r2, #28
 80006ba:	21d0      	movs	r1, #208	@ 0xd0
 80006bc:	4851      	ldr	r0, [pc, #324]	@ (8000804 <MPU6050_Init+0x200>)
 80006be:	f001 f8dd 	bl	800187c <HAL_I2C_Mem_Read>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MPU6050_Init+0xc8>
	{
		Error_Handler();
 80006c8:	f7ff ff4e 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 80006cc:	2032      	movs	r0, #50	@ 0x32
 80006ce:	f000 fb59 	bl	8000d84 <HAL_Delay>
	reg_buff |= (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	221c      	movs	r2, #28
 80006ee:	21d0      	movs	r1, #208	@ 0xd0
 80006f0:	4844      	ldr	r0, [pc, #272]	@ (8000804 <MPU6050_Init+0x200>)
 80006f2:	f000 ffc9 	bl	8001688 <HAL_I2C_Mem_Write>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MPU6050_Init+0xfc>
	{
		Error_Handler();
 80006fc:	f7ff ff34 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 8000700:	2032      	movs	r0, #50	@ 0x32
 8000702:	f000 fb3f 	bl	8000d84 <HAL_Delay>
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	2301      	movs	r3, #1
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	221c      	movs	r2, #28
 8000718:	21d0      	movs	r1, #208	@ 0xd0
 800071a:	483a      	ldr	r0, [pc, #232]	@ (8000804 <MPU6050_Init+0x200>)
 800071c:	f001 f8ae 	bl	800187c <HAL_I2C_Mem_Read>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MPU6050_Init+0x126>
	{
		Error_Handler();
 8000726:	f7ff ff1f 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	@ 0x32
 800072c:	f000 fb2a 	bl	8000d84 <HAL_Delay>
	if(reg_buff != (MPU6050_AFS_SEL_4G << MPU_6050_ACCEL_CONFIG_AFS_SEL))
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b08      	cmp	r3, #8
 8000734:	d015      	beq.n	8000762 <MPU6050_Init+0x15e>
	{
		sprintf(msg,"MPU6050_ACCEL_CONFIG NOT SET CORRECTLY\n\r");
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4933      	ldr	r1, [pc, #204]	@ (8000808 <MPU6050_Init+0x204>)
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fe8b 	bl	8004458 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd00 	bl	800014c <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0108 	add.w	r1, r7, #8
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	482c      	ldr	r0, [pc, #176]	@ (800080c <MPU6050_Init+0x208>)
 800075a:	f003 f8aa 	bl	80038b2 <HAL_UART_Transmit>
		Error_Handler();
 800075e:	f7ff ff03 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 8000762:	2032      	movs	r0, #50	@ 0x32
 8000764:	f000 fb0e 	bl	8000d84 <HAL_Delay>

	//Gyroscope configuration

	reg_buff = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	2301      	movs	r3, #1
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	221b      	movs	r2, #27
 800077e:	21d0      	movs	r1, #208	@ 0xd0
 8000780:	4820      	ldr	r0, [pc, #128]	@ (8000804 <MPU6050_Init+0x200>)
 8000782:	f000 ff81 	bl	8001688 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MPU6050_Init+0x18c>
	{
		Error_Handler();
 800078c:	f7ff feec 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 8000790:	2032      	movs	r0, #50	@ 0x32
 8000792:	f000 faf7 	bl	8000d84 <HAL_Delay>
	reg_buff = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &reg_buff, 1, HAL_MAX_DELAY) != HAL_OK)
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	@ 0xd0
 80007ae:	4815      	ldr	r0, [pc, #84]	@ (8000804 <MPU6050_Init+0x200>)
 80007b0:	f001 f864 	bl	800187c <HAL_I2C_Mem_Read>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MPU6050_Init+0x1ba>
	{
		Error_Handler();
 80007ba:	f7ff fed5 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 80007be:	2032      	movs	r0, #50	@ 0x32
 80007c0:	f000 fae0 	bl	8000d84 <HAL_Delay>
	if(reg_buff != 8)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b08      	cmp	r3, #8
 80007c8:	d015      	beq.n	80007f6 <MPU6050_Init+0x1f2>
	{
		sprintf(msg,"MPU6050_GYRO_CONFIG NOT SET CORRECTLY\n\r");
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4910      	ldr	r1, [pc, #64]	@ (8000810 <MPU6050_Init+0x20c>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fe41 	bl	8004458 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcb6 	bl	800014c <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f107 0108 	add.w	r1, r7, #8
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	4807      	ldr	r0, [pc, #28]	@ (800080c <MPU6050_Init+0x208>)
 80007ee:	f003 f860 	bl	80038b2 <HAL_UART_Transmit>
		Error_Handler();
 80007f2:	f7ff feb9 	bl	8000568 <Error_Handler>
	}
	HAL_Delay(50);
 80007f6:	2032      	movs	r0, #50	@ 0x32
 80007f8:	f000 fac4 	bl	8000d84 <HAL_Delay>
}
 80007fc:	bf00      	nop
 80007fe:	37d0      	adds	r7, #208	@ 0xd0
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000098 	.word	0x20000098
 8000808:	08004dd0 	.word	0x08004dd0
 800080c:	20000134 	.word	0x20000134
 8000810:	08004dfc 	.word	0x08004dfc

08000814 <MPU6050_GetAcc>:

void MPU6050_GetAcc(uint16_t* acc_buff)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af04      	add	r7, sp, #16
 800081a:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 800081c:	4a1f      	ldr	r2, [pc, #124]	@ (800089c <MPU6050_GetAcc+0x88>)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000826:	6018      	str	r0, [r3, #0]
 8000828:	3304      	adds	r3, #4
 800082a:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2306      	movs	r3, #6
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	223b      	movs	r2, #59	@ 0x3b
 8000840:	21d0      	movs	r1, #208	@ 0xd0
 8000842:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <MPU6050_GetAcc+0x8c>)
 8000844:	f001 f81a 	bl	800187c <HAL_I2C_Mem_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MPU6050_GetAcc+0x3e>
	{
		Error_Handler();
 800084e:	f7ff fe8b 	bl	8000568 <Error_Handler>
	}

	acc_buff[0] = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 8000852:	7a3b      	ldrb	r3, [r7, #8]
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	b21a      	sxth	r2, r3
 8000858:	7a7b      	ldrb	r3, [r7, #9]
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21b      	sxth	r3, r3
 8000860:	b29a      	uxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	801a      	strh	r2, [r3, #0]
	acc_buff[1] = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 8000866:	7abb      	ldrb	r3, [r7, #10]
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	b21a      	sxth	r2, r3
 800086c:	7afb      	ldrb	r3, [r7, #11]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21a      	sxth	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3302      	adds	r3, #2
 8000878:	b292      	uxth	r2, r2
 800087a:	801a      	strh	r2, [r3, #0]
	acc_buff[2] = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 800087c:	7b3b      	ldrb	r3, [r7, #12]
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b21a      	sxth	r2, r3
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	b21b      	sxth	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b21a      	sxth	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3304      	adds	r3, #4
 800088e:	b292      	uxth	r2, r2
 8000890:	801a      	strh	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08004e24 	.word	0x08004e24
 80008a0:	20000098 	.word	0x20000098

080008a4 <MPU6050_GetGyro>:

void MPU6050_GetGyro(uint16_t* gyro_buff)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	6078      	str	r0, [r7, #4]
	uint8_t reg_buff[6] = {0,0,0,0,0,0};
 80008ac:	4a1f      	ldr	r2, [pc, #124]	@ (800092c <MPU6050_GetGyro+0x88>)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b6:	6018      	str	r0, [r3, #0]
 80008b8:	3304      	adds	r3, #4
 80008ba:	8019      	strh	r1, [r3, #0]

	if(HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_DATA_REG, 1, reg_buff, 6, HAL_MAX_DELAY) != HAL_OK)
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2306      	movs	r3, #6
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	2243      	movs	r2, #67	@ 0x43
 80008d0:	21d0      	movs	r1, #208	@ 0xd0
 80008d2:	4817      	ldr	r0, [pc, #92]	@ (8000930 <MPU6050_GetGyro+0x8c>)
 80008d4:	f000 ffd2 	bl	800187c <HAL_I2C_Mem_Read>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MPU6050_GetGyro+0x3e>
	{
		Error_Handler();
 80008de:	f7ff fe43 	bl	8000568 <Error_Handler>
	}

	gyro_buff[0] = ((uint16_t) reg_buff[0] << 8) | (uint16_t) reg_buff[1];
 80008e2:	7a3b      	ldrb	r3, [r7, #8]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	801a      	strh	r2, [r3, #0]
	gyro_buff[1] = ((uint16_t) reg_buff[2] << 8) | (uint16_t) reg_buff[3];
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	7afb      	ldrb	r3, [r7, #11]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3302      	adds	r3, #2
 8000908:	b292      	uxth	r2, r2
 800090a:	801a      	strh	r2, [r3, #0]
	gyro_buff[2] = ((uint16_t) reg_buff[4] << 8) | (uint16_t) reg_buff[5];
 800090c:	7b3b      	ldrb	r3, [r7, #12]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	b21a      	sxth	r2, r3
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	b21b      	sxth	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b21a      	sxth	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3304      	adds	r3, #4
 800091e:	b292      	uxth	r2, r2
 8000920:	801a      	strh	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08004e24 	.word	0x08004e24
 8000930:	20000098 	.word	0x20000098

08000934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_I2C_MspInit+0x90>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d132      	bne.n	8000a1e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <HAL_I2C_MspInit+0x94>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <HAL_I2C_MspInit+0x94>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <HAL_I2C_MspInit+0x94>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	2312      	movs	r3, #18
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <HAL_I2C_MspInit+0x98>)
 80009e6:	f000 fb87 	bl	80010f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009ea:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_I2C_MspInit+0x9c>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a00:	4a0c      	ldr	r2, [pc, #48]	@ (8000a34 <HAL_I2C_MspInit+0x9c>)
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_I2C_MspInit+0x94>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_I2C_MspInit+0x94>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_I2C_MspInit+0x94>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40010000 	.word	0x40010000

08000a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_TIM_PWM_MspInit+0x34>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10b      	bne.n	8000a62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x38>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x38>)
 8000a50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_TIM_PWM_MspInit+0x38>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40012c00 	.word	0x40012c00
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <HAL_TIM_MspPostInit+0x5c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d118      	bne.n	8000ac6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <HAL_TIM_MspPostInit+0x60>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <HAL_TIM_MspPostInit+0x60>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <HAL_TIM_MspPostInit+0x60>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000aac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_TIM_MspPostInit+0x64>)
 8000ac2:	f000 fb19 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40012c00 	.word	0x40012c00
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a22      	ldr	r2, [pc, #136]	@ (8000b80 <HAL_UART_MspInit+0xa4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d13d      	bne.n	8000b78 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afc:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a20      	ldr	r2, [pc, #128]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b1b      	ldr	r3, [pc, #108]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b2c:	2340      	movs	r3, #64	@ 0x40
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b40:	f000 fada 	bl	80010f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b58:	f000 face 	bl	80010f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b64:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b72:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_UART_MspInit+0xb0>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b76:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40010000 	.word	0x40010000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f8b4 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <USART1_IRQHandler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <USART1_IRQHandler+0x10>)
 8000bee:	f002 fee3 	bl	80039b8 <HAL_UART_IRQHandler>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000134 	.word	0x20000134

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f003 fc3c 	bl	80044a8 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20005000 	.word	0x20005000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	2000018c 	.word	0x2000018c
 8000c64:	200002e0 	.word	0x200002e0

08000c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff fff8 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7a:	490c      	ldr	r1, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c90:	4c09      	ldr	r4, [pc, #36]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 fc09 	bl	80044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca2:	f7ff fa6f 	bl	8000184 <main>
  bx lr
 8000ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cb0:	08004e9c 	.word	0x08004e9c
  ldr r2, =_sbss
 8000cb4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cb8:	200002dc 	.word	0x200002dc

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_Init+0x28>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <HAL_Init+0x28>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f92b 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe2a 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f935 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f90b 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000020 	.word	0x20000020
 8000d44:	20000028 	.word	0x20000028
 8000d48:	20000024 	.word	0x20000024

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a03      	ldr	r2, [pc, #12]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000028 	.word	0x20000028
 8000d6c:	20000190 	.word	0x20000190

08000d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	@ (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	20000190 	.word	0x20000190

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff0 	bl	8000d70 <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffe0 	bl	8000d70 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000028 	.word	0x20000028

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff49 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d008      	beq.n	8000fbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2204      	movs	r2, #4
 8000fae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e020      	b.n	8000ffe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 020e 	bic.w	r2, r2, #14
 8000fca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d005      	beq.n	800102c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2204      	movs	r2, #4
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e051      	b.n	80010d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a22      	ldr	r2, [pc, #136]	@ (80010dc <HAL_DMA_Abort_IT+0xd4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d029      	beq.n	80010aa <HAL_DMA_Abort_IT+0xa2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_DMA_Abort_IT+0xd8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d022      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x9e>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <HAL_DMA_Abort_IT+0xdc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01a      	beq.n	80010a0 <HAL_DMA_Abort_IT+0x98>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1e      	ldr	r2, [pc, #120]	@ (80010e8 <HAL_DMA_Abort_IT+0xe0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d012      	beq.n	800109a <HAL_DMA_Abort_IT+0x92>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <HAL_DMA_Abort_IT+0xe4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00a      	beq.n	8001094 <HAL_DMA_Abort_IT+0x8c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_DMA_Abort_IT+0xe8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d102      	bne.n	800108e <HAL_DMA_Abort_IT+0x86>
 8001088:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800108c:	e00e      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 800108e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001092:	e00b      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 8001094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001098:	e008      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 800109a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109e:	e005      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a4:	e002      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010a6:	2310      	movs	r3, #16
 80010a8:	e000      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010aa:	2301      	movs	r3, #1
 80010ac:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <HAL_DMA_Abort_IT+0xec>)
 80010ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	4798      	blx	r3
    } 
  }
  return status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020008 	.word	0x40020008
 80010e0:	4002001c 	.word	0x4002001c
 80010e4:	40020030 	.word	0x40020030
 80010e8:	40020044 	.word	0x40020044
 80010ec:	40020058 	.word	0x40020058
 80010f0:	4002006c 	.word	0x4002006c
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	@ 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	e169      	b.n	80013e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800110c:	2201      	movs	r2, #1
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8158 	bne.w	80013da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4a9a      	ldr	r2, [pc, #616]	@ (8001398 <HAL_GPIO_Init+0x2a0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d05e      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001134:	4a98      	ldr	r2, [pc, #608]	@ (8001398 <HAL_GPIO_Init+0x2a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d875      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800113a:	4a98      	ldr	r2, [pc, #608]	@ (800139c <HAL_GPIO_Init+0x2a4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d058      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001140:	4a96      	ldr	r2, [pc, #600]	@ (800139c <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d86f      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001146:	4a96      	ldr	r2, [pc, #600]	@ (80013a0 <HAL_GPIO_Init+0x2a8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d052      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 800114c:	4a94      	ldr	r2, [pc, #592]	@ (80013a0 <HAL_GPIO_Init+0x2a8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d869      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001152:	4a94      	ldr	r2, [pc, #592]	@ (80013a4 <HAL_GPIO_Init+0x2ac>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04c      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001158:	4a92      	ldr	r2, [pc, #584]	@ (80013a4 <HAL_GPIO_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d863      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800115e:	4a92      	ldr	r2, [pc, #584]	@ (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d046      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
 8001164:	4a90      	ldr	r2, [pc, #576]	@ (80013a8 <HAL_GPIO_Init+0x2b0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d85d      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d82a      	bhi.n	80011c4 <HAL_GPIO_Init+0xcc>
 800116e:	2b12      	cmp	r3, #18
 8001170:	d859      	bhi.n	8001226 <HAL_GPIO_Init+0x12e>
 8001172:	a201      	add	r2, pc, #4	@ (adr r2, 8001178 <HAL_GPIO_Init+0x80>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011cd 	.word	0x080011cd
 8001180:	080011df 	.word	0x080011df
 8001184:	08001221 	.word	0x08001221
 8001188:	08001227 	.word	0x08001227
 800118c:	08001227 	.word	0x08001227
 8001190:	08001227 	.word	0x08001227
 8001194:	08001227 	.word	0x08001227
 8001198:	08001227 	.word	0x08001227
 800119c:	08001227 	.word	0x08001227
 80011a0:	08001227 	.word	0x08001227
 80011a4:	08001227 	.word	0x08001227
 80011a8:	08001227 	.word	0x08001227
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001227 	.word	0x08001227
 80011b4:	08001227 	.word	0x08001227
 80011b8:	08001227 	.word	0x08001227
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	080011e9 	.word	0x080011e9
 80011c4:	4a79      	ldr	r2, [pc, #484]	@ (80013ac <HAL_GPIO_Init+0x2b4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ca:	e02c      	b.n	8001226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e029      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	3304      	adds	r3, #4
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e024      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	3308      	adds	r3, #8
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e01f      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	330c      	adds	r3, #12
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e01a      	b.n	8001228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011fa:	2304      	movs	r3, #4
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e013      	b.n	8001228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001208:	2308      	movs	r3, #8
 800120a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	611a      	str	r2, [r3, #16]
          break;
 8001212:	e009      	b.n	8001228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	615a      	str	r2, [r3, #20]
          break;
 800121e:	e003      	b.n	8001228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x130>
          break;
 8001226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	@ 0xff
 800122c:	d801      	bhi.n	8001232 <HAL_GPIO_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e001      	b.n	8001236 <HAL_GPIO_Init+0x13e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2bff      	cmp	r3, #255	@ 0xff
 800123c:	d802      	bhi.n	8001244 <HAL_GPIO_Init+0x14c>
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	e002      	b.n	800124a <HAL_GPIO_Init+0x152>
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	3b08      	subs	r3, #8
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	210f      	movs	r1, #15
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	431a      	orrs	r2, r3
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80b1 	beq.w	80013da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a4c      	ldr	r2, [pc, #304]	@ (80013b0 <HAL_GPIO_Init+0x2b8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001290:	4a48      	ldr	r2, [pc, #288]	@ (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a40      	ldr	r2, [pc, #256]	@ (80013b8 <HAL_GPIO_Init+0x2c0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d013      	beq.n	80012e4 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a3f      	ldr	r2, [pc, #252]	@ (80013bc <HAL_GPIO_Init+0x2c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a3e      	ldr	r2, [pc, #248]	@ (80013c0 <HAL_GPIO_Init+0x2c8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x1e4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a3d      	ldr	r2, [pc, #244]	@ (80013c4 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d101      	bne.n	80012d8 <HAL_GPIO_Init+0x1e0>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012d8:	2304      	movs	r3, #4
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x1ee>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	492f      	ldr	r1, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	492c      	ldr	r1, [pc, #176]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4928      	ldr	r1, [pc, #160]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	4922      	ldr	r1, [pc, #136]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	491e      	ldr	r1, [pc, #120]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4918      	ldr	r1, [pc, #96]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4914      	ldr	r1, [pc, #80]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d021      	beq.n	80013cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	490e      	ldr	r1, [pc, #56]	@ (80013c8 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
 8001394:	e021      	b.n	80013da <HAL_GPIO_Init+0x2e2>
 8001396:	bf00      	nop
 8001398:	10320000 	.word	0x10320000
 800139c:	10310000 	.word	0x10310000
 80013a0:	10220000 	.word	0x10220000
 80013a4:	10210000 	.word	0x10210000
 80013a8:	10120000 	.word	0x10120000
 80013ac:	10110000 	.word	0x10110000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40010800 	.word	0x40010800
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40011400 	.word	0x40011400
 80013c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4909      	ldr	r1, [pc, #36]	@ (80013fc <HAL_GPIO_Init+0x304>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae8e 	bne.w	800110c <HAL_GPIO_Init+0x14>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	372c      	adds	r7, #44	@ 0x2c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e12b      	b.n	800166a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fab6 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	@ 0x24
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001464:	f001 fd1e 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a81      	ldr	r2, [pc, #516]	@ (8001674 <HAL_I2C_Init+0x274>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d807      	bhi.n	8001484 <HAL_I2C_Init+0x84>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a80      	ldr	r2, [pc, #512]	@ (8001678 <HAL_I2C_Init+0x278>)
 8001478:	4293      	cmp	r3, r2
 800147a:	bf94      	ite	ls
 800147c:	2301      	movls	r3, #1
 800147e:	2300      	movhi	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e006      	b.n	8001492 <HAL_I2C_Init+0x92>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a7d      	ldr	r2, [pc, #500]	@ (800167c <HAL_I2C_Init+0x27c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0e7      	b.n	800166a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a78      	ldr	r2, [pc, #480]	@ (8001680 <HAL_I2C_Init+0x280>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001674 <HAL_I2C_Init+0x274>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d802      	bhi.n	80014d4 <HAL_I2C_Init+0xd4>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3301      	adds	r3, #1
 80014d2:	e009      	b.n	80014e8 <HAL_I2C_Init+0xe8>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a69      	ldr	r2, [pc, #420]	@ (8001684 <HAL_I2C_Init+0x284>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	495c      	ldr	r1, [pc, #368]	@ (8001674 <HAL_I2C_Init+0x274>)
 8001504:	428b      	cmp	r3, r1
 8001506:	d819      	bhi.n	800153c <HAL_I2C_Init+0x13c>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e59      	subs	r1, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fbb1 f3f3 	udiv	r3, r1, r3
 8001516:	1c59      	adds	r1, r3, #1
 8001518:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800151c:	400b      	ands	r3, r1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00a      	beq.n	8001538 <HAL_I2C_Init+0x138>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e59      	subs	r1, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	e051      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001538:	2304      	movs	r3, #4
 800153a:	e04f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <HAL_I2C_Init+0x168>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e012      	b.n	800158e <HAL_I2C_Init+0x18e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Init+0x196>
 8001592:	2301      	movs	r3, #1
 8001594:	e022      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10e      	bne.n	80015bc <HAL_I2C_Init+0x1bc>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1e58      	subs	r0, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6809      	ldr	r1, [r1, #0]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800160a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6911      	ldr	r1, [r2, #16]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68d2      	ldr	r2, [r2, #12]
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	430b      	orrs	r3, r1
 800161e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2220      	movs	r2, #32
 8001656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	000186a0 	.word	0x000186a0
 8001678:	001e847f 	.word	0x001e847f
 800167c:	003d08ff 	.word	0x003d08ff
 8001680:	431bde83 	.word	0x431bde83
 8001684:	10624dd3 	.word	0x10624dd3

08001688 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4603      	mov	r3, r0
 8001698:	817b      	strh	r3, [r7, #10]
 800169a:	460b      	mov	r3, r1
 800169c:	813b      	strh	r3, [r7, #8]
 800169e:	4613      	mov	r3, r2
 80016a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016a2:	f7ff fb65 	bl	8000d70 <HAL_GetTick>
 80016a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	f040 80d9 	bne.w	8001868 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2319      	movs	r3, #25
 80016bc:	2201      	movs	r2, #1
 80016be:	496d      	ldr	r1, [pc, #436]	@ (8001874 <HAL_I2C_Mem_Write+0x1ec>)
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 fdef 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016cc:	2302      	movs	r3, #2
 80016ce:	e0cc      	b.n	800186a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_I2C_Mem_Write+0x56>
 80016da:	2302      	movs	r3, #2
 80016dc:	e0c5      	b.n	800186a <HAL_I2C_Mem_Write+0x1e2>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2221      	movs	r2, #33	@ 0x21
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2240      	movs	r2, #64	@ 0x40
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a3a      	ldr	r2, [r7, #32]
 800172e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001734:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a4d      	ldr	r2, [pc, #308]	@ (8001878 <HAL_I2C_Mem_Write+0x1f0>)
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001746:	88f8      	ldrh	r0, [r7, #6]
 8001748:	893a      	ldrh	r2, [r7, #8]
 800174a:	8979      	ldrh	r1, [r7, #10]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	4603      	mov	r3, r0
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fc26 	bl	8001fa8 <I2C_RequestMemoryWrite>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d052      	beq.n	8001808 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e081      	b.n	800186a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 feb4 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	2b04      	cmp	r3, #4
 800177c:	d107      	bne.n	800178e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800178c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06b      	b.n	800186a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d11b      	bne.n	8001808 <HAL_I2C_Mem_Write+0x180>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d017      	beq.n	8001808 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	781a      	ldrb	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1aa      	bne.n	8001766 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fea7 	bl	8002568 <I2C_WaitOnBTFFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00d      	beq.n	800183c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	2b04      	cmp	r3, #4
 8001826:	d107      	bne.n	8001838 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001836:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e016      	b.n	800186a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001868:	2302      	movs	r3, #2
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	00100002 	.word	0x00100002
 8001878:	ffff0000 	.word	0xffff0000

0800187c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	817b      	strh	r3, [r7, #10]
 800188e:	460b      	mov	r3, r1
 8001890:	813b      	strh	r3, [r7, #8]
 8001892:	4613      	mov	r3, r2
 8001894:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800189a:	f7ff fa69 	bl	8000d70 <HAL_GetTick>
 800189e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	f040 8244 	bne.w	8001d36 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2319      	movs	r3, #25
 80018b4:	2201      	movs	r2, #1
 80018b6:	4982      	ldr	r1, [pc, #520]	@ (8001ac0 <HAL_I2C_Mem_Read+0x244>)
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fcf3 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
 80018c6:	e237      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_I2C_Mem_Read+0x5a>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e230      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d007      	beq.n	80018fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800190a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2222      	movs	r2, #34	@ 0x22
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800192c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a62      	ldr	r2, [pc, #392]	@ (8001ac4 <HAL_I2C_Mem_Read+0x248>)
 800193c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800193e:	88f8      	ldrh	r0, [r7, #6]
 8001940:	893a      	ldrh	r2, [r7, #8]
 8001942:	8979      	ldrh	r1, [r7, #10]
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4603      	mov	r3, r0
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fbc0 	bl	80020d4 <I2C_RequestMemoryRead>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1ec      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	d113      	bne.n	800198e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e1c0      	b.n	8001d10 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001992:	2b01      	cmp	r3, #1
 8001994:	d11e      	bne.n	80019d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019a6:	b672      	cpsid	i
}
 80019a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019d0:	b662      	cpsie	i
}
 80019d2:	e035      	b.n	8001a40 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d11e      	bne.n	8001a1a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a16:	b662      	cpsie	i
}
 8001a18:	e012      	b.n	8001a40 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a28:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a40:	e166      	b.n	8001d10 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	f200 811f 	bhi.w	8001c8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d123      	bne.n	8001a9c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fdcd 	bl	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e167      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a9a:	e139      	b.n	8001d10 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d152      	bne.n	8001b4a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aaa:	2200      	movs	r2, #0
 8001aac:	4906      	ldr	r1, [pc, #24]	@ (8001ac8 <HAL_I2C_Mem_Read+0x24c>)
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 fbf8 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e13c      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
 8001abe:	bf00      	nop
 8001ac0:	00100002 	.word	0x00100002
 8001ac4:	ffff0000 	.word	0xffff0000
 8001ac8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b12:	b662      	cpsie	i
}
 8001b14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b48:	e0e2      	b.n	8001d10 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b50:	2200      	movs	r2, #0
 8001b52:	497b      	ldr	r1, [pc, #492]	@ (8001d40 <HAL_I2C_Mem_Read+0x4c4>)
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fba5 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0e9      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001baa:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <HAL_I2C_Mem_Read+0x4c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	4a65      	ldr	r2, [pc, #404]	@ (8001d48 <HAL_I2C_Mem_Read+0x4cc>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0a1a      	lsrs	r2, r3, #8
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00da      	lsls	r2, r3, #3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d118      	bne.n	8001c02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf2:	b662      	cpsie	i
}
 8001bf4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e09a      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d1d9      	bne.n	8001bc4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c52:	b662      	cpsie	i
}
 8001c54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c88:	e042      	b.n	8001d10 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fcb2 	bl	80025f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e04c      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d118      	bne.n	8001d10 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f47f ae94 	bne.w	8001a42 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
  }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3728      	adds	r7, #40	@ 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	00010004 	.word	0x00010004
 8001d44:	20000020 	.word	0x20000020
 8001d48:	14f8b589 	.word	0x14f8b589

08001d4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff f808 	bl	8000d70 <HAL_GetTick>
 8001d60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	f040 8111 	bne.w	8001f96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2319      	movs	r3, #25
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4988      	ldr	r1, [pc, #544]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fa90 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e104      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_IsDeviceReady+0x50>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0fd      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d007      	beq.n	8001dc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2224      	movs	r2, #36	@ 0x24
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a70      	ldr	r2, [pc, #448]	@ (8001fa4 <HAL_I2C_IsDeviceReady+0x258>)
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa4e 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e1c:	d103      	bne.n	8001e26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0b6      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e2a:	897b      	ldrh	r3, [r7, #10]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe ff99 	bl	8000d70 <HAL_GetTick>
 8001e3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e6e:	e025      	b.n	8001ebc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e70:	f7fe ff7e 	bl	8000d70 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d302      	bcc.n	8001e86 <HAL_I2C_IsDeviceReady+0x13a>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	22a0      	movs	r2, #160	@ 0xa0
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_I2C_IsDeviceReady+0x188>
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_I2C_IsDeviceReady+0x188>
 8001ece:	7dbb      	ldrb	r3, [r7, #22]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0cd      	beq.n	8001e70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d129      	bne.n	8001f3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2319      	movs	r3, #25
 8001f16:	2201      	movs	r2, #1
 8001f18:	4921      	ldr	r1, [pc, #132]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9c2 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e036      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e02c      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2319      	movs	r3, #25
 8001f5e:	2201      	movs	r2, #1
 8001f60:	490f      	ldr	r1, [pc, #60]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f99e 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e012      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f4ff af32 	bcc.w	8001de6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	00100002 	.word	0x00100002
 8001fa4:	ffff0000 	.word	0xffff0000

08001fa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	817b      	strh	r3, [r7, #10]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f960 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff8:	d103      	bne.n	8002002 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e05f      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002014:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	492d      	ldr	r1, [pc, #180]	@ (80020d0 <I2C_RequestMemoryWrite+0x128>)
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f9bb 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04c      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002044:	6a39      	ldr	r1, [r7, #32]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa46 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2b04      	cmp	r3, #4
 8002058:	d107      	bne.n	800206a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002068:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e02b      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d105      	bne.n	8002080 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002074:	893b      	ldrh	r3, [r7, #8]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	e021      	b.n	80020c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002080:	893b      	ldrh	r3, [r7, #8]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b29b      	uxth	r3, r3
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fa20 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00d      	beq.n	80020ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d107      	bne.n	80020b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e005      	b.n	80020c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ba:	893b      	ldrh	r3, [r7, #8]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	00010002 	.word	0x00010002

080020d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	817b      	strh	r3, [r7, #10]
 80020e6:	460b      	mov	r3, r1
 80020e8:	813b      	strh	r3, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800210c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	2200      	movs	r2, #0
 8002116:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8c2 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002134:	d103      	bne.n	800213e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0aa      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	4952      	ldr	r1, [pc, #328]	@ (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f91d 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e097      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800217e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002180:	6a39      	ldr	r1, [r7, #32]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f9a8 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e076      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e021      	b.n	8002200 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021bc:	893b      	ldrh	r3, [r7, #8]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f982 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e050      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002202:	6a39      	ldr	r1, [r7, #32]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f967 	bl	80024d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	2b04      	cmp	r3, #4
 8002216:	d107      	bne.n	8002228 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002226:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e035      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	2200      	movs	r2, #0
 8002244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f82b 	bl	80022a4 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002262:	d103      	bne.n	800226c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e013      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002270:	897b      	ldrh	r3, [r7, #10]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <I2C_RequestMemoryRead+0x1cc>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f886 	bl	8002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	e048      	b.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d044      	beq.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7fe fd57 	bl	8000d70 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d139      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10d      	bne.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	e00c      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	43da      	mvns	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d116      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e023      	b.n	8002390 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10d      	bne.n	800236e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	e00c      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d093      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a6:	e071      	b.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b6:	d123      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e067      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d041      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7fe fcb2 	bl	8000d70 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d136      	bne.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e00b      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e021      	b.n	80024d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10c      	bne.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	43da      	mvns	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e00b      	b.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f af6d 	bne.w	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e4:	e034      	b.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f8e3 	bl	80026b2 <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e034      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d028      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe fc37 	bl	8000d70 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b80      	cmp	r3, #128	@ 0x80
 8002520:	d016      	beq.n	8002550 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e007      	b.n	8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255a:	2b80      	cmp	r3, #128	@ 0x80
 800255c:	d1c3      	bne.n	80024e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002574:	e034      	b.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f89b 	bl	80026b2 <I2C_IsAcknowledgeFailed>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e034      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d028      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258e:	f7fe fbef 	bl	8000d70 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11d      	bne.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d016      	beq.n	80025e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e007      	b.n	80025f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d1c3      	bne.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002604:	e049      	b.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b10      	cmp	r3, #16
 8002612:	d119      	bne.n	8002648 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0210 	mvn.w	r2, #16
 800261c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e030      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002648:	f7fe fb92 	bl	8000d70 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11d      	bne.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002668:	2b40      	cmp	r3, #64	@ 0x40
 800266a:	d016      	beq.n	800269a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e007      	b.n	80026aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	d1ae      	bne.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c8:	d11b      	bne.n	8002702 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e272      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8087 	beq.w	800283e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002730:	4b92      	ldr	r3, [pc, #584]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00c      	beq.n	8002756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800273c:	4b8f      	ldr	r3, [pc, #572]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b08      	cmp	r3, #8
 8002746:	d112      	bne.n	800276e <HAL_RCC_OscConfig+0x5e>
 8002748:	4b8c      	ldr	r3, [pc, #560]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d10b      	bne.n	800276e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002756:	4b89      	ldr	r3, [pc, #548]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d06c      	beq.n	800283c <HAL_RCC_OscConfig+0x12c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d168      	bne.n	800283c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e24c      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x76>
 8002778:	4b80      	ldr	r3, [pc, #512]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a7f      	ldr	r2, [pc, #508]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e02e      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x98>
 800278e:	4b7b      	ldr	r3, [pc, #492]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a7a      	ldr	r2, [pc, #488]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b78      	ldr	r3, [pc, #480]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a77      	ldr	r2, [pc, #476]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0xbc>
 80027b2:	4b72      	ldr	r3, [pc, #456]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a71      	ldr	r2, [pc, #452]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6f      	ldr	r3, [pc, #444]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6e      	ldr	r2, [pc, #440]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xd4>
 80027cc:	4b6b      	ldr	r3, [pc, #428]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a67      	ldr	r2, [pc, #412]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fac0 	bl	8000d70 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fabc 	bl	8000d70 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e200      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5d      	ldr	r3, [pc, #372]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe4>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe faac 	bl	8000d70 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7fe faa8 	bl	8000d70 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1ec      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b53      	ldr	r3, [pc, #332]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x10c>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800284a:	4b4c      	ldr	r3, [pc, #304]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002856:	4b49      	ldr	r3, [pc, #292]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x18c>
 8002862:	4b46      	ldr	r3, [pc, #280]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b43      	ldr	r3, [pc, #268]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x176>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c0      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3d      	ldr	r3, [pc, #244]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4939      	ldr	r1, [pc, #228]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fa61 	bl	8000d70 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fa5d 	bl	8000d70 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a1      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2d      	ldr	r3, [pc, #180]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b2a      	ldr	r3, [pc, #168]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4927      	ldr	r1, [pc, #156]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <HAL_RCC_OscConfig+0x270>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fa40 	bl	8000d70 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7fe fa3c 	bl	8000d70 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e180      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1d      	ldr	r3, [pc, #116]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d03a      	beq.n	8002994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d019      	beq.n	800295a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292c:	f7fe fa20 	bl	8000d70 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fa1c 	bl	8000d70 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e160      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <HAL_RCC_OscConfig+0x26c>)
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002952:	2001      	movs	r0, #1
 8002954:	f000 face 	bl	8002ef4 <RCC_Delay>
 8002958:	e01c      	b.n	8002994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fa06 	bl	8000d70 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002966:	e00f      	b.n	8002988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7fe fa02 	bl	8000d70 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d908      	bls.n	8002988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e146      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	42420000 	.word	0x42420000
 8002984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b92      	ldr	r3, [pc, #584]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e9      	bne.n	8002968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a6 	beq.w	8002aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10d      	bne.n	80029ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b88      	ldr	r3, [pc, #544]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4a87      	ldr	r2, [pc, #540]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029bc:	61d3      	str	r3, [r2, #28]
 80029be:	4b85      	ldr	r3, [pc, #532]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ce:	4b82      	ldr	r3, [pc, #520]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d118      	bne.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029da:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e6:	f7fe f9c3 	bl	8000d70 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ee:	f7fe f9bf 	bl	8000d70 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b64      	cmp	r3, #100	@ 0x64
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e103      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b75      	ldr	r3, [pc, #468]	@ (8002bd8 <HAL_RCC_OscConfig+0x4c8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x312>
 8002a14:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	e02d      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x334>
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a69      	ldr	r2, [pc, #420]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b67      	ldr	r3, [pc, #412]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a66      	ldr	r2, [pc, #408]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	e01c      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCC_OscConfig+0x356>
 8002a4c:	4b61      	ldr	r3, [pc, #388]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a60      	ldr	r2, [pc, #384]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	e00b      	b.n	8002a7e <HAL_RCC_OscConfig+0x36e>
 8002a66:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	4b58      	ldr	r3, [pc, #352]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a57      	ldr	r2, [pc, #348]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d015      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7fe f973 	bl	8000d70 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe f96f 	bl	8000d70 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0b1      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ee      	beq.n	8002a8e <HAL_RCC_OscConfig+0x37e>
 8002ab0:	e014      	b.n	8002adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe f95d 	bl	8000d70 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe f959 	bl	8000d70 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e09b      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8087 	beq.w	8002c06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af8:	4b36      	ldr	r3, [pc, #216]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d061      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d146      	bne.n	8002b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe f92d 	bl	8000d70 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe f929 	bl	8000d70 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e06d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2c:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b42:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4921      	ldr	r1, [pc, #132]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a19      	ldr	r1, [r3, #32]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	430b      	orrs	r3, r1
 8002b66:	491b      	ldr	r1, [pc, #108]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe f8fd 	bl	8000d70 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe f8f9 	bl	8000d70 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e03d      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x46a>
 8002b98:	e035      	b.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f8e6 	bl	8000d70 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe f8e2 	bl	8000d70 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e026      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x498>
 8002bc6:	e01e      	b.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e019      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x500>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d0      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4965      	ldr	r1, [pc, #404]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e073      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4936      	ldr	r1, [pc, #216]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fe f834 	bl	8000d70 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe f830 	bl	8000d70 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e053      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d210      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4922      	ldr	r1, [pc, #136]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f821 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ff92 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08004e2c 	.word	0x08004e2c
 8002de0:	20000020 	.word	0x20000020
 8002de4:	20000024 	.word	0x20000024

08002de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_GetSysClockFreq+0x30>
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x36>
 8002e16:	e027      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e1a:	613b      	str	r3, [r7, #16]
      break;
 8002e1c:	e027      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	0c9b      	lsrs	r3, r3, #18
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	0c5b      	lsrs	r3, r3, #17
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	4a11      	ldr	r2, [pc, #68]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e004      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	613b      	str	r3, [r7, #16]
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6a:	613b      	str	r3, [r7, #16]
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	693b      	ldr	r3, [r7, #16]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	007a1200 	.word	0x007a1200
 8002e84:	08004e44 	.word	0x08004e44
 8002e88:	08004e54 	.word	0x08004e54
 8002e8c:	003d0900 	.word	0x003d0900

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b02      	ldr	r3, [pc, #8]	@ (8002ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000020 	.word	0x20000020

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff2 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	@ (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08004e3c 	.word	0x08004e3c

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffde 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0adb      	lsrs	r3, r3, #11
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	@ (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08004e3c 	.word	0x08004e3c

08002ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <RCC_Delay+0x34>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <RCC_Delay+0x38>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a5b      	lsrs	r3, r3, #9
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f10:	bf00      	nop
  }
  while (Delay --);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	60fa      	str	r2, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f9      	bne.n	8002f10 <RCC_Delay+0x1c>
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000020 	.word	0x20000020
 8002f2c:	10624dd3 	.word	0x10624dd3

08002f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fd6e 	bl	8000a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 f992 	bl	8003298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_TIM_PWM_Start+0x24>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e022      	b.n	800303a <HAL_TIM_PWM_Start+0x6a>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d109      	bne.n	800300e <HAL_TIM_PWM_Start+0x3e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	e015      	b.n	800303a <HAL_TIM_PWM_Start+0x6a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d109      	bne.n	8003028 <HAL_TIM_PWM_Start+0x58>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e008      	b.n	800303a <HAL_TIM_PWM_Start+0x6a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e05e      	b.n	8003100 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_TIM_PWM_Start+0x82>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003050:	e013      	b.n	800307a <HAL_TIM_PWM_Start+0xaa>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d104      	bne.n	8003062 <HAL_TIM_PWM_Start+0x92>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003060:	e00b      	b.n	800307a <HAL_TIM_PWM_Start+0xaa>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d104      	bne.n	8003072 <HAL_TIM_PWM_Start+0xa2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003070:	e003      	b.n	800307a <HAL_TIM_PWM_Start+0xaa>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2201      	movs	r2, #1
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 faf2 	bl	800366c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <HAL_TIM_PWM_Start+0x138>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a18      	ldr	r2, [pc, #96]	@ (8003108 <HAL_TIM_PWM_Start+0x138>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_TIM_PWM_Start+0xfa>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030b4:	d009      	beq.n	80030ca <HAL_TIM_PWM_Start+0xfa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a14      	ldr	r2, [pc, #80]	@ (800310c <HAL_TIM_PWM_Start+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIM_PWM_Start+0xfa>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <HAL_TIM_PWM_Start+0x140>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d111      	bne.n	80030ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d010      	beq.n	80030fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ec:	e007      	b.n	80030fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800

08003114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800312e:	2302      	movs	r3, #2
 8003130:	e0ae      	b.n	8003290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	f200 809f 	bhi.w	8003280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800317d 	.word	0x0800317d
 800314c:	08003281 	.word	0x08003281
 8003150:	08003281 	.word	0x08003281
 8003154:	08003281 	.word	0x08003281
 8003158:	080031bd 	.word	0x080031bd
 800315c:	08003281 	.word	0x08003281
 8003160:	08003281 	.word	0x08003281
 8003164:	08003281 	.word	0x08003281
 8003168:	080031ff 	.word	0x080031ff
 800316c:	08003281 	.word	0x08003281
 8003170:	08003281 	.word	0x08003281
 8003174:	08003281 	.word	0x08003281
 8003178:	0800323f 	.word	0x0800323f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f8ea 	bl	800335c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6999      	ldr	r1, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
      break;
 80031ba:	e064      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f930 	bl	8003428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6999      	ldr	r1, [r3, #24]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	619a      	str	r2, [r3, #24]
      break;
 80031fc:	e043      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f979 	bl	80034fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0204 	bic.w	r2, r2, #4
 8003228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69d9      	ldr	r1, [r3, #28]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	61da      	str	r2, [r3, #28]
      break;
 800323c:	e023      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f9c3 	bl	80035d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69d9      	ldr	r1, [r3, #28]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	61da      	str	r2, [r3, #28]
      break;
 800327e:	e002      	b.n	8003286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
      break;
 8003284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800328e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a29      	ldr	r2, [pc, #164]	@ (8003350 <TIM_Base_SetConfig+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a26      	ldr	r2, [pc, #152]	@ (8003354 <TIM_Base_SetConfig+0xbc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x30>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a25      	ldr	r2, [pc, #148]	@ (8003358 <TIM_Base_SetConfig+0xc0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003350 <TIM_Base_SetConfig+0xb8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00b      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e8:	d007      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <TIM_Base_SetConfig+0xbc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_Base_SetConfig+0x62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <TIM_Base_SetConfig+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d108      	bne.n	800330c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a07      	ldr	r2, [pc, #28]	@ (8003350 <TIM_Base_SetConfig+0xb8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	615a      	str	r2, [r3, #20]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40000400 	.word	0x40000400
 8003358:	40000800 	.word	0x40000800

0800335c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 0201 	bic.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 0302 	bic.w	r3, r3, #2
 80033a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003424 <TIM_OC1_SetConfig+0xc8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10c      	bne.n	80033d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0308 	bic.w	r3, r3, #8
 80033be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a13      	ldr	r2, [pc, #76]	@ (8003424 <TIM_OC1_SetConfig+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d111      	bne.n	80033fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00

08003428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f023 0210 	bic.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800345e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4313      	orrs	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0320 	bic.w	r3, r3, #32
 8003472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <TIM_OC2_SetConfig+0xd0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10d      	bne.n	80034a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a14      	ldr	r2, [pc, #80]	@ (80034f8 <TIM_OC2_SetConfig+0xd0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d113      	bne.n	80034d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	40012c00 	.word	0x40012c00

080034fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1d      	ldr	r2, [pc, #116]	@ (80035cc <TIM_OC3_SetConfig+0xd0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <TIM_OC3_SetConfig+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d113      	bne.n	80035a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800358c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	621a      	str	r2, [r3, #32]
}
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800361a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0f      	ldr	r2, [pc, #60]	@ (8003668 <TIM_OC4_SetConfig+0x98>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d109      	bne.n	8003644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40012c00 	.word	0x40012c00

0800366c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2201      	movs	r2, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1a      	ldr	r2, [r3, #32]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e046      	b.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a16      	ldr	r2, [pc, #88]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003718:	d009      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a12      	ldr	r2, [pc, #72]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a10      	ldr	r2, [pc, #64]	@ (800376c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10c      	bne.n	8003748 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800

08003770 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003788:	2302      	movs	r3, #2
 800378a:	e03d      	b.n	8003808 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e042      	b.n	80038aa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd f94f 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2224      	movs	r2, #36	@ 0x24
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003854:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fd70 	bl	800433c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800386a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800387a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800388a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08a      	sub	sp, #40	@ 0x28
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d16d      	bne.n	80039ae <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_UART_Transmit+0x2c>
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e066      	b.n	80039b0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2221      	movs	r2, #33	@ 0x21
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f0:	f7fd fa3e 	bl	8000d70 <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390a:	d108      	bne.n	800391e <HAL_UART_Transmit+0x6c>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	e003      	b.n	8003926 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003926:	e02a      	b.n	800397e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	2180      	movs	r1, #128	@ 0x80
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 faf8 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e036      	b.n	80039b0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003956:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	3302      	adds	r3, #2
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e007      	b.n	8003970 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3301      	adds	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1cf      	bne.n	8003928 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2140      	movs	r1, #64	@ 0x40
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fac8 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e006      	b.n	80039b0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b0ba      	sub	sp, #232	@ 0xe8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_UART_IRQHandler+0x66>
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fbd1 	bl	80041be <UART_Receive_IT>
      return;
 8003a1c:	e25b      	b.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80de 	beq.w	8003be4 <HAL_UART_IRQHandler+0x22c>
 8003a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80d1 	beq.w	8003be4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_UART_IRQHandler+0xae>
 8003a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_UART_IRQHandler+0xd2>
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f043 0202 	orr.w	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_UART_IRQHandler+0xf6>
 8003a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	f043 0204 	orr.w	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_UART_IRQHandler+0x126>
 8003aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f043 0208 	orr.w	r2, r3, #8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 81f2 	beq.w	8003ecc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x14e>
 8003af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fb5c 	bl	80041be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_UART_IRQHandler+0x17a>
 8003b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04f      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa66 	bl	8004004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d041      	beq.n	8003bca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1d9      	bne.n	8003b46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d013      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d98 <HAL_UART_IRQHandler+0x3e0>)
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fa2e 	bl	8001008 <HAL_DMA_Abort_IT>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e00e      	b.n	8003be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f99c 	bl	8003f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e00a      	b.n	8003be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f998 	bl	8003f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd0:	e006      	b.n	8003be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f994 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bde:	e175      	b.n	8003ecc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	bf00      	nop
    return;
 8003be2:	e173      	b.n	8003ecc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 814f 	bne.w	8003e8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8148 	beq.w	8003e8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8141 	beq.w	8003e8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80b6 	beq.w	8003d9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8145 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	f080 813e 	bcs.w	8003ed0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	f000 8088 	beq.w	8003d78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c94:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ca0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1d9      	bne.n	8003c68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cd8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ce0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e1      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d14:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e3      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d48:	f023 0310 	bic.w	r3, r3, #16
 8003d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e3      	bne.n	8003d36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd f90d 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8bf 	bl	8003f12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d94:	e09c      	b.n	8003ed0 <HAL_UART_IRQHandler+0x518>
 8003d96:	bf00      	nop
 8003d98:	080040c9 	.word	0x080040c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 808e 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8089 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003de6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003de8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3314      	adds	r3, #20
 8003e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e3      	bne.n	8003dfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0310 	bic.w	r3, r3, #16
 8003e56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e64:	61fa      	str	r2, [r7, #28]
 8003e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	617b      	str	r3, [r7, #20]
   return(result);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e3      	bne.n	8003e40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e82:	4619      	mov	r1, r3
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f844 	bl	8003f12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e8a:	e023      	b.n	8003ed4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <HAL_UART_IRQHandler+0x4f4>
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f923 	bl	80040f0 <UART_Transmit_IT>
    return;
 8003eaa:	e014      	b.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
 8003eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f962 	bl	800418e <UART_EndTransmit_IT>
    return;
 8003eca:	e004      	b.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ecc:	bf00      	nop
 8003ece:	e002      	b.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ed0:	bf00      	nop
 8003ed2:	e000      	b.n	8003ed6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ed4:	bf00      	nop
  }
}
 8003ed6:	37e8      	adds	r7, #232	@ 0xe8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b090      	sub	sp, #64	@ 0x40
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	e050      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d04c      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f48:	f7fc ff12 	bl	8000d70 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d241      	bcs.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f78:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3314      	adds	r3, #20
 8003f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fac:	623a      	str	r2, [r7, #32]
 8003fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	69f9      	ldr	r1, [r7, #28]
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e5      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e00f      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d09f      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3740      	adds	r7, #64	@ 0x40
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b095      	sub	sp, #84	@ 0x54
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402c:	643a      	str	r2, [r7, #64]	@ 0x40
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3314      	adds	r3, #20
 8004046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	2b01      	cmp	r3, #1
 800407a:	d119      	bne.n	80040b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	330c      	adds	r3, #12
 8004082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60bb      	str	r3, [r7, #8]
   return(result);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	647b      	str	r3, [r7, #68]	@ 0x44
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800409c:	61ba      	str	r2, [r7, #24]
 800409e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	613b      	str	r3, [r7, #16]
   return(result);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e5      	bne.n	800407c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040be:	bf00      	nop
 80040c0:	3754      	adds	r7, #84	@ 0x54
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff ff0c 	bl	8003f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b21      	cmp	r3, #33	@ 0x21
 8004102:	d13e      	bne.n	8004182 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410c:	d114      	bne.n	8004138 <UART_Transmit_IT+0x48>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d110      	bne.n	8004138 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	1c9a      	adds	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]
 8004136:	e008      	b.n	800414a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6211      	str	r1, [r2, #32]
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	4619      	mov	r1, r3
 8004158:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10f      	bne.n	800417e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800416c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800417c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fe94 	bl	8003edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b08c      	sub	sp, #48	@ 0x30
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b22      	cmp	r3, #34	@ 0x22
 80041d0:	f040 80ae 	bne.w	8004330 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041dc:	d117      	bne.n	800420e <UART_Receive_IT+0x50>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d113      	bne.n	800420e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28
 800420c:	e026      	b.n	800425c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004220:	d007      	beq.n	8004232 <UART_Receive_IT+0x74>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <UART_Receive_IT+0x82>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e008      	b.n	8004252 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004250:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29b      	uxth	r3, r3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800426c:	2b00      	cmp	r3, #0
 800426e:	d15d      	bne.n	800432c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0220 	bic.w	r2, r2, #32
 800427e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800428e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d135      	bne.n	8004322 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	613b      	str	r3, [r7, #16]
   return(result);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 0310 	bic.w	r3, r3, #16
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	623a      	str	r2, [r7, #32]
 80042de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	6a3a      	ldr	r2, [r7, #32]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d10a      	bne.n	8004314 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fdf9 	bl	8003f12 <HAL_UARTEx_RxEventCallback>
 8004320:	e002      	b.n	8004328 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fde3 	bl	8003eee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e002      	b.n	8004332 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3730      	adds	r7, #48	@ 0x30
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004376:	f023 030c 	bic.w	r3, r3, #12
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	430b      	orrs	r3, r1
 8004382:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2c      	ldr	r2, [pc, #176]	@ (8004450 <UART_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7fe fd92 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	e002      	b.n	80043b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe fd7a 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 80043b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	4a22      	ldr	r2, [pc, #136]	@ (8004454 <UART_SetConfig+0x118>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	0119      	lsls	r1, r3, #4
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009a      	lsls	r2, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <UART_SetConfig+0x118>)
 80043ea:	fba3 0302 	umull	r0, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2064      	movs	r0, #100	@ 0x64
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	3332      	adds	r3, #50	@ 0x32
 80043fc:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <UART_SetConfig+0x118>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004408:	4419      	add	r1, r3
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009a      	lsls	r2, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <UART_SetConfig+0x118>)
 8004422:	fba3 0302 	umull	r0, r3, r3, r2
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2064      	movs	r0, #100	@ 0x64
 800442a:	fb00 f303 	mul.w	r3, r0, r3
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	@ 0x32
 8004434:	4a07      	ldr	r2, [pc, #28]	@ (8004454 <UART_SetConfig+0x118>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	440a      	add	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40013800 	.word	0x40013800
 8004454:	51eb851f 	.word	0x51eb851f

08004458 <siprintf>:
 8004458:	b40e      	push	{r1, r2, r3}
 800445a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800445e:	b500      	push	{lr}
 8004460:	b09c      	sub	sp, #112	@ 0x70
 8004462:	ab1d      	add	r3, sp, #116	@ 0x74
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9006      	str	r0, [sp, #24]
 8004468:	9107      	str	r1, [sp, #28]
 800446a:	9104      	str	r1, [sp, #16]
 800446c:	4808      	ldr	r0, [pc, #32]	@ (8004490 <siprintf+0x38>)
 800446e:	4909      	ldr	r1, [pc, #36]	@ (8004494 <siprintf+0x3c>)
 8004470:	f853 2b04 	ldr.w	r2, [r3], #4
 8004474:	9105      	str	r1, [sp, #20]
 8004476:	6800      	ldr	r0, [r0, #0]
 8004478:	a902      	add	r1, sp, #8
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	f000 f992 	bl	80047a4 <_svfiprintf_r>
 8004480:	2200      	movs	r2, #0
 8004482:	9b02      	ldr	r3, [sp, #8]
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	b01c      	add	sp, #112	@ 0x70
 8004488:	f85d eb04 	ldr.w	lr, [sp], #4
 800448c:	b003      	add	sp, #12
 800448e:	4770      	bx	lr
 8004490:	2000002c 	.word	0x2000002c
 8004494:	ffff0208 	.word	0xffff0208

08004498 <memset>:
 8004498:	4603      	mov	r3, r0
 800449a:	4402      	add	r2, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <__errno>:
 80044a8:	4b01      	ldr	r3, [pc, #4]	@ (80044b0 <__errno+0x8>)
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000002c 	.word	0x2000002c

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	2600      	movs	r6, #0
 80044b8:	4d0c      	ldr	r5, [pc, #48]	@ (80044ec <__libc_init_array+0x38>)
 80044ba:	4c0d      	ldr	r4, [pc, #52]	@ (80044f0 <__libc_init_array+0x3c>)
 80044bc:	1b64      	subs	r4, r4, r5
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	f000 fc78 	bl	8004db8 <_init>
 80044c8:	2600      	movs	r6, #0
 80044ca:	4d0a      	ldr	r5, [pc, #40]	@ (80044f4 <__libc_init_array+0x40>)
 80044cc:	4c0a      	ldr	r4, [pc, #40]	@ (80044f8 <__libc_init_array+0x44>)
 80044ce:	1b64      	subs	r4, r4, r5
 80044d0:	10a4      	asrs	r4, r4, #2
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	08004e94 	.word	0x08004e94
 80044f0:	08004e94 	.word	0x08004e94
 80044f4:	08004e94 	.word	0x08004e94
 80044f8:	08004e98 	.word	0x08004e98

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <_free_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4605      	mov	r5, r0
 8004504:	2900      	cmp	r1, #0
 8004506:	d040      	beq.n	800458a <_free_r+0x8a>
 8004508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450c:	1f0c      	subs	r4, r1, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfb8      	it	lt
 8004512:	18e4      	addlt	r4, r4, r3
 8004514:	f000 f8de 	bl	80046d4 <__malloc_lock>
 8004518:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <_free_r+0x8c>)
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	b933      	cbnz	r3, 800452c <_free_r+0x2c>
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	6014      	str	r4, [r2, #0]
 8004522:	4628      	mov	r0, r5
 8004524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004528:	f000 b8da 	b.w	80046e0 <__malloc_unlock>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d908      	bls.n	8004542 <_free_r+0x42>
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	1821      	adds	r1, r4, r0
 8004534:	428b      	cmp	r3, r1
 8004536:	bf01      	itttt	eq
 8004538:	6819      	ldreq	r1, [r3, #0]
 800453a:	685b      	ldreq	r3, [r3, #4]
 800453c:	1809      	addeq	r1, r1, r0
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	e7ed      	b.n	800451e <_free_r+0x1e>
 8004542:	461a      	mov	r2, r3
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b10b      	cbz	r3, 800454c <_free_r+0x4c>
 8004548:	42a3      	cmp	r3, r4
 800454a:	d9fa      	bls.n	8004542 <_free_r+0x42>
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	1850      	adds	r0, r2, r1
 8004550:	42a0      	cmp	r0, r4
 8004552:	d10b      	bne.n	800456c <_free_r+0x6c>
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	4401      	add	r1, r0
 8004558:	1850      	adds	r0, r2, r1
 800455a:	4283      	cmp	r3, r0
 800455c:	6011      	str	r1, [r2, #0]
 800455e:	d1e0      	bne.n	8004522 <_free_r+0x22>
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4408      	add	r0, r1
 8004566:	6010      	str	r0, [r2, #0]
 8004568:	6053      	str	r3, [r2, #4]
 800456a:	e7da      	b.n	8004522 <_free_r+0x22>
 800456c:	d902      	bls.n	8004574 <_free_r+0x74>
 800456e:	230c      	movs	r3, #12
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	e7d6      	b.n	8004522 <_free_r+0x22>
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	1821      	adds	r1, r4, r0
 8004578:	428b      	cmp	r3, r1
 800457a:	bf01      	itttt	eq
 800457c:	6819      	ldreq	r1, [r3, #0]
 800457e:	685b      	ldreq	r3, [r3, #4]
 8004580:	1809      	addeq	r1, r1, r0
 8004582:	6021      	streq	r1, [r4, #0]
 8004584:	6063      	str	r3, [r4, #4]
 8004586:	6054      	str	r4, [r2, #4]
 8004588:	e7cb      	b.n	8004522 <_free_r+0x22>
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	200002d8 	.word	0x200002d8

08004590 <sbrk_aligned>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4e0f      	ldr	r6, [pc, #60]	@ (80045d0 <sbrk_aligned+0x40>)
 8004594:	460c      	mov	r4, r1
 8004596:	6831      	ldr	r1, [r6, #0]
 8004598:	4605      	mov	r5, r0
 800459a:	b911      	cbnz	r1, 80045a2 <sbrk_aligned+0x12>
 800459c:	f000 fbaa 	bl	8004cf4 <_sbrk_r>
 80045a0:	6030      	str	r0, [r6, #0]
 80045a2:	4621      	mov	r1, r4
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 fba5 	bl	8004cf4 <_sbrk_r>
 80045aa:	1c43      	adds	r3, r0, #1
 80045ac:	d103      	bne.n	80045b6 <sbrk_aligned+0x26>
 80045ae:	f04f 34ff 	mov.w	r4, #4294967295
 80045b2:	4620      	mov	r0, r4
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
 80045b6:	1cc4      	adds	r4, r0, #3
 80045b8:	f024 0403 	bic.w	r4, r4, #3
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d0f8      	beq.n	80045b2 <sbrk_aligned+0x22>
 80045c0:	1a21      	subs	r1, r4, r0
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 fb96 	bl	8004cf4 <_sbrk_r>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d1f2      	bne.n	80045b2 <sbrk_aligned+0x22>
 80045cc:	e7ef      	b.n	80045ae <sbrk_aligned+0x1e>
 80045ce:	bf00      	nop
 80045d0:	200002d4 	.word	0x200002d4

080045d4 <_malloc_r>:
 80045d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045d8:	1ccd      	adds	r5, r1, #3
 80045da:	f025 0503 	bic.w	r5, r5, #3
 80045de:	3508      	adds	r5, #8
 80045e0:	2d0c      	cmp	r5, #12
 80045e2:	bf38      	it	cc
 80045e4:	250c      	movcc	r5, #12
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	4606      	mov	r6, r0
 80045ea:	db01      	blt.n	80045f0 <_malloc_r+0x1c>
 80045ec:	42a9      	cmp	r1, r5
 80045ee:	d904      	bls.n	80045fa <_malloc_r+0x26>
 80045f0:	230c      	movs	r3, #12
 80045f2:	6033      	str	r3, [r6, #0]
 80045f4:	2000      	movs	r0, #0
 80045f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046d0 <_malloc_r+0xfc>
 80045fe:	f000 f869 	bl	80046d4 <__malloc_lock>
 8004602:	f8d8 3000 	ldr.w	r3, [r8]
 8004606:	461c      	mov	r4, r3
 8004608:	bb44      	cbnz	r4, 800465c <_malloc_r+0x88>
 800460a:	4629      	mov	r1, r5
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff ffbf 	bl	8004590 <sbrk_aligned>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	4604      	mov	r4, r0
 8004616:	d158      	bne.n	80046ca <_malloc_r+0xf6>
 8004618:	f8d8 4000 	ldr.w	r4, [r8]
 800461c:	4627      	mov	r7, r4
 800461e:	2f00      	cmp	r7, #0
 8004620:	d143      	bne.n	80046aa <_malloc_r+0xd6>
 8004622:	2c00      	cmp	r4, #0
 8004624:	d04b      	beq.n	80046be <_malloc_r+0xea>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	4639      	mov	r1, r7
 800462a:	4630      	mov	r0, r6
 800462c:	eb04 0903 	add.w	r9, r4, r3
 8004630:	f000 fb60 	bl	8004cf4 <_sbrk_r>
 8004634:	4581      	cmp	r9, r0
 8004636:	d142      	bne.n	80046be <_malloc_r+0xea>
 8004638:	6821      	ldr	r1, [r4, #0]
 800463a:	4630      	mov	r0, r6
 800463c:	1a6d      	subs	r5, r5, r1
 800463e:	4629      	mov	r1, r5
 8004640:	f7ff ffa6 	bl	8004590 <sbrk_aligned>
 8004644:	3001      	adds	r0, #1
 8004646:	d03a      	beq.n	80046be <_malloc_r+0xea>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	442b      	add	r3, r5
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	f8d8 3000 	ldr.w	r3, [r8]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	bb62      	cbnz	r2, 80046b0 <_malloc_r+0xdc>
 8004656:	f8c8 7000 	str.w	r7, [r8]
 800465a:	e00f      	b.n	800467c <_malloc_r+0xa8>
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	1b52      	subs	r2, r2, r5
 8004660:	d420      	bmi.n	80046a4 <_malloc_r+0xd0>
 8004662:	2a0b      	cmp	r2, #11
 8004664:	d917      	bls.n	8004696 <_malloc_r+0xc2>
 8004666:	1961      	adds	r1, r4, r5
 8004668:	42a3      	cmp	r3, r4
 800466a:	6025      	str	r5, [r4, #0]
 800466c:	bf18      	it	ne
 800466e:	6059      	strne	r1, [r3, #4]
 8004670:	6863      	ldr	r3, [r4, #4]
 8004672:	bf08      	it	eq
 8004674:	f8c8 1000 	streq.w	r1, [r8]
 8004678:	5162      	str	r2, [r4, r5]
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f82f 	bl	80046e0 <__malloc_unlock>
 8004682:	f104 000b 	add.w	r0, r4, #11
 8004686:	1d23      	adds	r3, r4, #4
 8004688:	f020 0007 	bic.w	r0, r0, #7
 800468c:	1ac2      	subs	r2, r0, r3
 800468e:	bf1c      	itt	ne
 8004690:	1a1b      	subne	r3, r3, r0
 8004692:	50a3      	strne	r3, [r4, r2]
 8004694:	e7af      	b.n	80045f6 <_malloc_r+0x22>
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	42a3      	cmp	r3, r4
 800469a:	bf0c      	ite	eq
 800469c:	f8c8 2000 	streq.w	r2, [r8]
 80046a0:	605a      	strne	r2, [r3, #4]
 80046a2:	e7eb      	b.n	800467c <_malloc_r+0xa8>
 80046a4:	4623      	mov	r3, r4
 80046a6:	6864      	ldr	r4, [r4, #4]
 80046a8:	e7ae      	b.n	8004608 <_malloc_r+0x34>
 80046aa:	463c      	mov	r4, r7
 80046ac:	687f      	ldr	r7, [r7, #4]
 80046ae:	e7b6      	b.n	800461e <_malloc_r+0x4a>
 80046b0:	461a      	mov	r2, r3
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d1fb      	bne.n	80046b0 <_malloc_r+0xdc>
 80046b8:	2300      	movs	r3, #0
 80046ba:	6053      	str	r3, [r2, #4]
 80046bc:	e7de      	b.n	800467c <_malloc_r+0xa8>
 80046be:	230c      	movs	r3, #12
 80046c0:	4630      	mov	r0, r6
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f000 f80c 	bl	80046e0 <__malloc_unlock>
 80046c8:	e794      	b.n	80045f4 <_malloc_r+0x20>
 80046ca:	6005      	str	r5, [r0, #0]
 80046cc:	e7d6      	b.n	800467c <_malloc_r+0xa8>
 80046ce:	bf00      	nop
 80046d0:	200002d8 	.word	0x200002d8

080046d4 <__malloc_lock>:
 80046d4:	4801      	ldr	r0, [pc, #4]	@ (80046dc <__malloc_lock+0x8>)
 80046d6:	f7ff bf11 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80046da:	bf00      	nop
 80046dc:	200002d0 	.word	0x200002d0

080046e0 <__malloc_unlock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <__malloc_unlock+0x8>)
 80046e2:	f7ff bf0c 	b.w	80044fe <__retarget_lock_release_recursive>
 80046e6:	bf00      	nop
 80046e8:	200002d0 	.word	0x200002d0

080046ec <__ssputs_r>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	461f      	mov	r7, r3
 80046f2:	688e      	ldr	r6, [r1, #8]
 80046f4:	4682      	mov	sl, r0
 80046f6:	42be      	cmp	r6, r7
 80046f8:	460c      	mov	r4, r1
 80046fa:	4690      	mov	r8, r2
 80046fc:	680b      	ldr	r3, [r1, #0]
 80046fe:	d82d      	bhi.n	800475c <__ssputs_r+0x70>
 8004700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004708:	d026      	beq.n	8004758 <__ssputs_r+0x6c>
 800470a:	6965      	ldr	r5, [r4, #20]
 800470c:	6909      	ldr	r1, [r1, #16]
 800470e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004712:	eba3 0901 	sub.w	r9, r3, r1
 8004716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800471a:	1c7b      	adds	r3, r7, #1
 800471c:	444b      	add	r3, r9
 800471e:	106d      	asrs	r5, r5, #1
 8004720:	429d      	cmp	r5, r3
 8004722:	bf38      	it	cc
 8004724:	461d      	movcc	r5, r3
 8004726:	0553      	lsls	r3, r2, #21
 8004728:	d527      	bpl.n	800477a <__ssputs_r+0x8e>
 800472a:	4629      	mov	r1, r5
 800472c:	f7ff ff52 	bl	80045d4 <_malloc_r>
 8004730:	4606      	mov	r6, r0
 8004732:	b360      	cbz	r0, 800478e <__ssputs_r+0xa2>
 8004734:	464a      	mov	r2, r9
 8004736:	6921      	ldr	r1, [r4, #16]
 8004738:	f000 fafa 	bl	8004d30 <memcpy>
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	6126      	str	r6, [r4, #16]
 800474a:	444e      	add	r6, r9
 800474c:	6026      	str	r6, [r4, #0]
 800474e:	463e      	mov	r6, r7
 8004750:	6165      	str	r5, [r4, #20]
 8004752:	eba5 0509 	sub.w	r5, r5, r9
 8004756:	60a5      	str	r5, [r4, #8]
 8004758:	42be      	cmp	r6, r7
 800475a:	d900      	bls.n	800475e <__ssputs_r+0x72>
 800475c:	463e      	mov	r6, r7
 800475e:	4632      	mov	r2, r6
 8004760:	4641      	mov	r1, r8
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	f000 faac 	bl	8004cc0 <memmove>
 8004768:	2000      	movs	r0, #0
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	1b9b      	subs	r3, r3, r6
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	4433      	add	r3, r6
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	462a      	mov	r2, r5
 800477c:	f000 fae6 	bl	8004d4c <_realloc_r>
 8004780:	4606      	mov	r6, r0
 8004782:	2800      	cmp	r0, #0
 8004784:	d1e0      	bne.n	8004748 <__ssputs_r+0x5c>
 8004786:	4650      	mov	r0, sl
 8004788:	6921      	ldr	r1, [r4, #16]
 800478a:	f7ff feb9 	bl	8004500 <_free_r>
 800478e:	230c      	movs	r3, #12
 8004790:	f8ca 3000 	str.w	r3, [sl]
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	e7e9      	b.n	8004776 <__ssputs_r+0x8a>
	...

080047a4 <_svfiprintf_r>:
 80047a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a8:	4698      	mov	r8, r3
 80047aa:	898b      	ldrh	r3, [r1, #12]
 80047ac:	4607      	mov	r7, r0
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	460d      	mov	r5, r1
 80047b2:	4614      	mov	r4, r2
 80047b4:	b09d      	sub	sp, #116	@ 0x74
 80047b6:	d510      	bpl.n	80047da <_svfiprintf_r+0x36>
 80047b8:	690b      	ldr	r3, [r1, #16]
 80047ba:	b973      	cbnz	r3, 80047da <_svfiprintf_r+0x36>
 80047bc:	2140      	movs	r1, #64	@ 0x40
 80047be:	f7ff ff09 	bl	80045d4 <_malloc_r>
 80047c2:	6028      	str	r0, [r5, #0]
 80047c4:	6128      	str	r0, [r5, #16]
 80047c6:	b930      	cbnz	r0, 80047d6 <_svfiprintf_r+0x32>
 80047c8:	230c      	movs	r3, #12
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	b01d      	add	sp, #116	@ 0x74
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	2340      	movs	r3, #64	@ 0x40
 80047d8:	616b      	str	r3, [r5, #20]
 80047da:	2300      	movs	r3, #0
 80047dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047de:	2320      	movs	r3, #32
 80047e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047e4:	2330      	movs	r3, #48	@ 0x30
 80047e6:	f04f 0901 	mov.w	r9, #1
 80047ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004988 <_svfiprintf_r+0x1e4>
 80047f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047f6:	4623      	mov	r3, r4
 80047f8:	469a      	mov	sl, r3
 80047fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047fe:	b10a      	cbz	r2, 8004804 <_svfiprintf_r+0x60>
 8004800:	2a25      	cmp	r2, #37	@ 0x25
 8004802:	d1f9      	bne.n	80047f8 <_svfiprintf_r+0x54>
 8004804:	ebba 0b04 	subs.w	fp, sl, r4
 8004808:	d00b      	beq.n	8004822 <_svfiprintf_r+0x7e>
 800480a:	465b      	mov	r3, fp
 800480c:	4622      	mov	r2, r4
 800480e:	4629      	mov	r1, r5
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ff6b 	bl	80046ec <__ssputs_r>
 8004816:	3001      	adds	r0, #1
 8004818:	f000 80a7 	beq.w	800496a <_svfiprintf_r+0x1c6>
 800481c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800481e:	445a      	add	r2, fp
 8004820:	9209      	str	r2, [sp, #36]	@ 0x24
 8004822:	f89a 3000 	ldrb.w	r3, [sl]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 809f 	beq.w	800496a <_svfiprintf_r+0x1c6>
 800482c:	2300      	movs	r3, #0
 800482e:	f04f 32ff 	mov.w	r2, #4294967295
 8004832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004836:	f10a 0a01 	add.w	sl, sl, #1
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	9307      	str	r3, [sp, #28]
 800483e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004842:	931a      	str	r3, [sp, #104]	@ 0x68
 8004844:	4654      	mov	r4, sl
 8004846:	2205      	movs	r2, #5
 8004848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484c:	484e      	ldr	r0, [pc, #312]	@ (8004988 <_svfiprintf_r+0x1e4>)
 800484e:	f000 fa61 	bl	8004d14 <memchr>
 8004852:	9a04      	ldr	r2, [sp, #16]
 8004854:	b9d8      	cbnz	r0, 800488e <_svfiprintf_r+0xea>
 8004856:	06d0      	lsls	r0, r2, #27
 8004858:	bf44      	itt	mi
 800485a:	2320      	movmi	r3, #32
 800485c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004860:	0711      	lsls	r1, r2, #28
 8004862:	bf44      	itt	mi
 8004864:	232b      	movmi	r3, #43	@ 0x2b
 8004866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800486a:	f89a 3000 	ldrb.w	r3, [sl]
 800486e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004870:	d015      	beq.n	800489e <_svfiprintf_r+0xfa>
 8004872:	4654      	mov	r4, sl
 8004874:	2000      	movs	r0, #0
 8004876:	f04f 0c0a 	mov.w	ip, #10
 800487a:	9a07      	ldr	r2, [sp, #28]
 800487c:	4621      	mov	r1, r4
 800487e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004882:	3b30      	subs	r3, #48	@ 0x30
 8004884:	2b09      	cmp	r3, #9
 8004886:	d94b      	bls.n	8004920 <_svfiprintf_r+0x17c>
 8004888:	b1b0      	cbz	r0, 80048b8 <_svfiprintf_r+0x114>
 800488a:	9207      	str	r2, [sp, #28]
 800488c:	e014      	b.n	80048b8 <_svfiprintf_r+0x114>
 800488e:	eba0 0308 	sub.w	r3, r0, r8
 8004892:	fa09 f303 	lsl.w	r3, r9, r3
 8004896:	4313      	orrs	r3, r2
 8004898:	46a2      	mov	sl, r4
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	e7d2      	b.n	8004844 <_svfiprintf_r+0xa0>
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	1d19      	adds	r1, r3, #4
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	9103      	str	r1, [sp, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfbb      	ittet	lt
 80048aa:	425b      	neglt	r3, r3
 80048ac:	f042 0202 	orrlt.w	r2, r2, #2
 80048b0:	9307      	strge	r3, [sp, #28]
 80048b2:	9307      	strlt	r3, [sp, #28]
 80048b4:	bfb8      	it	lt
 80048b6:	9204      	strlt	r2, [sp, #16]
 80048b8:	7823      	ldrb	r3, [r4, #0]
 80048ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80048bc:	d10a      	bne.n	80048d4 <_svfiprintf_r+0x130>
 80048be:	7863      	ldrb	r3, [r4, #1]
 80048c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c2:	d132      	bne.n	800492a <_svfiprintf_r+0x186>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	3402      	adds	r4, #2
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	9203      	str	r2, [sp, #12]
 80048ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048d2:	9305      	str	r3, [sp, #20]
 80048d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800498c <_svfiprintf_r+0x1e8>
 80048d8:	2203      	movs	r2, #3
 80048da:	4650      	mov	r0, sl
 80048dc:	7821      	ldrb	r1, [r4, #0]
 80048de:	f000 fa19 	bl	8004d14 <memchr>
 80048e2:	b138      	cbz	r0, 80048f4 <_svfiprintf_r+0x150>
 80048e4:	2240      	movs	r2, #64	@ 0x40
 80048e6:	9b04      	ldr	r3, [sp, #16]
 80048e8:	eba0 000a 	sub.w	r0, r0, sl
 80048ec:	4082      	lsls	r2, r0
 80048ee:	4313      	orrs	r3, r2
 80048f0:	3401      	adds	r4, #1
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f8:	2206      	movs	r2, #6
 80048fa:	4825      	ldr	r0, [pc, #148]	@ (8004990 <_svfiprintf_r+0x1ec>)
 80048fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004900:	f000 fa08 	bl	8004d14 <memchr>
 8004904:	2800      	cmp	r0, #0
 8004906:	d036      	beq.n	8004976 <_svfiprintf_r+0x1d2>
 8004908:	4b22      	ldr	r3, [pc, #136]	@ (8004994 <_svfiprintf_r+0x1f0>)
 800490a:	bb1b      	cbnz	r3, 8004954 <_svfiprintf_r+0x1b0>
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	3307      	adds	r3, #7
 8004910:	f023 0307 	bic.w	r3, r3, #7
 8004914:	3308      	adds	r3, #8
 8004916:	9303      	str	r3, [sp, #12]
 8004918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800491a:	4433      	add	r3, r6
 800491c:	9309      	str	r3, [sp, #36]	@ 0x24
 800491e:	e76a      	b.n	80047f6 <_svfiprintf_r+0x52>
 8004920:	460c      	mov	r4, r1
 8004922:	2001      	movs	r0, #1
 8004924:	fb0c 3202 	mla	r2, ip, r2, r3
 8004928:	e7a8      	b.n	800487c <_svfiprintf_r+0xd8>
 800492a:	2300      	movs	r3, #0
 800492c:	f04f 0c0a 	mov.w	ip, #10
 8004930:	4619      	mov	r1, r3
 8004932:	3401      	adds	r4, #1
 8004934:	9305      	str	r3, [sp, #20]
 8004936:	4620      	mov	r0, r4
 8004938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800493c:	3a30      	subs	r2, #48	@ 0x30
 800493e:	2a09      	cmp	r2, #9
 8004940:	d903      	bls.n	800494a <_svfiprintf_r+0x1a6>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0c6      	beq.n	80048d4 <_svfiprintf_r+0x130>
 8004946:	9105      	str	r1, [sp, #20]
 8004948:	e7c4      	b.n	80048d4 <_svfiprintf_r+0x130>
 800494a:	4604      	mov	r4, r0
 800494c:	2301      	movs	r3, #1
 800494e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004952:	e7f0      	b.n	8004936 <_svfiprintf_r+0x192>
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	462a      	mov	r2, r5
 800495a:	4638      	mov	r0, r7
 800495c:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <_svfiprintf_r+0x1f4>)
 800495e:	a904      	add	r1, sp, #16
 8004960:	f3af 8000 	nop.w
 8004964:	1c42      	adds	r2, r0, #1
 8004966:	4606      	mov	r6, r0
 8004968:	d1d6      	bne.n	8004918 <_svfiprintf_r+0x174>
 800496a:	89ab      	ldrh	r3, [r5, #12]
 800496c:	065b      	lsls	r3, r3, #25
 800496e:	f53f af2d 	bmi.w	80047cc <_svfiprintf_r+0x28>
 8004972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004974:	e72c      	b.n	80047d0 <_svfiprintf_r+0x2c>
 8004976:	ab03      	add	r3, sp, #12
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	462a      	mov	r2, r5
 800497c:	4638      	mov	r0, r7
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <_svfiprintf_r+0x1f4>)
 8004980:	a904      	add	r1, sp, #16
 8004982:	f000 f87d 	bl	8004a80 <_printf_i>
 8004986:	e7ed      	b.n	8004964 <_svfiprintf_r+0x1c0>
 8004988:	08004e56 	.word	0x08004e56
 800498c:	08004e5c 	.word	0x08004e5c
 8004990:	08004e60 	.word	0x08004e60
 8004994:	00000000 	.word	0x00000000
 8004998:	080046ed 	.word	0x080046ed

0800499c <_printf_common>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	4616      	mov	r6, r2
 80049a2:	4698      	mov	r8, r3
 80049a4:	688a      	ldr	r2, [r1, #8]
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4607      	mov	r7, r0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bfb8      	it	lt
 80049ae:	4613      	movlt	r3, r2
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049b6:	460c      	mov	r4, r1
 80049b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049bc:	b10a      	cbz	r2, 80049c2 <_printf_common+0x26>
 80049be:	3301      	adds	r3, #1
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	0699      	lsls	r1, r3, #26
 80049c6:	bf42      	ittt	mi
 80049c8:	6833      	ldrmi	r3, [r6, #0]
 80049ca:	3302      	addmi	r3, #2
 80049cc:	6033      	strmi	r3, [r6, #0]
 80049ce:	6825      	ldr	r5, [r4, #0]
 80049d0:	f015 0506 	ands.w	r5, r5, #6
 80049d4:	d106      	bne.n	80049e4 <_printf_common+0x48>
 80049d6:	f104 0a19 	add.w	sl, r4, #25
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dc2b      	bgt.n	8004a3c <_printf_common+0xa0>
 80049e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	3b00      	subs	r3, #0
 80049ec:	bf18      	it	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	0692      	lsls	r2, r2, #26
 80049f2:	d430      	bmi.n	8004a56 <_printf_common+0xba>
 80049f4:	4641      	mov	r1, r8
 80049f6:	4638      	mov	r0, r7
 80049f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049fc:	47c8      	blx	r9
 80049fe:	3001      	adds	r0, #1
 8004a00:	d023      	beq.n	8004a4a <_printf_common+0xae>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf14      	ite	ne
 8004a0e:	2500      	movne	r5, #0
 8004a10:	6833      	ldreq	r3, [r6, #0]
 8004a12:	f04f 0600 	mov.w	r6, #0
 8004a16:	bf08      	it	eq
 8004a18:	68e5      	ldreq	r5, [r4, #12]
 8004a1a:	f104 041a 	add.w	r4, r4, #26
 8004a1e:	bf08      	it	eq
 8004a20:	1aed      	subeq	r5, r5, r3
 8004a22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a26:	bf08      	it	eq
 8004a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	bfc4      	itt	gt
 8004a30:	1a9b      	subgt	r3, r3, r2
 8004a32:	18ed      	addgt	r5, r5, r3
 8004a34:	42b5      	cmp	r5, r6
 8004a36:	d11a      	bne.n	8004a6e <_printf_common+0xd2>
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e008      	b.n	8004a4e <_printf_common+0xb2>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4652      	mov	r2, sl
 8004a40:	4641      	mov	r1, r8
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c8      	blx	r9
 8004a46:	3001      	adds	r0, #1
 8004a48:	d103      	bne.n	8004a52 <_printf_common+0xb6>
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a52:	3501      	adds	r5, #1
 8004a54:	e7c1      	b.n	80049da <_printf_common+0x3e>
 8004a56:	2030      	movs	r0, #48	@ 0x30
 8004a58:	18e1      	adds	r1, r4, r3
 8004a5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a64:	4422      	add	r2, r4
 8004a66:	3302      	adds	r3, #2
 8004a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a6c:	e7c2      	b.n	80049f4 <_printf_common+0x58>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4622      	mov	r2, r4
 8004a72:	4641      	mov	r1, r8
 8004a74:	4638      	mov	r0, r7
 8004a76:	47c8      	blx	r9
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d0e6      	beq.n	8004a4a <_printf_common+0xae>
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7d9      	b.n	8004a34 <_printf_common+0x98>

08004a80 <_printf_i>:
 8004a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	7e0f      	ldrb	r7, [r1, #24]
 8004a86:	4691      	mov	r9, r2
 8004a88:	2f78      	cmp	r7, #120	@ 0x78
 8004a8a:	4680      	mov	r8, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	469a      	mov	sl, r3
 8004a90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a96:	d807      	bhi.n	8004aa8 <_printf_i+0x28>
 8004a98:	2f62      	cmp	r7, #98	@ 0x62
 8004a9a:	d80a      	bhi.n	8004ab2 <_printf_i+0x32>
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	f000 80d3 	beq.w	8004c48 <_printf_i+0x1c8>
 8004aa2:	2f58      	cmp	r7, #88	@ 0x58
 8004aa4:	f000 80ba 	beq.w	8004c1c <_printf_i+0x19c>
 8004aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ab0:	e03a      	b.n	8004b28 <_printf_i+0xa8>
 8004ab2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ab6:	2b15      	cmp	r3, #21
 8004ab8:	d8f6      	bhi.n	8004aa8 <_printf_i+0x28>
 8004aba:	a101      	add	r1, pc, #4	@ (adr r1, 8004ac0 <_printf_i+0x40>)
 8004abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ac0:	08004b19 	.word	0x08004b19
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004aa9 	.word	0x08004aa9
 8004acc:	08004aa9 	.word	0x08004aa9
 8004ad0:	08004aa9 	.word	0x08004aa9
 8004ad4:	08004aa9 	.word	0x08004aa9
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004aa9 	.word	0x08004aa9
 8004ae0:	08004aa9 	.word	0x08004aa9
 8004ae4:	08004aa9 	.word	0x08004aa9
 8004ae8:	08004aa9 	.word	0x08004aa9
 8004aec:	08004c2f 	.word	0x08004c2f
 8004af0:	08004b57 	.word	0x08004b57
 8004af4:	08004be9 	.word	0x08004be9
 8004af8:	08004aa9 	.word	0x08004aa9
 8004afc:	08004aa9 	.word	0x08004aa9
 8004b00:	08004c51 	.word	0x08004c51
 8004b04:	08004aa9 	.word	0x08004aa9
 8004b08:	08004b57 	.word	0x08004b57
 8004b0c:	08004aa9 	.word	0x08004aa9
 8004b10:	08004aa9 	.word	0x08004aa9
 8004b14:	08004bf1 	.word	0x08004bf1
 8004b18:	6833      	ldr	r3, [r6, #0]
 8004b1a:	1d1a      	adds	r2, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6032      	str	r2, [r6, #0]
 8004b20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e09e      	b.n	8004c6a <_printf_i+0x1ea>
 8004b2c:	6833      	ldr	r3, [r6, #0]
 8004b2e:	6820      	ldr	r0, [r4, #0]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	6031      	str	r1, [r6, #0]
 8004b34:	0606      	lsls	r6, r0, #24
 8004b36:	d501      	bpl.n	8004b3c <_printf_i+0xbc>
 8004b38:	681d      	ldr	r5, [r3, #0]
 8004b3a:	e003      	b.n	8004b44 <_printf_i+0xc4>
 8004b3c:	0645      	lsls	r5, r0, #25
 8004b3e:	d5fb      	bpl.n	8004b38 <_printf_i+0xb8>
 8004b40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	da03      	bge.n	8004b50 <_printf_i+0xd0>
 8004b48:	232d      	movs	r3, #45	@ 0x2d
 8004b4a:	426d      	negs	r5, r5
 8004b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b50:	230a      	movs	r3, #10
 8004b52:	4859      	ldr	r0, [pc, #356]	@ (8004cb8 <_printf_i+0x238>)
 8004b54:	e011      	b.n	8004b7a <_printf_i+0xfa>
 8004b56:	6821      	ldr	r1, [r4, #0]
 8004b58:	6833      	ldr	r3, [r6, #0]
 8004b5a:	0608      	lsls	r0, r1, #24
 8004b5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b60:	d402      	bmi.n	8004b68 <_printf_i+0xe8>
 8004b62:	0649      	lsls	r1, r1, #25
 8004b64:	bf48      	it	mi
 8004b66:	b2ad      	uxthmi	r5, r5
 8004b68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	bf14      	ite	ne
 8004b6e:	230a      	movne	r3, #10
 8004b70:	2308      	moveq	r3, #8
 8004b72:	4851      	ldr	r0, [pc, #324]	@ (8004cb8 <_printf_i+0x238>)
 8004b74:	2100      	movs	r1, #0
 8004b76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b7a:	6866      	ldr	r6, [r4, #4]
 8004b7c:	2e00      	cmp	r6, #0
 8004b7e:	bfa8      	it	ge
 8004b80:	6821      	ldrge	r1, [r4, #0]
 8004b82:	60a6      	str	r6, [r4, #8]
 8004b84:	bfa4      	itt	ge
 8004b86:	f021 0104 	bicge.w	r1, r1, #4
 8004b8a:	6021      	strge	r1, [r4, #0]
 8004b8c:	b90d      	cbnz	r5, 8004b92 <_printf_i+0x112>
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	d04b      	beq.n	8004c2a <_printf_i+0x1aa>
 8004b92:	4616      	mov	r6, r2
 8004b94:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b98:	fb03 5711 	mls	r7, r3, r1, r5
 8004b9c:	5dc7      	ldrb	r7, [r0, r7]
 8004b9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ba2:	462f      	mov	r7, r5
 8004ba4:	42bb      	cmp	r3, r7
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	d9f4      	bls.n	8004b94 <_printf_i+0x114>
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d10b      	bne.n	8004bc6 <_printf_i+0x146>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	07df      	lsls	r7, r3, #31
 8004bb2:	d508      	bpl.n	8004bc6 <_printf_i+0x146>
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	6861      	ldr	r1, [r4, #4]
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	bfde      	ittt	le
 8004bbc:	2330      	movle	r3, #48	@ 0x30
 8004bbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bc6:	1b92      	subs	r2, r2, r6
 8004bc8:	6122      	str	r2, [r4, #16]
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f8cd a000 	str.w	sl, [sp]
 8004bd4:	aa03      	add	r2, sp, #12
 8004bd6:	f7ff fee1 	bl	800499c <_printf_common>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d14a      	bne.n	8004c74 <_printf_i+0x1f4>
 8004bde:	f04f 30ff 	mov.w	r0, #4294967295
 8004be2:	b004      	add	sp, #16
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	2778      	movs	r7, #120	@ 0x78
 8004bf2:	4832      	ldr	r0, [pc, #200]	@ (8004cbc <_printf_i+0x23c>)
 8004bf4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	6831      	ldr	r1, [r6, #0]
 8004bfc:	061f      	lsls	r7, r3, #24
 8004bfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c02:	d402      	bmi.n	8004c0a <_printf_i+0x18a>
 8004c04:	065f      	lsls	r7, r3, #25
 8004c06:	bf48      	it	mi
 8004c08:	b2ad      	uxthmi	r5, r5
 8004c0a:	6031      	str	r1, [r6, #0]
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	bf44      	itt	mi
 8004c10:	f043 0320 	orrmi.w	r3, r3, #32
 8004c14:	6023      	strmi	r3, [r4, #0]
 8004c16:	b11d      	cbz	r5, 8004c20 <_printf_i+0x1a0>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	e7ab      	b.n	8004b74 <_printf_i+0xf4>
 8004c1c:	4826      	ldr	r0, [pc, #152]	@ (8004cb8 <_printf_i+0x238>)
 8004c1e:	e7e9      	b.n	8004bf4 <_printf_i+0x174>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	f023 0320 	bic.w	r3, r3, #32
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	e7f6      	b.n	8004c18 <_printf_i+0x198>
 8004c2a:	4616      	mov	r6, r2
 8004c2c:	e7bd      	b.n	8004baa <_printf_i+0x12a>
 8004c2e:	6833      	ldr	r3, [r6, #0]
 8004c30:	6825      	ldr	r5, [r4, #0]
 8004c32:	1d18      	adds	r0, r3, #4
 8004c34:	6961      	ldr	r1, [r4, #20]
 8004c36:	6030      	str	r0, [r6, #0]
 8004c38:	062e      	lsls	r6, r5, #24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	d501      	bpl.n	8004c42 <_printf_i+0x1c2>
 8004c3e:	6019      	str	r1, [r3, #0]
 8004c40:	e002      	b.n	8004c48 <_printf_i+0x1c8>
 8004c42:	0668      	lsls	r0, r5, #25
 8004c44:	d5fb      	bpl.n	8004c3e <_printf_i+0x1be>
 8004c46:	8019      	strh	r1, [r3, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	e7bc      	b.n	8004bca <_printf_i+0x14a>
 8004c50:	6833      	ldr	r3, [r6, #0]
 8004c52:	2100      	movs	r1, #0
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	6032      	str	r2, [r6, #0]
 8004c58:	681e      	ldr	r6, [r3, #0]
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	f000 f859 	bl	8004d14 <memchr>
 8004c62:	b108      	cbz	r0, 8004c68 <_printf_i+0x1e8>
 8004c64:	1b80      	subs	r0, r0, r6
 8004c66:	6060      	str	r0, [r4, #4]
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c72:	e7aa      	b.n	8004bca <_printf_i+0x14a>
 8004c74:	4632      	mov	r2, r6
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	47d0      	blx	sl
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0ad      	beq.n	8004bde <_printf_i+0x15e>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	079b      	lsls	r3, r3, #30
 8004c86:	d413      	bmi.n	8004cb0 <_printf_i+0x230>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e7a6      	b.n	8004be2 <_printf_i+0x162>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4632      	mov	r2, r6
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	47d0      	blx	sl
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d09d      	beq.n	8004bde <_printf_i+0x15e>
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	9903      	ldr	r1, [sp, #12]
 8004ca8:	1a5b      	subs	r3, r3, r1
 8004caa:	42ab      	cmp	r3, r5
 8004cac:	dcf2      	bgt.n	8004c94 <_printf_i+0x214>
 8004cae:	e7eb      	b.n	8004c88 <_printf_i+0x208>
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	f104 0619 	add.w	r6, r4, #25
 8004cb6:	e7f5      	b.n	8004ca4 <_printf_i+0x224>
 8004cb8:	08004e67 	.word	0x08004e67
 8004cbc:	08004e78 	.word	0x08004e78

08004cc0 <memmove>:
 8004cc0:	4288      	cmp	r0, r1
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	eb01 0402 	add.w	r4, r1, r2
 8004cc8:	d902      	bls.n	8004cd0 <memmove+0x10>
 8004cca:	4284      	cmp	r4, r0
 8004ccc:	4623      	mov	r3, r4
 8004cce:	d807      	bhi.n	8004ce0 <memmove+0x20>
 8004cd0:	1e43      	subs	r3, r0, #1
 8004cd2:	42a1      	cmp	r1, r4
 8004cd4:	d008      	beq.n	8004ce8 <memmove+0x28>
 8004cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cde:	e7f8      	b.n	8004cd2 <memmove+0x12>
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	4402      	add	r2, r0
 8004ce4:	428a      	cmp	r2, r1
 8004ce6:	d100      	bne.n	8004cea <memmove+0x2a>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cf2:	e7f7      	b.n	8004ce4 <memmove+0x24>

08004cf4 <_sbrk_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	4d05      	ldr	r5, [pc, #20]	@ (8004d10 <_sbrk_r+0x1c>)
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fb ff7c 	bl	8000bfc <_sbrk>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_sbrk_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_sbrk_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200002cc 	.word	0x200002cc

08004d14 <memchr>:
 8004d14:	4603      	mov	r3, r0
 8004d16:	b510      	push	{r4, lr}
 8004d18:	b2c9      	uxtb	r1, r1
 8004d1a:	4402      	add	r2, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	d101      	bne.n	8004d26 <memchr+0x12>
 8004d22:	2000      	movs	r0, #0
 8004d24:	e003      	b.n	8004d2e <memchr+0x1a>
 8004d26:	7804      	ldrb	r4, [r0, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	428c      	cmp	r4, r1
 8004d2c:	d1f6      	bne.n	8004d1c <memchr+0x8>
 8004d2e:	bd10      	pop	{r4, pc}

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	4291      	cmp	r1, r2
 8004d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <_realloc_r>:
 8004d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4680      	mov	r8, r0
 8004d52:	4615      	mov	r5, r2
 8004d54:	460c      	mov	r4, r1
 8004d56:	b921      	cbnz	r1, 8004d62 <_realloc_r+0x16>
 8004d58:	4611      	mov	r1, r2
 8004d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	f7ff bc39 	b.w	80045d4 <_malloc_r>
 8004d62:	b92a      	cbnz	r2, 8004d70 <_realloc_r+0x24>
 8004d64:	f7ff fbcc 	bl	8004500 <_free_r>
 8004d68:	2400      	movs	r4, #0
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d70:	f000 f81a 	bl	8004da8 <_malloc_usable_size_r>
 8004d74:	4285      	cmp	r5, r0
 8004d76:	4606      	mov	r6, r0
 8004d78:	d802      	bhi.n	8004d80 <_realloc_r+0x34>
 8004d7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d7e:	d8f4      	bhi.n	8004d6a <_realloc_r+0x1e>
 8004d80:	4629      	mov	r1, r5
 8004d82:	4640      	mov	r0, r8
 8004d84:	f7ff fc26 	bl	80045d4 <_malloc_r>
 8004d88:	4607      	mov	r7, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0ec      	beq.n	8004d68 <_realloc_r+0x1c>
 8004d8e:	42b5      	cmp	r5, r6
 8004d90:	462a      	mov	r2, r5
 8004d92:	4621      	mov	r1, r4
 8004d94:	bf28      	it	cs
 8004d96:	4632      	movcs	r2, r6
 8004d98:	f7ff ffca 	bl	8004d30 <memcpy>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4640      	mov	r0, r8
 8004da0:	f7ff fbae 	bl	8004500 <_free_r>
 8004da4:	463c      	mov	r4, r7
 8004da6:	e7e0      	b.n	8004d6a <_realloc_r+0x1e>

08004da8 <_malloc_usable_size_r>:
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f18      	subs	r0, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbc      	itt	lt
 8004db2:	580b      	ldrlt	r3, [r1, r0]
 8004db4:	18c0      	addlt	r0, r0, r3
 8004db6:	4770      	bx	lr

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
